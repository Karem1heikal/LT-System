
adcc3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004138  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000009c  00800060  00004138  000041cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  008000fc  008000fc  00004268  2**0
                  ALLOC
  3 .stab         000039f0  00000000  00000000  00004268  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000138c  00000000  00000000  00007c58  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00008fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00009124  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00009294  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000aedd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000bdc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000cb78  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000ccd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000cf65  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d733  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 67 07 	jmp	0xece	; 0xece <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e3       	ldi	r30, 0x38	; 56
      68:	f1 e4       	ldi	r31, 0x41	; 65
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 3f       	cpi	r26, 0xFC	; 252
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac ef       	ldi	r26, 0xFC	; 252
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 31       	cpi	r26, 0x11	; 17
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <main>
      8a:	0c 94 9a 20 	jmp	0x4134	; 0x4134 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 63 20 	jmp	0x40c6	; 0x40c6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a5 ec       	ldi	r26, 0xC5	; 197
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 7f 20 	jmp	0x40fe	; 0x40fe <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 6f 20 	jmp	0x40de	; 0x40de <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 8b 20 	jmp	0x4116	; 0x4116 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 6f 20 	jmp	0x40de	; 0x40de <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 8b 20 	jmp	0x4116	; 0x4116 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 63 20 	jmp	0x40c6	; 0x40c6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	85 ec       	ldi	r24, 0xC5	; 197
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 7f 20 	jmp	0x40fe	; 0x40fe <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 6f 20 	jmp	0x40de	; 0x40de <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 8b 20 	jmp	0x4116	; 0x4116 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 6f 20 	jmp	0x40de	; 0x40de <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 8b 20 	jmp	0x4116	; 0x4116 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 6f 20 	jmp	0x40de	; 0x40de <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 8b 20 	jmp	0x4116	; 0x4116 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 73 20 	jmp	0x40e6	; 0x40e6 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 8f 20 	jmp	0x411e	; 0x411e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ADC_voidInit>:

u8 ADC_u8SourceOfConv;
/*busy flag states*/
u8 ADC_u8BusyState = IDLE;
void ADC_voidInit()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/*set bit ADC reference*///
#if ADC_INITAL_REF	== AREF
	CLR_BIT(ADMUX,ADMUX_REFS1);
	CLR_BIT(ADMUX,ADMUX_REFS0);
#elif	ADC_INITAL_REF	== AVCC
	CLR_BIT(ADMUX,ADMUX_REFS1);
     b4e:	a7 e2       	ldi	r26, 0x27	; 39
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e7 e2       	ldi	r30, 0x27	; 39
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	8f 77       	andi	r24, 0x7F	; 127
     b5a:	8c 93       	st	X, r24
	SET_BIT(ADMUX,ADMUX_REFS0);
     b5c:	a7 e2       	ldi	r26, 0x27	; 39
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e7 e2       	ldi	r30, 0x27	; 39
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	80 5c       	subi	r24, 0xC0	; 192
     b68:	8c 93       	st	X, r24

	/*set bit ADC Adjust data*/
#if	ADC_ADJUST_DATA == Right_adjust
	CLR_BIT(ADMUX,ADMUX_ADLAR);
#elif	ADC_ADJUST_DATA == left_adjust
	SET_BIT(ADMUX,ADMUX_ADLAR);
     b6a:	a7 e2       	ldi	r26, 0x27	; 39
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e7 e2       	ldi	r30, 0x27	; 39
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	80 5e       	subi	r24, 0xE0	; 224
     b76:	8c 93       	st	X, r24
#else
#error "wrong in Choosing configuration of ADC Data Register "
#endif

	/*Prescaler Selection ADPS By Masking Value */
	ADCSRA&=ADCSRA_MASK;
     b78:	a6 e2       	ldi	r26, 0x26	; 38
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e6 e2       	ldi	r30, 0x26	; 38
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	88 7f       	andi	r24, 0xF8	; 248
     b84:	8c 93       	st	X, r24
	ADCSRA|=ADC_DIV_FACTOR;
     b86:	a6 e2       	ldi	r26, 0x26	; 38
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e6 e2       	ldi	r30, 0x26	; 38
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	87 60       	ori	r24, 0x07	; 7
     b92:	8c 93       	st	X, r24
	/*Enable ADC */
	SET_BIT(ADCSRA,ADCSRA_ADEN);
     b94:	a6 e2       	ldi	r26, 0x26	; 38
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e6 e2       	ldi	r30, 0x26	; 38
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	80 58       	subi	r24, 0x80	; 128
     ba0:	8c 93       	st	X, r24
	/*the Auto Trigger source is selected By setting ADCS 3-Bit*/
	SET_BIT(ADCSRA,ADCSRA_ADIE);
#endif


}
     ba2:	cf 91       	pop	r28
     ba4:	df 91       	pop	r29
     ba6:	08 95       	ret

00000ba8 <ADC_u8StartConversionSynch>:
/*convert output Values to voltage Values*/
u8 ADC_u8StartConversionSynch(u8 Copy_u8Channel,u16 *Copy_u16ChannelReading)
{
     ba8:	df 93       	push	r29
     baa:	cf 93       	push	r28
     bac:	cd b7       	in	r28, 0x3d	; 61
     bae:	de b7       	in	r29, 0x3e	; 62
     bb0:	28 97       	sbiw	r28, 0x08	; 8
     bb2:	0f b6       	in	r0, 0x3f	; 63
     bb4:	f8 94       	cli
     bb6:	de bf       	out	0x3e, r29	; 62
     bb8:	0f be       	out	0x3f, r0	; 63
     bba:	cd bf       	out	0x3d, r28	; 61
     bbc:	8e 83       	std	Y+6, r24	; 0x06
     bbe:	78 87       	std	Y+8, r23	; 0x08
     bc0:	6f 83       	std	Y+7, r22	; 0x07
	u8 Local_u8ErrorState=OK;
     bc2:	1d 82       	std	Y+5, r1	; 0x05
	u32 Local_u32Counter=0;
     bc4:	19 82       	std	Y+1, r1	; 0x01
     bc6:	1a 82       	std	Y+2, r1	; 0x02
     bc8:	1b 82       	std	Y+3, r1	; 0x03
     bca:	1c 82       	std	Y+4, r1	; 0x04
	if(ADC_u8BusyState==IDLE){
     bcc:	80 91 04 01 	lds	r24, 0x0104
     bd0:	88 23       	and	r24, r24
     bd2:	09 f0       	breq	.+2      	; 0xbd6 <ADC_u8StartConversionSynch+0x2e>
     bd4:	5e c0       	rjmp	.+188    	; 0xc92 <ADC_u8StartConversionSynch+0xea>
		ADC_u8BusyState = Busy;
     bd6:	81 e0       	ldi	r24, 0x01	; 1
     bd8:	80 93 04 01 	sts	0x0104, r24
		if (ADC_AUTO_TRIGGER==Disable)	//( single conversion )
		{
			/*set the required channel in ADMUX register */

			ADMUX&=ADMUX_MASK;
     bdc:	a7 e2       	ldi	r26, 0x27	; 39
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	e7 e2       	ldi	r30, 0x27	; 39
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	80 7e       	andi	r24, 0xE0	; 224
     be8:	8c 93       	st	X, r24
			ADMUX|=Copy_u8Channel;
     bea:	a7 e2       	ldi	r26, 0x27	; 39
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	e7 e2       	ldi	r30, 0x27	; 39
     bf0:	f0 e0       	ldi	r31, 0x00	; 0
     bf2:	90 81       	ld	r25, Z
     bf4:	8e 81       	ldd	r24, Y+6	; 0x06
     bf6:	89 2b       	or	r24, r25
     bf8:	8c 93       	st	X, r24
			/*START conversion */
			SET_BIT(ADCSRA,ADCSRA_ADSC);
     bfa:	a6 e2       	ldi	r26, 0x26	; 38
     bfc:	b0 e0       	ldi	r27, 0x00	; 0
     bfe:	e6 e2       	ldi	r30, 0x26	; 38
     c00:	f0 e0       	ldi	r31, 0x00	; 0
     c02:	80 81       	ld	r24, Z
     c04:	80 5c       	subi	r24, 0xC0	; 192
     c06:	8c 93       	st	X, r24
     c08:	0b c0       	rjmp	.+22     	; 0xc20 <ADC_u8StartConversionSynch+0x78>
			/*Polling (busy waiting) until the conversion complete flag is set or Counter reaches timeout Value*/
			while(((GET_BIT(ADCSRA,ADCSRA_ADIF))==0)&&(Local_u32Counter!=ADC_U32TIMEOUT))
			{
				Local_u32Counter++;
     c0a:	89 81       	ldd	r24, Y+1	; 0x01
     c0c:	9a 81       	ldd	r25, Y+2	; 0x02
     c0e:	ab 81       	ldd	r26, Y+3	; 0x03
     c10:	bc 81       	ldd	r27, Y+4	; 0x04
     c12:	01 96       	adiw	r24, 0x01	; 1
     c14:	a1 1d       	adc	r26, r1
     c16:	b1 1d       	adc	r27, r1
     c18:	89 83       	std	Y+1, r24	; 0x01
     c1a:	9a 83       	std	Y+2, r25	; 0x02
     c1c:	ab 83       	std	Y+3, r26	; 0x03
     c1e:	bc 83       	std	Y+4, r27	; 0x04
			ADMUX&=ADMUX_MASK;
			ADMUX|=Copy_u8Channel;
			/*START conversion */
			SET_BIT(ADCSRA,ADCSRA_ADSC);
			/*Polling (busy waiting) until the conversion complete flag is set or Counter reaches timeout Value*/
			while(((GET_BIT(ADCSRA,ADCSRA_ADIF))==0)&&(Local_u32Counter!=ADC_U32TIMEOUT))
     c20:	e6 e2       	ldi	r30, 0x26	; 38
     c22:	f0 e0       	ldi	r31, 0x00	; 0
     c24:	80 81       	ld	r24, Z
     c26:	82 95       	swap	r24
     c28:	8f 70       	andi	r24, 0x0F	; 15
     c2a:	88 2f       	mov	r24, r24
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	81 70       	andi	r24, 0x01	; 1
     c30:	90 70       	andi	r25, 0x00	; 0
     c32:	00 97       	sbiw	r24, 0x00	; 0
     c34:	61 f4       	brne	.+24     	; 0xc4e <ADC_u8StartConversionSynch+0xa6>
     c36:	89 81       	ldd	r24, Y+1	; 0x01
     c38:	9a 81       	ldd	r25, Y+2	; 0x02
     c3a:	ab 81       	ldd	r26, Y+3	; 0x03
     c3c:	bc 81       	ldd	r27, Y+4	; 0x04
     c3e:	80 35       	cpi	r24, 0x50	; 80
     c40:	23 ec       	ldi	r18, 0xC3	; 195
     c42:	92 07       	cpc	r25, r18
     c44:	20 e0       	ldi	r18, 0x00	; 0
     c46:	a2 07       	cpc	r26, r18
     c48:	20 e0       	ldi	r18, 0x00	; 0
     c4a:	b2 07       	cpc	r27, r18
     c4c:	f1 f6       	brne	.-68     	; 0xc0a <ADC_u8StartConversionSynch+0x62>
			{
				Local_u32Counter++;
			}
			if(Local_u32Counter==ADC_U32TIMEOUT)
     c4e:	89 81       	ldd	r24, Y+1	; 0x01
     c50:	9a 81       	ldd	r25, Y+2	; 0x02
     c52:	ab 81       	ldd	r26, Y+3	; 0x03
     c54:	bc 81       	ldd	r27, Y+4	; 0x04
     c56:	80 35       	cpi	r24, 0x50	; 80
     c58:	23 ec       	ldi	r18, 0xC3	; 195
     c5a:	92 07       	cpc	r25, r18
     c5c:	20 e0       	ldi	r18, 0x00	; 0
     c5e:	a2 07       	cpc	r26, r18
     c60:	20 e0       	ldi	r18, 0x00	; 0
     c62:	b2 07       	cpc	r27, r18
     c64:	19 f4       	brne	.+6      	; 0xc6c <ADC_u8StartConversionSynch+0xc4>
			{
				// loop is Broken as Time out
				Local_u8ErrorState=NOTOK;
     c66:	81 e0       	ldi	r24, 0x01	; 1
     c68:	8d 83       	std	Y+5, r24	; 0x05
     c6a:	15 c0       	rjmp	.+42     	; 0xc96 <ADC_u8StartConversionSynch+0xee>
			}
			else
			{
				// Raising the conversion complete flag
				/*clear ADC Flag */
				CLR_BIT(ADCSRA,ADCSRA_ADIF);
     c6c:	a6 e2       	ldi	r26, 0x26	; 38
     c6e:	b0 e0       	ldi	r27, 0x00	; 0
     c70:	e6 e2       	ldi	r30, 0x26	; 38
     c72:	f0 e0       	ldi	r31, 0x00	; 0
     c74:	80 81       	ld	r24, Z
     c76:	8f 7e       	andi	r24, 0xEF	; 239
     c78:	8c 93       	st	X, r24
				/* ADC reading from data register */
				if	(ADC_ADJUST_DATA == Right_adjust)
					*Copy_u16ChannelReading= ADC_DATA_REG;
				else if	(ADC_ADJUST_DATA == left_adjust)
					*Copy_u16ChannelReading = ADCH;
     c7a:	e5 e2       	ldi	r30, 0x25	; 37
     c7c:	f0 e0       	ldi	r31, 0x00	; 0
     c7e:	80 81       	ld	r24, Z
     c80:	88 2f       	mov	r24, r24
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	ef 81       	ldd	r30, Y+7	; 0x07
     c86:	f8 85       	ldd	r31, Y+8	; 0x08
     c88:	91 83       	std	Z+1, r25	; 0x01
     c8a:	80 83       	st	Z, r24
				ADC_u8BusyState = IDLE;
     c8c:	10 92 04 01 	sts	0x0104, r1
     c90:	02 c0       	rjmp	.+4      	; 0xc96 <ADC_u8StartConversionSynch+0xee>
		}
		else
			Local_u8ErrorState = NOTOK;
	}
	else {
		Local_u8ErrorState = BUSY_FUNC;
     c92:	83 e0       	ldi	r24, 0x03	; 3
     c94:	8d 83       	std	Y+5, r24	; 0x05
	}
	return Local_u8ErrorState;
     c96:	8d 81       	ldd	r24, Y+5	; 0x05
}
     c98:	28 96       	adiw	r28, 0x08	; 8
     c9a:	0f b6       	in	r0, 0x3f	; 63
     c9c:	f8 94       	cli
     c9e:	de bf       	out	0x3e, r29	; 62
     ca0:	0f be       	out	0x3f, r0	; 63
     ca2:	cd bf       	out	0x3d, r28	; 61
     ca4:	cf 91       	pop	r28
     ca6:	df 91       	pop	r29
     ca8:	08 95       	ret

00000caa <ADC_u8StartConversionAsynch>:


u8 ADC_u8StartConversionAsynch(u8 Copy_u8Channel,u16 *Copy_u16ChannelReading,void (*Copy_vpNotifictionFunc)())
{
     caa:	df 93       	push	r29
     cac:	cf 93       	push	r28
     cae:	00 d0       	rcall	.+0      	; 0xcb0 <ADC_u8StartConversionAsynch+0x6>
     cb0:	00 d0       	rcall	.+0      	; 0xcb2 <ADC_u8StartConversionAsynch+0x8>
     cb2:	00 d0       	rcall	.+0      	; 0xcb4 <ADC_u8StartConversionAsynch+0xa>
     cb4:	cd b7       	in	r28, 0x3d	; 61
     cb6:	de b7       	in	r29, 0x3e	; 62
     cb8:	8a 83       	std	Y+2, r24	; 0x02
     cba:	7c 83       	std	Y+4, r23	; 0x04
     cbc:	6b 83       	std	Y+3, r22	; 0x03
     cbe:	5e 83       	std	Y+6, r21	; 0x06
     cc0:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState=OK;
     cc2:	19 82       	std	Y+1, r1	; 0x01
	if(ADC_u8BusyState==IDLE){
     cc4:	80 91 04 01 	lds	r24, 0x0104
     cc8:	88 23       	and	r24, r24
     cca:	d1 f5       	brne	.+116    	; 0xd40 <ADC_u8StartConversionAsynch+0x96>
		if((Copy_vpNotifictionFunc == NULL)||(Copy_u16ChannelReading == NULL))
     ccc:	8d 81       	ldd	r24, Y+5	; 0x05
     cce:	9e 81       	ldd	r25, Y+6	; 0x06
     cd0:	00 97       	sbiw	r24, 0x00	; 0
     cd2:	21 f0       	breq	.+8      	; 0xcdc <ADC_u8StartConversionAsynch+0x32>
     cd4:	8b 81       	ldd	r24, Y+3	; 0x03
     cd6:	9c 81       	ldd	r25, Y+4	; 0x04
     cd8:	00 97       	sbiw	r24, 0x00	; 0
     cda:	19 f4       	brne	.+6      	; 0xce2 <ADC_u8StartConversionAsynch+0x38>
		{
			Local_u8ErrorState = NULL_POINTER;
     cdc:	82 e0       	ldi	r24, 0x02	; 2
     cde:	89 83       	std	Y+1, r24	; 0x01
     ce0:	31 c0       	rjmp	.+98     	; 0xd44 <ADC_u8StartConversionAsynch+0x9a>
		}
		else {
			ADC_u8SourceOfConv=SINGLE_CHANNEL_ASYNCH;
     ce2:	10 92 0a 01 	sts	0x010A, r1
			ADC_u8BusyState = Busy;
     ce6:	81 e0       	ldi	r24, 0x01	; 1
     ce8:	80 93 04 01 	sts	0x0104, r24
			/*Set Call Back function with the received Notification function*/
			ADC_voidCallBackNotificationFunc = Copy_vpNotifictionFunc;
     cec:	8d 81       	ldd	r24, Y+5	; 0x05
     cee:	9e 81       	ldd	r25, Y+6	; 0x06
     cf0:	90 93 fd 00 	sts	0x00FD, r25
     cf4:	80 93 fc 00 	sts	0x00FC, r24
			/* initialize Local Reading argument with global one  */
			Global_u16GetChannelReading = Copy_u16ChannelReading;
     cf8:	8b 81       	ldd	r24, Y+3	; 0x03
     cfa:	9c 81       	ldd	r25, Y+4	; 0x04
     cfc:	90 93 ff 00 	sts	0x00FF, r25
     d00:	80 93 fe 00 	sts	0x00FE, r24
			/*set the required channel in ADMUX register */
			ADMUX&=ADMUX_MASK;
     d04:	a7 e2       	ldi	r26, 0x27	; 39
     d06:	b0 e0       	ldi	r27, 0x00	; 0
     d08:	e7 e2       	ldi	r30, 0x27	; 39
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	80 81       	ld	r24, Z
     d0e:	80 7e       	andi	r24, 0xE0	; 224
     d10:	8c 93       	st	X, r24
			ADMUX|=Copy_u8Channel;
     d12:	a7 e2       	ldi	r26, 0x27	; 39
     d14:	b0 e0       	ldi	r27, 0x00	; 0
     d16:	e7 e2       	ldi	r30, 0x27	; 39
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	90 81       	ld	r25, Z
     d1c:	8a 81       	ldd	r24, Y+2	; 0x02
     d1e:	89 2b       	or	r24, r25
     d20:	8c 93       	st	X, r24
			SET_BIT(ADCSRA,ADCSRA_ADSC);
     d22:	a6 e2       	ldi	r26, 0x26	; 38
     d24:	b0 e0       	ldi	r27, 0x00	; 0
     d26:	e6 e2       	ldi	r30, 0x26	; 38
     d28:	f0 e0       	ldi	r31, 0x00	; 0
     d2a:	80 81       	ld	r24, Z
     d2c:	80 5c       	subi	r24, 0xC0	; 192
     d2e:	8c 93       	st	X, r24
			SET_BIT(ADCSRA,ADCSRA_ADIE);
     d30:	a6 e2       	ldi	r26, 0x26	; 38
     d32:	b0 e0       	ldi	r27, 0x00	; 0
     d34:	e6 e2       	ldi	r30, 0x26	; 38
     d36:	f0 e0       	ldi	r31, 0x00	; 0
     d38:	80 81       	ld	r24, Z
     d3a:	88 5f       	subi	r24, 0xF8	; 248
     d3c:	8c 93       	st	X, r24
     d3e:	02 c0       	rjmp	.+4      	; 0xd44 <ADC_u8StartConversionAsynch+0x9a>
			}
	}
	else
	{
		Local_u8ErrorState = BUSY_FUNC;
     d40:	83 e0       	ldi	r24, 0x03	; 3
     d42:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
     d44:	89 81       	ldd	r24, Y+1	; 0x01
}
     d46:	26 96       	adiw	r28, 0x06	; 6
     d48:	0f b6       	in	r0, 0x3f	; 63
     d4a:	f8 94       	cli
     d4c:	de bf       	out	0x3e, r29	; 62
     d4e:	0f be       	out	0x3f, r0	; 63
     d50:	cd bf       	out	0x3d, r28	; 61
     d52:	cf 91       	pop	r28
     d54:	df 91       	pop	r29
     d56:	08 95       	ret

00000d58 <ADC_u8StartChainConvertionSynch>:
/*/* chick ADC_u8StartChainConvertionSynch */
u8 ADC_u8StartChainConvertionSynch(Chain_t* Copy_chain)
{
     d58:	df 93       	push	r29
     d5a:	cf 93       	push	r28
     d5c:	00 d0       	rcall	.+0      	; 0xd5e <ADC_u8StartChainConvertionSynch+0x6>
     d5e:	00 d0       	rcall	.+0      	; 0xd60 <ADC_u8StartChainConvertionSynch+0x8>
     d60:	cd b7       	in	r28, 0x3d	; 61
     d62:	de b7       	in	r29, 0x3e	; 62
     d64:	9c 83       	std	Y+4, r25	; 0x04
     d66:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8ErrorState=OK;
     d68:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8Counter;
	if(Copy_chain->Notifiction!=NULL)
     d6a:	eb 81       	ldd	r30, Y+3	; 0x03
     d6c:	fc 81       	ldd	r31, Y+4	; 0x04
     d6e:	85 81       	ldd	r24, Z+5	; 0x05
     d70:	96 81       	ldd	r25, Z+6	; 0x06
     d72:	00 97       	sbiw	r24, 0x00	; 0
     d74:	99 f1       	breq	.+102    	; 0xddc <ADC_u8StartChainConvertionSynch+0x84>
	{
		if(ADC_u8BusyState==IDLE)
     d76:	80 91 04 01 	lds	r24, 0x0104
     d7a:	88 23       	and	r24, r24
     d7c:	61 f5       	brne	.+88     	; 0xdd6 <ADC_u8StartChainConvertionSynch+0x7e>
		{
			for(Local_u8Counter=0;Local_u8Counter<Copy_chain->size;Local_u8Counter++)
     d7e:	19 82       	std	Y+1, r1	; 0x01
     d80:	1d c0       	rjmp	.+58     	; 0xdbc <ADC_u8StartChainConvertionSynch+0x64>
			{
				ADC_u8StartConversionSynch(Copy_chain->ChannelID[Local_u8Counter],(Copy_chain->result+Local_u8Counter));
     d82:	eb 81       	ldd	r30, Y+3	; 0x03
     d84:	fc 81       	ldd	r31, Y+4	; 0x04
     d86:	20 81       	ld	r18, Z
     d88:	31 81       	ldd	r19, Z+1	; 0x01
     d8a:	89 81       	ldd	r24, Y+1	; 0x01
     d8c:	88 2f       	mov	r24, r24
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	f9 01       	movw	r30, r18
     d92:	e8 0f       	add	r30, r24
     d94:	f9 1f       	adc	r31, r25
     d96:	40 81       	ld	r20, Z
     d98:	eb 81       	ldd	r30, Y+3	; 0x03
     d9a:	fc 81       	ldd	r31, Y+4	; 0x04
     d9c:	23 81       	ldd	r18, Z+3	; 0x03
     d9e:	34 81       	ldd	r19, Z+4	; 0x04
     da0:	89 81       	ldd	r24, Y+1	; 0x01
     da2:	88 2f       	mov	r24, r24
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	88 0f       	add	r24, r24
     da8:	99 1f       	adc	r25, r25
     daa:	28 0f       	add	r18, r24
     dac:	39 1f       	adc	r19, r25
     dae:	84 2f       	mov	r24, r20
     db0:	b9 01       	movw	r22, r18
     db2:	0e 94 d4 05 	call	0xba8	; 0xba8 <ADC_u8StartConversionSynch>
	u8 Local_u8Counter;
	if(Copy_chain->Notifiction!=NULL)
	{
		if(ADC_u8BusyState==IDLE)
		{
			for(Local_u8Counter=0;Local_u8Counter<Copy_chain->size;Local_u8Counter++)
     db6:	89 81       	ldd	r24, Y+1	; 0x01
     db8:	8f 5f       	subi	r24, 0xFF	; 255
     dba:	89 83       	std	Y+1, r24	; 0x01
     dbc:	eb 81       	ldd	r30, Y+3	; 0x03
     dbe:	fc 81       	ldd	r31, Y+4	; 0x04
     dc0:	92 81       	ldd	r25, Z+2	; 0x02
     dc2:	89 81       	ldd	r24, Y+1	; 0x01
     dc4:	89 17       	cp	r24, r25
     dc6:	e8 f2       	brcs	.-70     	; 0xd82 <ADC_u8StartChainConvertionSynch+0x2a>
			{
				ADC_u8StartConversionSynch(Copy_chain->ChannelID[Local_u8Counter],(Copy_chain->result+Local_u8Counter));
			}
			Copy_chain->Notifiction();
     dc8:	eb 81       	ldd	r30, Y+3	; 0x03
     dca:	fc 81       	ldd	r31, Y+4	; 0x04
     dcc:	05 80       	ldd	r0, Z+5	; 0x05
     dce:	f6 81       	ldd	r31, Z+6	; 0x06
     dd0:	e0 2d       	mov	r30, r0
     dd2:	09 95       	icall
     dd4:	05 c0       	rjmp	.+10     	; 0xde0 <ADC_u8StartChainConvertionSynch+0x88>
		}
		else
			Local_u8ErrorState=BUSY_FUNC;
     dd6:	83 e0       	ldi	r24, 0x03	; 3
     dd8:	8a 83       	std	Y+2, r24	; 0x02
     dda:	02 c0       	rjmp	.+4      	; 0xde0 <ADC_u8StartChainConvertionSynch+0x88>
	}
	else
		Local_u8ErrorState=NULL_POINTER;
     ddc:	82 e0       	ldi	r24, 0x02	; 2
     dde:	8a 83       	std	Y+2, r24	; 0x02
	return  Local_u8ErrorState;
     de0:	8a 81       	ldd	r24, Y+2	; 0x02
}
     de2:	0f 90       	pop	r0
     de4:	0f 90       	pop	r0
     de6:	0f 90       	pop	r0
     de8:	0f 90       	pop	r0
     dea:	cf 91       	pop	r28
     dec:	df 91       	pop	r29
     dee:	08 95       	ret

00000df0 <ADC_u8StartChainConvertionAsynch>:
u8 ADC_u8StartChainConvertionAsynch(Chain_t* Copy_chain)
{
     df0:	df 93       	push	r29
     df2:	cf 93       	push	r28
     df4:	00 d0       	rcall	.+0      	; 0xdf6 <ADC_u8StartChainConvertionAsynch+0x6>
     df6:	0f 92       	push	r0
     df8:	cd b7       	in	r28, 0x3d	; 61
     dfa:	de b7       	in	r29, 0x3e	; 62
     dfc:	9b 83       	std	Y+3, r25	; 0x03
     dfe:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
     e00:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_chain->Notifiction!=NULL)
     e02:	ea 81       	ldd	r30, Y+2	; 0x02
     e04:	fb 81       	ldd	r31, Y+3	; 0x03
     e06:	85 81       	ldd	r24, Z+5	; 0x05
     e08:	96 81       	ldd	r25, Z+6	; 0x06
     e0a:	00 97       	sbiw	r24, 0x00	; 0
     e0c:	09 f4       	brne	.+2      	; 0xe10 <ADC_u8StartChainConvertionAsynch+0x20>
     e0e:	56 c0       	rjmp	.+172    	; 0xebc <ADC_u8StartChainConvertionAsynch+0xcc>
	{
		if(ADC_u8BusyState==IDLE)
     e10:	80 91 04 01 	lds	r24, 0x0104
     e14:	88 23       	and	r24, r24
     e16:	09 f0       	breq	.+2      	; 0xe1a <ADC_u8StartChainConvertionAsynch+0x2a>
     e18:	4e c0       	rjmp	.+156    	; 0xeb6 <ADC_u8StartChainConvertionAsynch+0xc6>
		{
			/*make source of conversion CHAIN_CHANNEL_ASYNCH*/
			ADC_u8SourceOfConv=CHAIN_CHANNEL_ASYNCH;
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	80 93 0a 01 	sts	0x010A, r24
			ADC_u8BusyState=Busy;
     e20:	81 e0       	ldi	r24, 0x01	; 1
     e22:	80 93 04 01 	sts	0x0104, r24
			/*Set Call Back function with the received Notification function*/
			ADC_voidCallBackNotificationFunc = Copy_chain->Notifiction;
     e26:	ea 81       	ldd	r30, Y+2	; 0x02
     e28:	fb 81       	ldd	r31, Y+3	; 0x03
     e2a:	85 81       	ldd	r24, Z+5	; 0x05
     e2c:	96 81       	ldd	r25, Z+6	; 0x06
     e2e:	90 93 fd 00 	sts	0x00FD, r25
     e32:	80 93 fc 00 	sts	0x00FC, r24
			/* initialize Local channel argument with global one  */
			Global_pu8ChainChannelArr = Copy_chain->ChannelID;
     e36:	ea 81       	ldd	r30, Y+2	; 0x02
     e38:	fb 81       	ldd	r31, Y+3	; 0x03
     e3a:	80 81       	ld	r24, Z
     e3c:	91 81       	ldd	r25, Z+1	; 0x01
     e3e:	90 93 01 01 	sts	0x0101, r25
     e42:	80 93 00 01 	sts	0x0100, r24
			/* initialize Local chain size argument with global one  */
			Global_pu8ChainSize = Copy_chain->size;
     e46:	ea 81       	ldd	r30, Y+2	; 0x02
     e48:	fb 81       	ldd	r31, Y+3	; 0x03
     e4a:	82 81       	ldd	r24, Z+2	; 0x02
     e4c:	80 93 02 01 	sts	0x0102, r24
			/* initialize Local chain index with global one  */
			Global_u8ChannelIdx = 0;
     e50:	10 92 03 01 	sts	0x0103, r1
			/* initialize Local chain result with global one  */
			Global_u16GetChannelReading=Copy_chain->result;
     e54:	ea 81       	ldd	r30, Y+2	; 0x02
     e56:	fb 81       	ldd	r31, Y+3	; 0x03
     e58:	83 81       	ldd	r24, Z+3	; 0x03
     e5a:	94 81       	ldd	r25, Z+4	; 0x04
     e5c:	90 93 ff 00 	sts	0x00FF, r25
     e60:	80 93 fe 00 	sts	0x00FE, r24

			ADMUX&=ADMUX_MASK;
     e64:	a7 e2       	ldi	r26, 0x27	; 39
     e66:	b0 e0       	ldi	r27, 0x00	; 0
     e68:	e7 e2       	ldi	r30, 0x27	; 39
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	80 7e       	andi	r24, 0xE0	; 224
     e70:	8c 93       	st	X, r24
			ADMUX|=Copy_chain->ChannelID[Global_u8ChannelIdx];
     e72:	a7 e2       	ldi	r26, 0x27	; 39
     e74:	b0 e0       	ldi	r27, 0x00	; 0
     e76:	e7 e2       	ldi	r30, 0x27	; 39
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	40 81       	ld	r20, Z
     e7c:	ea 81       	ldd	r30, Y+2	; 0x02
     e7e:	fb 81       	ldd	r31, Y+3	; 0x03
     e80:	20 81       	ld	r18, Z
     e82:	31 81       	ldd	r19, Z+1	; 0x01
     e84:	80 91 03 01 	lds	r24, 0x0103
     e88:	88 2f       	mov	r24, r24
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	f9 01       	movw	r30, r18
     e8e:	e8 0f       	add	r30, r24
     e90:	f9 1f       	adc	r31, r25
     e92:	80 81       	ld	r24, Z
     e94:	84 2b       	or	r24, r20
     e96:	8c 93       	st	X, r24
			SET_BIT(ADCSRA,ADCSRA_ADSC);
     e98:	a6 e2       	ldi	r26, 0x26	; 38
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	e6 e2       	ldi	r30, 0x26	; 38
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	80 5c       	subi	r24, 0xC0	; 192
     ea4:	8c 93       	st	X, r24
			SET_BIT(ADCSRA,ADCSRA_ADIE);
     ea6:	a6 e2       	ldi	r26, 0x26	; 38
     ea8:	b0 e0       	ldi	r27, 0x00	; 0
     eaa:	e6 e2       	ldi	r30, 0x26	; 38
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 81       	ld	r24, Z
     eb0:	88 5f       	subi	r24, 0xF8	; 248
     eb2:	8c 93       	st	X, r24
     eb4:	05 c0       	rjmp	.+10     	; 0xec0 <ADC_u8StartChainConvertionAsynch+0xd0>
		}
		else
			Local_u8ErrorState=BUSY_FUNC;
     eb6:	83 e0       	ldi	r24, 0x03	; 3
     eb8:	89 83       	std	Y+1, r24	; 0x01
     eba:	02 c0       	rjmp	.+4      	; 0xec0 <ADC_u8StartChainConvertionAsynch+0xd0>
	}
	else
		Local_u8ErrorState=NULL_POINTER;
     ebc:	82 e0       	ldi	r24, 0x02	; 2
     ebe:	89 83       	std	Y+1, r24	; 0x01

	return  Local_u8ErrorState;
     ec0:	89 81       	ldd	r24, Y+1	; 0x01
}
     ec2:	0f 90       	pop	r0
     ec4:	0f 90       	pop	r0
     ec6:	0f 90       	pop	r0
     ec8:	cf 91       	pop	r28
     eca:	df 91       	pop	r29
     ecc:	08 95       	ret

00000ece <__vector_16>:

void __vector_16 (void)	__attribute__((signal));
void __vector_16 (void)
{
     ece:	1f 92       	push	r1
     ed0:	0f 92       	push	r0
     ed2:	0f b6       	in	r0, 0x3f	; 63
     ed4:	0f 92       	push	r0
     ed6:	11 24       	eor	r1, r1
     ed8:	2f 93       	push	r18
     eda:	3f 93       	push	r19
     edc:	4f 93       	push	r20
     ede:	5f 93       	push	r21
     ee0:	6f 93       	push	r22
     ee2:	7f 93       	push	r23
     ee4:	8f 93       	push	r24
     ee6:	9f 93       	push	r25
     ee8:	af 93       	push	r26
     eea:	bf 93       	push	r27
     eec:	ef 93       	push	r30
     eee:	ff 93       	push	r31
     ef0:	df 93       	push	r29
     ef2:	cf 93       	push	r28
     ef4:	cd b7       	in	r28, 0x3d	; 61
     ef6:	de b7       	in	r29, 0x3e	; 62
	if(ADC_u8SourceOfConv==0){
     ef8:	80 91 0a 01 	lds	r24, 0x010A
     efc:	88 23       	and	r24, r24
     efe:	d1 f4       	brne	.+52     	; 0xf34 <__vector_16+0x66>
		/* ADC reading from data register */
		if	(ADC_ADJUST_DATA == Right_adjust)
			*Global_u16GetChannelReading = ADC_DATA_REG;
		else if	(ADC_ADJUST_DATA == left_adjust)
			*Global_u16GetChannelReading = ADCH;
     f00:	a0 91 fe 00 	lds	r26, 0x00FE
     f04:	b0 91 ff 00 	lds	r27, 0x00FF
     f08:	e5 e2       	ldi	r30, 0x25	; 37
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	80 81       	ld	r24, Z
     f0e:	88 2f       	mov	r24, r24
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	8d 93       	st	X+, r24
     f14:	9c 93       	st	X, r25
		/* ADC basy state IDLE as Conversion is finished*/
		ADC_u8BusyState = IDLE;
     f16:	10 92 04 01 	sts	0x0104, r1
		/* call Notification function */
		ADC_voidCallBackNotificationFunc();
     f1a:	e0 91 fc 00 	lds	r30, 0x00FC
     f1e:	f0 91 fd 00 	lds	r31, 0x00FD
     f22:	09 95       	icall
		/* Disable ADC Interrupt Enable */
		CLR_BIT(ADCSRA,ADCSRA_ADIE);
     f24:	a6 e2       	ldi	r26, 0x26	; 38
     f26:	b0 e0       	ldi	r27, 0x00	; 0
     f28:	e6 e2       	ldi	r30, 0x26	; 38
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	80 81       	ld	r24, Z
     f2e:	87 7f       	andi	r24, 0xF7	; 247
     f30:	8c 93       	st	X, r24
     f32:	55 c0       	rjmp	.+170    	; 0xfde <__vector_16+0x110>
	}
	else if(ADC_u8SourceOfConv==1){
     f34:	80 91 0a 01 	lds	r24, 0x010A
     f38:	81 30       	cpi	r24, 0x01	; 1
     f3a:	09 f0       	breq	.+2      	; 0xf3e <__vector_16+0x70>
     f3c:	50 c0       	rjmp	.+160    	; 0xfde <__vector_16+0x110>
		if	(ADC_ADJUST_DATA == Right_adjust)
			Global_u16GetChannelReading[Global_u8ChannelIdx] = ADC_DATA_REG;
		else if	(ADC_ADJUST_DATA == left_adjust)
			Global_u16GetChannelReading[Global_u8ChannelIdx] = ADCH;
     f3e:	20 91 fe 00 	lds	r18, 0x00FE
     f42:	30 91 ff 00 	lds	r19, 0x00FF
     f46:	80 91 03 01 	lds	r24, 0x0103
     f4a:	88 2f       	mov	r24, r24
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	88 0f       	add	r24, r24
     f50:	99 1f       	adc	r25, r25
     f52:	d9 01       	movw	r26, r18
     f54:	a8 0f       	add	r26, r24
     f56:	b9 1f       	adc	r27, r25
     f58:	e5 e2       	ldi	r30, 0x25	; 37
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	88 2f       	mov	r24, r24
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	11 96       	adiw	r26, 0x01	; 1
     f64:	9c 93       	st	X, r25
     f66:	8e 93       	st	-X, r24
		Global_u8ChannelIdx++;
     f68:	80 91 03 01 	lds	r24, 0x0103
     f6c:	8f 5f       	subi	r24, 0xFF	; 255
     f6e:	80 93 03 01 	sts	0x0103, r24
		if(Global_u8ChannelIdx==Global_pu8ChainSize)
     f72:	90 91 03 01 	lds	r25, 0x0103
     f76:	80 91 02 01 	lds	r24, 0x0102
     f7a:	98 17       	cp	r25, r24
     f7c:	79 f4       	brne	.+30     	; 0xf9c <__vector_16+0xce>
		{
			/* ADC basy state IDLE as Conversion is finished*/
			ADC_u8BusyState = IDLE;
     f7e:	10 92 04 01 	sts	0x0104, r1
			/* call Notification function */
			ADC_voidCallBackNotificationFunc();
     f82:	e0 91 fc 00 	lds	r30, 0x00FC
     f86:	f0 91 fd 00 	lds	r31, 0x00FD
     f8a:	09 95       	icall
			/* Disable ADC Interrupt Enable */
			CLR_BIT(ADCSRA,ADCSRA_ADIE);
     f8c:	a6 e2       	ldi	r26, 0x26	; 38
     f8e:	b0 e0       	ldi	r27, 0x00	; 0
     f90:	e6 e2       	ldi	r30, 0x26	; 38
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	87 7f       	andi	r24, 0xF7	; 247
     f98:	8c 93       	st	X, r24
     f9a:	21 c0       	rjmp	.+66     	; 0xfde <__vector_16+0x110>
		}
		else
		{
			ADMUX&=ADMUX_MASK;
     f9c:	a7 e2       	ldi	r26, 0x27	; 39
     f9e:	b0 e0       	ldi	r27, 0x00	; 0
     fa0:	e7 e2       	ldi	r30, 0x27	; 39
     fa2:	f0 e0       	ldi	r31, 0x00	; 0
     fa4:	80 81       	ld	r24, Z
     fa6:	80 7e       	andi	r24, 0xE0	; 224
     fa8:	8c 93       	st	X, r24
			ADMUX|=Global_pu8ChainChannelArr[Global_u8ChannelIdx];
     faa:	a7 e2       	ldi	r26, 0x27	; 39
     fac:	b0 e0       	ldi	r27, 0x00	; 0
     fae:	e7 e2       	ldi	r30, 0x27	; 39
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	40 81       	ld	r20, Z
     fb4:	20 91 00 01 	lds	r18, 0x0100
     fb8:	30 91 01 01 	lds	r19, 0x0101
     fbc:	80 91 03 01 	lds	r24, 0x0103
     fc0:	88 2f       	mov	r24, r24
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	f9 01       	movw	r30, r18
     fc6:	e8 0f       	add	r30, r24
     fc8:	f9 1f       	adc	r31, r25
     fca:	80 81       	ld	r24, Z
     fcc:	84 2b       	or	r24, r20
     fce:	8c 93       	st	X, r24
			SET_BIT(ADCSRA,ADCSRA_ADSC);
     fd0:	a6 e2       	ldi	r26, 0x26	; 38
     fd2:	b0 e0       	ldi	r27, 0x00	; 0
     fd4:	e6 e2       	ldi	r30, 0x26	; 38
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z
     fda:	80 5c       	subi	r24, 0xC0	; 192
     fdc:	8c 93       	st	X, r24
		}
	}
}
     fde:	cf 91       	pop	r28
     fe0:	df 91       	pop	r29
     fe2:	ff 91       	pop	r31
     fe4:	ef 91       	pop	r30
     fe6:	bf 91       	pop	r27
     fe8:	af 91       	pop	r26
     fea:	9f 91       	pop	r25
     fec:	8f 91       	pop	r24
     fee:	7f 91       	pop	r23
     ff0:	6f 91       	pop	r22
     ff2:	5f 91       	pop	r21
     ff4:	4f 91       	pop	r20
     ff6:	3f 91       	pop	r19
     ff8:	2f 91       	pop	r18
     ffa:	0f 90       	pop	r0
     ffc:	0f be       	out	0x3f, r0	; 63
     ffe:	0f 90       	pop	r0
    1000:	1f 90       	pop	r1
    1002:	18 95       	reti

00001004 <CLCD_voidSendCommand>:
#include "CLCD_interface.h"
#include "CLCD_private.h"

static u8 iniIsFinich=0;
void CLCD_voidSendCommand(u8 Copy_u8Command)//math
{
    1004:	df 93       	push	r29
    1006:	cf 93       	push	r28
    1008:	cd b7       	in	r28, 0x3d	; 61
    100a:	de b7       	in	r29, 0x3e	; 62
    100c:	ac 97       	sbiw	r28, 0x2c	; 44
    100e:	0f b6       	in	r0, 0x3f	; 63
    1010:	f8 94       	cli
    1012:	de bf       	out	0x3e, r29	; 62
    1014:	0f be       	out	0x3f, r0	; 63
    1016:	cd bf       	out	0x3d, r28	; 61
    1018:	8c a7       	std	Y+44, r24	; 0x2c
	/*PIN SET  send pulse (E) */
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_PIN_HIGH);
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_PIN_LOW);
#elif CLCD_CHIOCE_MODE==_4_BIT_MODE
	u8 Local_u8Mask = 0b11110000;
    101a:	80 ef       	ldi	r24, 0xF0	; 240
    101c:	8b a7       	std	Y+43, r24	; 0x2b
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RS_PIN, DIO_PIN_LOW);
    101e:	81 e0       	ldi	r24, 0x01	; 1
    1020:	60 e0       	ldi	r22, 0x00	; 0
    1022:	40 e0       	ldi	r20, 0x00	; 0
    1024:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_u8SetPinValue>
	/*PIN RW SET LOW  */
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RW_PIN, DIO_PIN_LOW);
    1028:	81 e0       	ldi	r24, 0x01	; 1
    102a:	61 e0       	ldi	r22, 0x01	; 1
    102c:	40 e0       	ldi	r20, 0x00	; 0
    102e:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_u8SetPinValue>
	/*PORT SET COMMAND*/
	Local_u8Mask &= Copy_u8Command;
    1032:	9b a5       	ldd	r25, Y+43	; 0x2b
    1034:	8c a5       	ldd	r24, Y+44	; 0x2c
    1036:	89 23       	and	r24, r25
    1038:	8b a7       	std	Y+43, r24	; 0x2b
	DIO_u8SetPortValue(CLCD_DATA_PORT, Local_u8Mask);
    103a:	80 e0       	ldi	r24, 0x00	; 0
    103c:	6b a5       	ldd	r22, Y+43	; 0x2b
    103e:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <DIO_u8SetPortValue>
	/*PIN SET  send pulse (E) */
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_PIN_HIGH);
    1042:	81 e0       	ldi	r24, 0x01	; 1
    1044:	62 e0       	ldi	r22, 0x02	; 2
    1046:	41 e0       	ldi	r20, 0x01	; 1
    1048:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_u8SetPinValue>
    104c:	80 e0       	ldi	r24, 0x00	; 0
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	a0 e0       	ldi	r26, 0x00	; 0
    1052:	b0 e4       	ldi	r27, 0x40	; 64
    1054:	8f a3       	std	Y+39, r24	; 0x27
    1056:	98 a7       	std	Y+40, r25	; 0x28
    1058:	a9 a7       	std	Y+41, r26	; 0x29
    105a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    105c:	6f a1       	ldd	r22, Y+39	; 0x27
    105e:	78 a5       	ldd	r23, Y+40	; 0x28
    1060:	89 a5       	ldd	r24, Y+41	; 0x29
    1062:	9a a5       	ldd	r25, Y+42	; 0x2a
    1064:	20 e0       	ldi	r18, 0x00	; 0
    1066:	30 e0       	ldi	r19, 0x00	; 0
    1068:	4a ef       	ldi	r20, 0xFA	; 250
    106a:	54 e4       	ldi	r21, 0x44	; 68
    106c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1070:	dc 01       	movw	r26, r24
    1072:	cb 01       	movw	r24, r22
    1074:	8b a3       	std	Y+35, r24	; 0x23
    1076:	9c a3       	std	Y+36, r25	; 0x24
    1078:	ad a3       	std	Y+37, r26	; 0x25
    107a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    107c:	6b a1       	ldd	r22, Y+35	; 0x23
    107e:	7c a1       	ldd	r23, Y+36	; 0x24
    1080:	8d a1       	ldd	r24, Y+37	; 0x25
    1082:	9e a1       	ldd	r25, Y+38	; 0x26
    1084:	20 e0       	ldi	r18, 0x00	; 0
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	40 e8       	ldi	r20, 0x80	; 128
    108a:	5f e3       	ldi	r21, 0x3F	; 63
    108c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1090:	88 23       	and	r24, r24
    1092:	2c f4       	brge	.+10     	; 0x109e <CLCD_voidSendCommand+0x9a>
		__ticks = 1;
    1094:	81 e0       	ldi	r24, 0x01	; 1
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	9a a3       	std	Y+34, r25	; 0x22
    109a:	89 a3       	std	Y+33, r24	; 0x21
    109c:	3f c0       	rjmp	.+126    	; 0x111c <CLCD_voidSendCommand+0x118>
	else if (__tmp > 65535)
    109e:	6b a1       	ldd	r22, Y+35	; 0x23
    10a0:	7c a1       	ldd	r23, Y+36	; 0x24
    10a2:	8d a1       	ldd	r24, Y+37	; 0x25
    10a4:	9e a1       	ldd	r25, Y+38	; 0x26
    10a6:	20 e0       	ldi	r18, 0x00	; 0
    10a8:	3f ef       	ldi	r19, 0xFF	; 255
    10aa:	4f e7       	ldi	r20, 0x7F	; 127
    10ac:	57 e4       	ldi	r21, 0x47	; 71
    10ae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10b2:	18 16       	cp	r1, r24
    10b4:	4c f5       	brge	.+82     	; 0x1108 <CLCD_voidSendCommand+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10b6:	6f a1       	ldd	r22, Y+39	; 0x27
    10b8:	78 a5       	ldd	r23, Y+40	; 0x28
    10ba:	89 a5       	ldd	r24, Y+41	; 0x29
    10bc:	9a a5       	ldd	r25, Y+42	; 0x2a
    10be:	20 e0       	ldi	r18, 0x00	; 0
    10c0:	30 e0       	ldi	r19, 0x00	; 0
    10c2:	40 e2       	ldi	r20, 0x20	; 32
    10c4:	51 e4       	ldi	r21, 0x41	; 65
    10c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10ca:	dc 01       	movw	r26, r24
    10cc:	cb 01       	movw	r24, r22
    10ce:	bc 01       	movw	r22, r24
    10d0:	cd 01       	movw	r24, r26
    10d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10d6:	dc 01       	movw	r26, r24
    10d8:	cb 01       	movw	r24, r22
    10da:	9a a3       	std	Y+34, r25	; 0x22
    10dc:	89 a3       	std	Y+33, r24	; 0x21
    10de:	0f c0       	rjmp	.+30     	; 0x10fe <CLCD_voidSendCommand+0xfa>
    10e0:	88 ec       	ldi	r24, 0xC8	; 200
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	98 a3       	std	Y+32, r25	; 0x20
    10e6:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    10e8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    10ea:	98 a1       	ldd	r25, Y+32	; 0x20
    10ec:	01 97       	sbiw	r24, 0x01	; 1
    10ee:	f1 f7       	brne	.-4      	; 0x10ec <CLCD_voidSendCommand+0xe8>
    10f0:	98 a3       	std	Y+32, r25	; 0x20
    10f2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10f4:	89 a1       	ldd	r24, Y+33	; 0x21
    10f6:	9a a1       	ldd	r25, Y+34	; 0x22
    10f8:	01 97       	sbiw	r24, 0x01	; 1
    10fa:	9a a3       	std	Y+34, r25	; 0x22
    10fc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10fe:	89 a1       	ldd	r24, Y+33	; 0x21
    1100:	9a a1       	ldd	r25, Y+34	; 0x22
    1102:	00 97       	sbiw	r24, 0x00	; 0
    1104:	69 f7       	brne	.-38     	; 0x10e0 <CLCD_voidSendCommand+0xdc>
    1106:	14 c0       	rjmp	.+40     	; 0x1130 <CLCD_voidSendCommand+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1108:	6b a1       	ldd	r22, Y+35	; 0x23
    110a:	7c a1       	ldd	r23, Y+36	; 0x24
    110c:	8d a1       	ldd	r24, Y+37	; 0x25
    110e:	9e a1       	ldd	r25, Y+38	; 0x26
    1110:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1114:	dc 01       	movw	r26, r24
    1116:	cb 01       	movw	r24, r22
    1118:	9a a3       	std	Y+34, r25	; 0x22
    111a:	89 a3       	std	Y+33, r24	; 0x21
    111c:	89 a1       	ldd	r24, Y+33	; 0x21
    111e:	9a a1       	ldd	r25, Y+34	; 0x22
    1120:	9e 8f       	std	Y+30, r25	; 0x1e
    1122:	8d 8f       	std	Y+29, r24	; 0x1d
    1124:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1126:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1128:	01 97       	sbiw	r24, 0x01	; 1
    112a:	f1 f7       	brne	.-4      	; 0x1128 <CLCD_voidSendCommand+0x124>
    112c:	9e 8f       	std	Y+30, r25	; 0x1e
    112e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_PIN_LOW);
    1130:	81 e0       	ldi	r24, 0x01	; 1
    1132:	62 e0       	ldi	r22, 0x02	; 2
    1134:	40 e0       	ldi	r20, 0x00	; 0
    1136:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_u8SetPinValue>
	if(iniIsFinich)
    113a:	80 91 05 01 	lds	r24, 0x0105
    113e:	88 23       	and	r24, r24
    1140:	09 f4       	brne	.+2      	; 0x1144 <CLCD_voidSendCommand+0x140>
    1142:	8c c0       	rjmp	.+280    	; 0x125c <CLCD_voidSendCommand+0x258>
	{
		Local_u8Mask = 0b11110000;
    1144:	80 ef       	ldi	r24, 0xF0	; 240
    1146:	8b a7       	std	Y+43, r24	; 0x2b
		Local_u8Mask = ~(Local_u8Mask) & Copy_u8Command;
    1148:	8b a5       	ldd	r24, Y+43	; 0x2b
    114a:	98 2f       	mov	r25, r24
    114c:	90 95       	com	r25
    114e:	8c a5       	ldd	r24, Y+44	; 0x2c
    1150:	89 23       	and	r24, r25
    1152:	8b a7       	std	Y+43, r24	; 0x2b
		DIO_u8SetPortValue(CLCD_DATA_PORT, (Local_u8Mask << 4));
    1154:	8b a5       	ldd	r24, Y+43	; 0x2b
    1156:	98 2f       	mov	r25, r24
    1158:	92 95       	swap	r25
    115a:	90 7f       	andi	r25, 0xF0	; 240
    115c:	80 e0       	ldi	r24, 0x00	; 0
    115e:	69 2f       	mov	r22, r25
    1160:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <DIO_u8SetPortValue>
		DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_PIN_HIGH);
    1164:	81 e0       	ldi	r24, 0x01	; 1
    1166:	62 e0       	ldi	r22, 0x02	; 2
    1168:	41 e0       	ldi	r20, 0x01	; 1
    116a:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_u8SetPinValue>
    116e:	80 e0       	ldi	r24, 0x00	; 0
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	a0 e0       	ldi	r26, 0x00	; 0
    1174:	b0 e4       	ldi	r27, 0x40	; 64
    1176:	89 8f       	std	Y+25, r24	; 0x19
    1178:	9a 8f       	std	Y+26, r25	; 0x1a
    117a:	ab 8f       	std	Y+27, r26	; 0x1b
    117c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    117e:	69 8d       	ldd	r22, Y+25	; 0x19
    1180:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1182:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1184:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1186:	20 e0       	ldi	r18, 0x00	; 0
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	4a ef       	ldi	r20, 0xFA	; 250
    118c:	54 e4       	ldi	r21, 0x44	; 68
    118e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1192:	dc 01       	movw	r26, r24
    1194:	cb 01       	movw	r24, r22
    1196:	8d 8b       	std	Y+21, r24	; 0x15
    1198:	9e 8b       	std	Y+22, r25	; 0x16
    119a:	af 8b       	std	Y+23, r26	; 0x17
    119c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    119e:	6d 89       	ldd	r22, Y+21	; 0x15
    11a0:	7e 89       	ldd	r23, Y+22	; 0x16
    11a2:	8f 89       	ldd	r24, Y+23	; 0x17
    11a4:	98 8d       	ldd	r25, Y+24	; 0x18
    11a6:	20 e0       	ldi	r18, 0x00	; 0
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	40 e8       	ldi	r20, 0x80	; 128
    11ac:	5f e3       	ldi	r21, 0x3F	; 63
    11ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11b2:	88 23       	and	r24, r24
    11b4:	2c f4       	brge	.+10     	; 0x11c0 <CLCD_voidSendCommand+0x1bc>
		__ticks = 1;
    11b6:	81 e0       	ldi	r24, 0x01	; 1
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	9c 8b       	std	Y+20, r25	; 0x14
    11bc:	8b 8b       	std	Y+19, r24	; 0x13
    11be:	3f c0       	rjmp	.+126    	; 0x123e <CLCD_voidSendCommand+0x23a>
	else if (__tmp > 65535)
    11c0:	6d 89       	ldd	r22, Y+21	; 0x15
    11c2:	7e 89       	ldd	r23, Y+22	; 0x16
    11c4:	8f 89       	ldd	r24, Y+23	; 0x17
    11c6:	98 8d       	ldd	r25, Y+24	; 0x18
    11c8:	20 e0       	ldi	r18, 0x00	; 0
    11ca:	3f ef       	ldi	r19, 0xFF	; 255
    11cc:	4f e7       	ldi	r20, 0x7F	; 127
    11ce:	57 e4       	ldi	r21, 0x47	; 71
    11d0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11d4:	18 16       	cp	r1, r24
    11d6:	4c f5       	brge	.+82     	; 0x122a <CLCD_voidSendCommand+0x226>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11d8:	69 8d       	ldd	r22, Y+25	; 0x19
    11da:	7a 8d       	ldd	r23, Y+26	; 0x1a
    11dc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11de:	9c 8d       	ldd	r25, Y+28	; 0x1c
    11e0:	20 e0       	ldi	r18, 0x00	; 0
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	40 e2       	ldi	r20, 0x20	; 32
    11e6:	51 e4       	ldi	r21, 0x41	; 65
    11e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11ec:	dc 01       	movw	r26, r24
    11ee:	cb 01       	movw	r24, r22
    11f0:	bc 01       	movw	r22, r24
    11f2:	cd 01       	movw	r24, r26
    11f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11f8:	dc 01       	movw	r26, r24
    11fa:	cb 01       	movw	r24, r22
    11fc:	9c 8b       	std	Y+20, r25	; 0x14
    11fe:	8b 8b       	std	Y+19, r24	; 0x13
    1200:	0f c0       	rjmp	.+30     	; 0x1220 <CLCD_voidSendCommand+0x21c>
    1202:	88 ec       	ldi	r24, 0xC8	; 200
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	9a 8b       	std	Y+18, r25	; 0x12
    1208:	89 8b       	std	Y+17, r24	; 0x11
    120a:	89 89       	ldd	r24, Y+17	; 0x11
    120c:	9a 89       	ldd	r25, Y+18	; 0x12
    120e:	01 97       	sbiw	r24, 0x01	; 1
    1210:	f1 f7       	brne	.-4      	; 0x120e <CLCD_voidSendCommand+0x20a>
    1212:	9a 8b       	std	Y+18, r25	; 0x12
    1214:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1216:	8b 89       	ldd	r24, Y+19	; 0x13
    1218:	9c 89       	ldd	r25, Y+20	; 0x14
    121a:	01 97       	sbiw	r24, 0x01	; 1
    121c:	9c 8b       	std	Y+20, r25	; 0x14
    121e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1220:	8b 89       	ldd	r24, Y+19	; 0x13
    1222:	9c 89       	ldd	r25, Y+20	; 0x14
    1224:	00 97       	sbiw	r24, 0x00	; 0
    1226:	69 f7       	brne	.-38     	; 0x1202 <CLCD_voidSendCommand+0x1fe>
    1228:	14 c0       	rjmp	.+40     	; 0x1252 <CLCD_voidSendCommand+0x24e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    122a:	6d 89       	ldd	r22, Y+21	; 0x15
    122c:	7e 89       	ldd	r23, Y+22	; 0x16
    122e:	8f 89       	ldd	r24, Y+23	; 0x17
    1230:	98 8d       	ldd	r25, Y+24	; 0x18
    1232:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1236:	dc 01       	movw	r26, r24
    1238:	cb 01       	movw	r24, r22
    123a:	9c 8b       	std	Y+20, r25	; 0x14
    123c:	8b 8b       	std	Y+19, r24	; 0x13
    123e:	8b 89       	ldd	r24, Y+19	; 0x13
    1240:	9c 89       	ldd	r25, Y+20	; 0x14
    1242:	98 8b       	std	Y+16, r25	; 0x10
    1244:	8f 87       	std	Y+15, r24	; 0x0f
    1246:	8f 85       	ldd	r24, Y+15	; 0x0f
    1248:	98 89       	ldd	r25, Y+16	; 0x10
    124a:	01 97       	sbiw	r24, 0x01	; 1
    124c:	f1 f7       	brne	.-4      	; 0x124a <CLCD_voidSendCommand+0x246>
    124e:	98 8b       	std	Y+16, r25	; 0x10
    1250:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(2);
		DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_PIN_LOW);
    1252:	81 e0       	ldi	r24, 0x01	; 1
    1254:	62 e0       	ldi	r22, 0x02	; 2
    1256:	40 e0       	ldi	r20, 0x00	; 0
    1258:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_u8SetPinValue>
    125c:	80 e0       	ldi	r24, 0x00	; 0
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	a0 e0       	ldi	r26, 0x00	; 0
    1262:	b0 e4       	ldi	r27, 0x40	; 64
    1264:	8b 87       	std	Y+11, r24	; 0x0b
    1266:	9c 87       	std	Y+12, r25	; 0x0c
    1268:	ad 87       	std	Y+13, r26	; 0x0d
    126a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    126c:	6b 85       	ldd	r22, Y+11	; 0x0b
    126e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1270:	8d 85       	ldd	r24, Y+13	; 0x0d
    1272:	9e 85       	ldd	r25, Y+14	; 0x0e
    1274:	20 e0       	ldi	r18, 0x00	; 0
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	4a ef       	ldi	r20, 0xFA	; 250
    127a:	54 e4       	ldi	r21, 0x44	; 68
    127c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1280:	dc 01       	movw	r26, r24
    1282:	cb 01       	movw	r24, r22
    1284:	8f 83       	std	Y+7, r24	; 0x07
    1286:	98 87       	std	Y+8, r25	; 0x08
    1288:	a9 87       	std	Y+9, r26	; 0x09
    128a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    128c:	6f 81       	ldd	r22, Y+7	; 0x07
    128e:	78 85       	ldd	r23, Y+8	; 0x08
    1290:	89 85       	ldd	r24, Y+9	; 0x09
    1292:	9a 85       	ldd	r25, Y+10	; 0x0a
    1294:	20 e0       	ldi	r18, 0x00	; 0
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	40 e8       	ldi	r20, 0x80	; 128
    129a:	5f e3       	ldi	r21, 0x3F	; 63
    129c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12a0:	88 23       	and	r24, r24
    12a2:	2c f4       	brge	.+10     	; 0x12ae <CLCD_voidSendCommand+0x2aa>
		__ticks = 1;
    12a4:	81 e0       	ldi	r24, 0x01	; 1
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	9e 83       	std	Y+6, r25	; 0x06
    12aa:	8d 83       	std	Y+5, r24	; 0x05
    12ac:	3f c0       	rjmp	.+126    	; 0x132c <CLCD_voidSendCommand+0x328>
	else if (__tmp > 65535)
    12ae:	6f 81       	ldd	r22, Y+7	; 0x07
    12b0:	78 85       	ldd	r23, Y+8	; 0x08
    12b2:	89 85       	ldd	r24, Y+9	; 0x09
    12b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    12b6:	20 e0       	ldi	r18, 0x00	; 0
    12b8:	3f ef       	ldi	r19, 0xFF	; 255
    12ba:	4f e7       	ldi	r20, 0x7F	; 127
    12bc:	57 e4       	ldi	r21, 0x47	; 71
    12be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12c2:	18 16       	cp	r1, r24
    12c4:	4c f5       	brge	.+82     	; 0x1318 <CLCD_voidSendCommand+0x314>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    12c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    12ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    12cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    12ce:	20 e0       	ldi	r18, 0x00	; 0
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	40 e2       	ldi	r20, 0x20	; 32
    12d4:	51 e4       	ldi	r21, 0x41	; 65
    12d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12da:	dc 01       	movw	r26, r24
    12dc:	cb 01       	movw	r24, r22
    12de:	bc 01       	movw	r22, r24
    12e0:	cd 01       	movw	r24, r26
    12e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12e6:	dc 01       	movw	r26, r24
    12e8:	cb 01       	movw	r24, r22
    12ea:	9e 83       	std	Y+6, r25	; 0x06
    12ec:	8d 83       	std	Y+5, r24	; 0x05
    12ee:	0f c0       	rjmp	.+30     	; 0x130e <CLCD_voidSendCommand+0x30a>
    12f0:	88 ec       	ldi	r24, 0xC8	; 200
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	9c 83       	std	Y+4, r25	; 0x04
    12f6:	8b 83       	std	Y+3, r24	; 0x03
    12f8:	8b 81       	ldd	r24, Y+3	; 0x03
    12fa:	9c 81       	ldd	r25, Y+4	; 0x04
    12fc:	01 97       	sbiw	r24, 0x01	; 1
    12fe:	f1 f7       	brne	.-4      	; 0x12fc <CLCD_voidSendCommand+0x2f8>
    1300:	9c 83       	std	Y+4, r25	; 0x04
    1302:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1304:	8d 81       	ldd	r24, Y+5	; 0x05
    1306:	9e 81       	ldd	r25, Y+6	; 0x06
    1308:	01 97       	sbiw	r24, 0x01	; 1
    130a:	9e 83       	std	Y+6, r25	; 0x06
    130c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    130e:	8d 81       	ldd	r24, Y+5	; 0x05
    1310:	9e 81       	ldd	r25, Y+6	; 0x06
    1312:	00 97       	sbiw	r24, 0x00	; 0
    1314:	69 f7       	brne	.-38     	; 0x12f0 <CLCD_voidSendCommand+0x2ec>
    1316:	14 c0       	rjmp	.+40     	; 0x1340 <CLCD_voidSendCommand+0x33c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1318:	6f 81       	ldd	r22, Y+7	; 0x07
    131a:	78 85       	ldd	r23, Y+8	; 0x08
    131c:	89 85       	ldd	r24, Y+9	; 0x09
    131e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1320:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1324:	dc 01       	movw	r26, r24
    1326:	cb 01       	movw	r24, r22
    1328:	9e 83       	std	Y+6, r25	; 0x06
    132a:	8d 83       	std	Y+5, r24	; 0x05
    132c:	8d 81       	ldd	r24, Y+5	; 0x05
    132e:	9e 81       	ldd	r25, Y+6	; 0x06
    1330:	9a 83       	std	Y+2, r25	; 0x02
    1332:	89 83       	std	Y+1, r24	; 0x01
    1334:	89 81       	ldd	r24, Y+1	; 0x01
    1336:	9a 81       	ldd	r25, Y+2	; 0x02
    1338:	01 97       	sbiw	r24, 0x01	; 1
    133a:	f1 f7       	brne	.-4      	; 0x1338 <CLCD_voidSendCommand+0x334>
    133c:	9a 83       	std	Y+2, r25	; 0x02
    133e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
#else
#error "In correct cconfigrtion of LCD_MODE"
#endif

}
    1340:	ac 96       	adiw	r28, 0x2c	; 44
    1342:	0f b6       	in	r0, 0x3f	; 63
    1344:	f8 94       	cli
    1346:	de bf       	out	0x3e, r29	; 62
    1348:	0f be       	out	0x3f, r0	; 63
    134a:	cd bf       	out	0x3d, r28	; 61
    134c:	cf 91       	pop	r28
    134e:	df 91       	pop	r29
    1350:	08 95       	ret

00001352 <CLCD_Read_BF_AC>:
u8 CLCD_Read_BF_AC() {
    1352:	df 93       	push	r29
    1354:	cf 93       	push	r28
    1356:	00 d0       	rcall	.+0      	; 0x1358 <CLCD_Read_BF_AC+0x6>
    1358:	cd b7       	in	r28, 0x3d	; 61
    135a:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8Address = 0;
    135c:	1a 82       	std	Y+2, r1	; 0x02
	/*PIN RS SET LOW  */
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RS_PIN, DIO_PIN_LOW);
    135e:	81 e0       	ldi	r24, 0x01	; 1
    1360:	60 e0       	ldi	r22, 0x00	; 0
    1362:	40 e0       	ldi	r20, 0x00	; 0
    1364:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_u8SetPinValue>
	/*PIN RW SET HIGH  */
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RW_PIN, DIO_PIN_HIGH);
    1368:	81 e0       	ldi	r24, 0x01	; 1
    136a:	61 e0       	ldi	r22, 0x01	; 1
    136c:	41 e0       	ldi	r20, 0x01	; 1
    136e:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_u8SetPinValue>
	/*PIN SET  send pulse (E) */
	for (u8 i = 0; i < 7; i++) {
    1372:	19 82       	std	Y+1, r1	; 0x01
    1374:	1c c0       	rjmp	.+56     	; 0x13ae <CLCD_Read_BF_AC+0x5c>
		DIO_u8GetPinValue(CLCD_DATA_PORT, i, &Local_u8Address);
    1376:	9e 01       	movw	r18, r28
    1378:	2e 5f       	subi	r18, 0xFE	; 254
    137a:	3f 4f       	sbci	r19, 0xFF	; 255
    137c:	80 e0       	ldi	r24, 0x00	; 0
    137e:	69 81       	ldd	r22, Y+1	; 0x01
    1380:	a9 01       	movw	r20, r18
    1382:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <DIO_u8GetPinValue>
		Local_u8Address += Local_u8Address << i;
    1386:	8a 81       	ldd	r24, Y+2	; 0x02
    1388:	28 2f       	mov	r18, r24
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	89 81       	ldd	r24, Y+1	; 0x01
    138e:	88 2f       	mov	r24, r24
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	a9 01       	movw	r20, r18
    1394:	02 c0       	rjmp	.+4      	; 0x139a <CLCD_Read_BF_AC+0x48>
    1396:	44 0f       	add	r20, r20
    1398:	55 1f       	adc	r21, r21
    139a:	8a 95       	dec	r24
    139c:	e2 f7       	brpl	.-8      	; 0x1396 <CLCD_Read_BF_AC+0x44>
    139e:	ca 01       	movw	r24, r20
    13a0:	98 2f       	mov	r25, r24
    13a2:	8a 81       	ldd	r24, Y+2	; 0x02
    13a4:	89 0f       	add	r24, r25
    13a6:	8a 83       	std	Y+2, r24	; 0x02
	/*PIN RS SET LOW  */
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RS_PIN, DIO_PIN_LOW);
	/*PIN RW SET HIGH  */
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RW_PIN, DIO_PIN_HIGH);
	/*PIN SET  send pulse (E) */
	for (u8 i = 0; i < 7; i++) {
    13a8:	89 81       	ldd	r24, Y+1	; 0x01
    13aa:	8f 5f       	subi	r24, 0xFF	; 255
    13ac:	89 83       	std	Y+1, r24	; 0x01
    13ae:	89 81       	ldd	r24, Y+1	; 0x01
    13b0:	87 30       	cpi	r24, 0x07	; 7
    13b2:	08 f3       	brcs	.-62     	; 0x1376 <CLCD_Read_BF_AC+0x24>
		DIO_u8GetPinValue(CLCD_DATA_PORT, i, &Local_u8Address);
		Local_u8Address += Local_u8Address << i;
	}
	return Local_u8Address;
    13b4:	8a 81       	ldd	r24, Y+2	; 0x02
}
    13b6:	0f 90       	pop	r0
    13b8:	0f 90       	pop	r0
    13ba:	cf 91       	pop	r28
    13bc:	df 91       	pop	r29
    13be:	08 95       	ret

000013c0 <CLCD_voidSendData>:

void CLCD_voidSendData(u8 Copy_u8Data)
{
    13c0:	df 93       	push	r29
    13c2:	cf 93       	push	r28
    13c4:	cd b7       	in	r28, 0x3d	; 61
    13c6:	de b7       	in	r29, 0x3e	; 62
    13c8:	ac 97       	sbiw	r28, 0x2c	; 44
    13ca:	0f b6       	in	r0, 0x3f	; 63
    13cc:	f8 94       	cli
    13ce:	de bf       	out	0x3e, r29	; 62
    13d0:	0f be       	out	0x3f, r0	; 63
    13d2:	cd bf       	out	0x3d, r28	; 61
    13d4:	8c a7       	std	Y+44, r24	; 0x2c
	if (Local_u8Address > 0x0f)
		CLCD_voidSendCommand(0x0C);
	else
		CLCD_voidSendCommand(0x06);
#elif CLCD_CHIOCE_MODE==_4_BIT_MODE
	u8 Local_u8Mask = 0b11110000;
    13d6:	80 ef       	ldi	r24, 0xF0	; 240
    13d8:	8b a7       	std	Y+43, r24	; 0x2b
	/*PIN RS SET LOW  */
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_PIN_HIGH);
    13da:	81 e0       	ldi	r24, 0x01	; 1
    13dc:	60 e0       	ldi	r22, 0x00	; 0
    13de:	41 e0       	ldi	r20, 0x01	; 1
    13e0:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_u8SetPinValue>
	/*PIN RW SET LOW  */
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_PIN_LOW);
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	61 e0       	ldi	r22, 0x01	; 1
    13e8:	40 e0       	ldi	r20, 0x00	; 0
    13ea:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_u8SetPinValue>
	/*PORT SET COMMAND*/
	Local_u8Mask &= Copy_u8Data;
    13ee:	9b a5       	ldd	r25, Y+43	; 0x2b
    13f0:	8c a5       	ldd	r24, Y+44	; 0x2c
    13f2:	89 23       	and	r24, r25
    13f4:	8b a7       	std	Y+43, r24	; 0x2b
	DIO_u8SetPortValue(CLCD_DATA_PORT,Local_u8Mask);
    13f6:	80 e0       	ldi	r24, 0x00	; 0
    13f8:	6b a5       	ldd	r22, Y+43	; 0x2b
    13fa:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <DIO_u8SetPortValue>
	/*PIN SET send pulse (E) */
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_PIN_HIGH);
    13fe:	81 e0       	ldi	r24, 0x01	; 1
    1400:	62 e0       	ldi	r22, 0x02	; 2
    1402:	41 e0       	ldi	r20, 0x01	; 1
    1404:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_u8SetPinValue>
    1408:	80 e0       	ldi	r24, 0x00	; 0
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	a0 e0       	ldi	r26, 0x00	; 0
    140e:	b0 e4       	ldi	r27, 0x40	; 64
    1410:	8f a3       	std	Y+39, r24	; 0x27
    1412:	98 a7       	std	Y+40, r25	; 0x28
    1414:	a9 a7       	std	Y+41, r26	; 0x29
    1416:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1418:	6f a1       	ldd	r22, Y+39	; 0x27
    141a:	78 a5       	ldd	r23, Y+40	; 0x28
    141c:	89 a5       	ldd	r24, Y+41	; 0x29
    141e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1420:	20 e0       	ldi	r18, 0x00	; 0
    1422:	30 e0       	ldi	r19, 0x00	; 0
    1424:	4a ef       	ldi	r20, 0xFA	; 250
    1426:	54 e4       	ldi	r21, 0x44	; 68
    1428:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    142c:	dc 01       	movw	r26, r24
    142e:	cb 01       	movw	r24, r22
    1430:	8b a3       	std	Y+35, r24	; 0x23
    1432:	9c a3       	std	Y+36, r25	; 0x24
    1434:	ad a3       	std	Y+37, r26	; 0x25
    1436:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1438:	6b a1       	ldd	r22, Y+35	; 0x23
    143a:	7c a1       	ldd	r23, Y+36	; 0x24
    143c:	8d a1       	ldd	r24, Y+37	; 0x25
    143e:	9e a1       	ldd	r25, Y+38	; 0x26
    1440:	20 e0       	ldi	r18, 0x00	; 0
    1442:	30 e0       	ldi	r19, 0x00	; 0
    1444:	40 e8       	ldi	r20, 0x80	; 128
    1446:	5f e3       	ldi	r21, 0x3F	; 63
    1448:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    144c:	88 23       	and	r24, r24
    144e:	2c f4       	brge	.+10     	; 0x145a <CLCD_voidSendData+0x9a>
		__ticks = 1;
    1450:	81 e0       	ldi	r24, 0x01	; 1
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	9a a3       	std	Y+34, r25	; 0x22
    1456:	89 a3       	std	Y+33, r24	; 0x21
    1458:	3f c0       	rjmp	.+126    	; 0x14d8 <CLCD_voidSendData+0x118>
	else if (__tmp > 65535)
    145a:	6b a1       	ldd	r22, Y+35	; 0x23
    145c:	7c a1       	ldd	r23, Y+36	; 0x24
    145e:	8d a1       	ldd	r24, Y+37	; 0x25
    1460:	9e a1       	ldd	r25, Y+38	; 0x26
    1462:	20 e0       	ldi	r18, 0x00	; 0
    1464:	3f ef       	ldi	r19, 0xFF	; 255
    1466:	4f e7       	ldi	r20, 0x7F	; 127
    1468:	57 e4       	ldi	r21, 0x47	; 71
    146a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    146e:	18 16       	cp	r1, r24
    1470:	4c f5       	brge	.+82     	; 0x14c4 <CLCD_voidSendData+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1472:	6f a1       	ldd	r22, Y+39	; 0x27
    1474:	78 a5       	ldd	r23, Y+40	; 0x28
    1476:	89 a5       	ldd	r24, Y+41	; 0x29
    1478:	9a a5       	ldd	r25, Y+42	; 0x2a
    147a:	20 e0       	ldi	r18, 0x00	; 0
    147c:	30 e0       	ldi	r19, 0x00	; 0
    147e:	40 e2       	ldi	r20, 0x20	; 32
    1480:	51 e4       	ldi	r21, 0x41	; 65
    1482:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1486:	dc 01       	movw	r26, r24
    1488:	cb 01       	movw	r24, r22
    148a:	bc 01       	movw	r22, r24
    148c:	cd 01       	movw	r24, r26
    148e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1492:	dc 01       	movw	r26, r24
    1494:	cb 01       	movw	r24, r22
    1496:	9a a3       	std	Y+34, r25	; 0x22
    1498:	89 a3       	std	Y+33, r24	; 0x21
    149a:	0f c0       	rjmp	.+30     	; 0x14ba <CLCD_voidSendData+0xfa>
    149c:	88 ec       	ldi	r24, 0xC8	; 200
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	98 a3       	std	Y+32, r25	; 0x20
    14a2:	8f 8f       	std	Y+31, r24	; 0x1f
    14a4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    14a6:	98 a1       	ldd	r25, Y+32	; 0x20
    14a8:	01 97       	sbiw	r24, 0x01	; 1
    14aa:	f1 f7       	brne	.-4      	; 0x14a8 <CLCD_voidSendData+0xe8>
    14ac:	98 a3       	std	Y+32, r25	; 0x20
    14ae:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14b0:	89 a1       	ldd	r24, Y+33	; 0x21
    14b2:	9a a1       	ldd	r25, Y+34	; 0x22
    14b4:	01 97       	sbiw	r24, 0x01	; 1
    14b6:	9a a3       	std	Y+34, r25	; 0x22
    14b8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14ba:	89 a1       	ldd	r24, Y+33	; 0x21
    14bc:	9a a1       	ldd	r25, Y+34	; 0x22
    14be:	00 97       	sbiw	r24, 0x00	; 0
    14c0:	69 f7       	brne	.-38     	; 0x149c <CLCD_voidSendData+0xdc>
    14c2:	14 c0       	rjmp	.+40     	; 0x14ec <CLCD_voidSendData+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14c4:	6b a1       	ldd	r22, Y+35	; 0x23
    14c6:	7c a1       	ldd	r23, Y+36	; 0x24
    14c8:	8d a1       	ldd	r24, Y+37	; 0x25
    14ca:	9e a1       	ldd	r25, Y+38	; 0x26
    14cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14d0:	dc 01       	movw	r26, r24
    14d2:	cb 01       	movw	r24, r22
    14d4:	9a a3       	std	Y+34, r25	; 0x22
    14d6:	89 a3       	std	Y+33, r24	; 0x21
    14d8:	89 a1       	ldd	r24, Y+33	; 0x21
    14da:	9a a1       	ldd	r25, Y+34	; 0x22
    14dc:	9e 8f       	std	Y+30, r25	; 0x1e
    14de:	8d 8f       	std	Y+29, r24	; 0x1d
    14e0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    14e2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    14e4:	01 97       	sbiw	r24, 0x01	; 1
    14e6:	f1 f7       	brne	.-4      	; 0x14e4 <CLCD_voidSendData+0x124>
    14e8:	9e 8f       	std	Y+30, r25	; 0x1e
    14ea:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_PIN_LOW);
    14ec:	81 e0       	ldi	r24, 0x01	; 1
    14ee:	62 e0       	ldi	r22, 0x02	; 2
    14f0:	40 e0       	ldi	r20, 0x00	; 0
    14f2:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_u8SetPinValue>
	Local_u8Mask=0b11110000;
    14f6:	80 ef       	ldi	r24, 0xF0	; 240
    14f8:	8b a7       	std	Y+43, r24	; 0x2b
	Local_u8Mask = ~(Local_u8Mask) & Copy_u8Data;
    14fa:	8b a5       	ldd	r24, Y+43	; 0x2b
    14fc:	98 2f       	mov	r25, r24
    14fe:	90 95       	com	r25
    1500:	8c a5       	ldd	r24, Y+44	; 0x2c
    1502:	89 23       	and	r24, r25
    1504:	8b a7       	std	Y+43, r24	; 0x2b
	DIO_u8SetPortValue(CLCD_DATA_PORT, (Local_u8Mask << 4));
    1506:	8b a5       	ldd	r24, Y+43	; 0x2b
    1508:	98 2f       	mov	r25, r24
    150a:	92 95       	swap	r25
    150c:	90 7f       	andi	r25, 0xF0	; 240
    150e:	80 e0       	ldi	r24, 0x00	; 0
    1510:	69 2f       	mov	r22, r25
    1512:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <DIO_u8SetPortValue>
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_PIN_HIGH);
    1516:	81 e0       	ldi	r24, 0x01	; 1
    1518:	62 e0       	ldi	r22, 0x02	; 2
    151a:	41 e0       	ldi	r20, 0x01	; 1
    151c:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_u8SetPinValue>
    1520:	80 e0       	ldi	r24, 0x00	; 0
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	a0 e0       	ldi	r26, 0x00	; 0
    1526:	b0 e4       	ldi	r27, 0x40	; 64
    1528:	89 8f       	std	Y+25, r24	; 0x19
    152a:	9a 8f       	std	Y+26, r25	; 0x1a
    152c:	ab 8f       	std	Y+27, r26	; 0x1b
    152e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1530:	69 8d       	ldd	r22, Y+25	; 0x19
    1532:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1534:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1536:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1538:	20 e0       	ldi	r18, 0x00	; 0
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	4a ef       	ldi	r20, 0xFA	; 250
    153e:	54 e4       	ldi	r21, 0x44	; 68
    1540:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1544:	dc 01       	movw	r26, r24
    1546:	cb 01       	movw	r24, r22
    1548:	8d 8b       	std	Y+21, r24	; 0x15
    154a:	9e 8b       	std	Y+22, r25	; 0x16
    154c:	af 8b       	std	Y+23, r26	; 0x17
    154e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1550:	6d 89       	ldd	r22, Y+21	; 0x15
    1552:	7e 89       	ldd	r23, Y+22	; 0x16
    1554:	8f 89       	ldd	r24, Y+23	; 0x17
    1556:	98 8d       	ldd	r25, Y+24	; 0x18
    1558:	20 e0       	ldi	r18, 0x00	; 0
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	40 e8       	ldi	r20, 0x80	; 128
    155e:	5f e3       	ldi	r21, 0x3F	; 63
    1560:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1564:	88 23       	and	r24, r24
    1566:	2c f4       	brge	.+10     	; 0x1572 <CLCD_voidSendData+0x1b2>
		__ticks = 1;
    1568:	81 e0       	ldi	r24, 0x01	; 1
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	9c 8b       	std	Y+20, r25	; 0x14
    156e:	8b 8b       	std	Y+19, r24	; 0x13
    1570:	3f c0       	rjmp	.+126    	; 0x15f0 <CLCD_voidSendData+0x230>
	else if (__tmp > 65535)
    1572:	6d 89       	ldd	r22, Y+21	; 0x15
    1574:	7e 89       	ldd	r23, Y+22	; 0x16
    1576:	8f 89       	ldd	r24, Y+23	; 0x17
    1578:	98 8d       	ldd	r25, Y+24	; 0x18
    157a:	20 e0       	ldi	r18, 0x00	; 0
    157c:	3f ef       	ldi	r19, 0xFF	; 255
    157e:	4f e7       	ldi	r20, 0x7F	; 127
    1580:	57 e4       	ldi	r21, 0x47	; 71
    1582:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1586:	18 16       	cp	r1, r24
    1588:	4c f5       	brge	.+82     	; 0x15dc <CLCD_voidSendData+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    158a:	69 8d       	ldd	r22, Y+25	; 0x19
    158c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    158e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1590:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1592:	20 e0       	ldi	r18, 0x00	; 0
    1594:	30 e0       	ldi	r19, 0x00	; 0
    1596:	40 e2       	ldi	r20, 0x20	; 32
    1598:	51 e4       	ldi	r21, 0x41	; 65
    159a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    159e:	dc 01       	movw	r26, r24
    15a0:	cb 01       	movw	r24, r22
    15a2:	bc 01       	movw	r22, r24
    15a4:	cd 01       	movw	r24, r26
    15a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15aa:	dc 01       	movw	r26, r24
    15ac:	cb 01       	movw	r24, r22
    15ae:	9c 8b       	std	Y+20, r25	; 0x14
    15b0:	8b 8b       	std	Y+19, r24	; 0x13
    15b2:	0f c0       	rjmp	.+30     	; 0x15d2 <CLCD_voidSendData+0x212>
    15b4:	88 ec       	ldi	r24, 0xC8	; 200
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	9a 8b       	std	Y+18, r25	; 0x12
    15ba:	89 8b       	std	Y+17, r24	; 0x11
    15bc:	89 89       	ldd	r24, Y+17	; 0x11
    15be:	9a 89       	ldd	r25, Y+18	; 0x12
    15c0:	01 97       	sbiw	r24, 0x01	; 1
    15c2:	f1 f7       	brne	.-4      	; 0x15c0 <CLCD_voidSendData+0x200>
    15c4:	9a 8b       	std	Y+18, r25	; 0x12
    15c6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15c8:	8b 89       	ldd	r24, Y+19	; 0x13
    15ca:	9c 89       	ldd	r25, Y+20	; 0x14
    15cc:	01 97       	sbiw	r24, 0x01	; 1
    15ce:	9c 8b       	std	Y+20, r25	; 0x14
    15d0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15d2:	8b 89       	ldd	r24, Y+19	; 0x13
    15d4:	9c 89       	ldd	r25, Y+20	; 0x14
    15d6:	00 97       	sbiw	r24, 0x00	; 0
    15d8:	69 f7       	brne	.-38     	; 0x15b4 <CLCD_voidSendData+0x1f4>
    15da:	14 c0       	rjmp	.+40     	; 0x1604 <CLCD_voidSendData+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15dc:	6d 89       	ldd	r22, Y+21	; 0x15
    15de:	7e 89       	ldd	r23, Y+22	; 0x16
    15e0:	8f 89       	ldd	r24, Y+23	; 0x17
    15e2:	98 8d       	ldd	r25, Y+24	; 0x18
    15e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15e8:	dc 01       	movw	r26, r24
    15ea:	cb 01       	movw	r24, r22
    15ec:	9c 8b       	std	Y+20, r25	; 0x14
    15ee:	8b 8b       	std	Y+19, r24	; 0x13
    15f0:	8b 89       	ldd	r24, Y+19	; 0x13
    15f2:	9c 89       	ldd	r25, Y+20	; 0x14
    15f4:	98 8b       	std	Y+16, r25	; 0x10
    15f6:	8f 87       	std	Y+15, r24	; 0x0f
    15f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    15fa:	98 89       	ldd	r25, Y+16	; 0x10
    15fc:	01 97       	sbiw	r24, 0x01	; 1
    15fe:	f1 f7       	brne	.-4      	; 0x15fc <CLCD_voidSendData+0x23c>
    1600:	98 8b       	std	Y+16, r25	; 0x10
    1602:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_PIN_LOW);
    1604:	81 e0       	ldi	r24, 0x01	; 1
    1606:	62 e0       	ldi	r22, 0x02	; 2
    1608:	40 e0       	ldi	r20, 0x00	; 0
    160a:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_u8SetPinValue>
    160e:	80 e0       	ldi	r24, 0x00	; 0
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	a0 e0       	ldi	r26, 0x00	; 0
    1614:	b0 e4       	ldi	r27, 0x40	; 64
    1616:	8b 87       	std	Y+11, r24	; 0x0b
    1618:	9c 87       	std	Y+12, r25	; 0x0c
    161a:	ad 87       	std	Y+13, r26	; 0x0d
    161c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    161e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1620:	7c 85       	ldd	r23, Y+12	; 0x0c
    1622:	8d 85       	ldd	r24, Y+13	; 0x0d
    1624:	9e 85       	ldd	r25, Y+14	; 0x0e
    1626:	20 e0       	ldi	r18, 0x00	; 0
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	4a ef       	ldi	r20, 0xFA	; 250
    162c:	54 e4       	ldi	r21, 0x44	; 68
    162e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1632:	dc 01       	movw	r26, r24
    1634:	cb 01       	movw	r24, r22
    1636:	8f 83       	std	Y+7, r24	; 0x07
    1638:	98 87       	std	Y+8, r25	; 0x08
    163a:	a9 87       	std	Y+9, r26	; 0x09
    163c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    163e:	6f 81       	ldd	r22, Y+7	; 0x07
    1640:	78 85       	ldd	r23, Y+8	; 0x08
    1642:	89 85       	ldd	r24, Y+9	; 0x09
    1644:	9a 85       	ldd	r25, Y+10	; 0x0a
    1646:	20 e0       	ldi	r18, 0x00	; 0
    1648:	30 e0       	ldi	r19, 0x00	; 0
    164a:	40 e8       	ldi	r20, 0x80	; 128
    164c:	5f e3       	ldi	r21, 0x3F	; 63
    164e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1652:	88 23       	and	r24, r24
    1654:	2c f4       	brge	.+10     	; 0x1660 <CLCD_voidSendData+0x2a0>
		__ticks = 1;
    1656:	81 e0       	ldi	r24, 0x01	; 1
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	9e 83       	std	Y+6, r25	; 0x06
    165c:	8d 83       	std	Y+5, r24	; 0x05
    165e:	3f c0       	rjmp	.+126    	; 0x16de <CLCD_voidSendData+0x31e>
	else if (__tmp > 65535)
    1660:	6f 81       	ldd	r22, Y+7	; 0x07
    1662:	78 85       	ldd	r23, Y+8	; 0x08
    1664:	89 85       	ldd	r24, Y+9	; 0x09
    1666:	9a 85       	ldd	r25, Y+10	; 0x0a
    1668:	20 e0       	ldi	r18, 0x00	; 0
    166a:	3f ef       	ldi	r19, 0xFF	; 255
    166c:	4f e7       	ldi	r20, 0x7F	; 127
    166e:	57 e4       	ldi	r21, 0x47	; 71
    1670:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1674:	18 16       	cp	r1, r24
    1676:	4c f5       	brge	.+82     	; 0x16ca <CLCD_voidSendData+0x30a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1678:	6b 85       	ldd	r22, Y+11	; 0x0b
    167a:	7c 85       	ldd	r23, Y+12	; 0x0c
    167c:	8d 85       	ldd	r24, Y+13	; 0x0d
    167e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1680:	20 e0       	ldi	r18, 0x00	; 0
    1682:	30 e0       	ldi	r19, 0x00	; 0
    1684:	40 e2       	ldi	r20, 0x20	; 32
    1686:	51 e4       	ldi	r21, 0x41	; 65
    1688:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    168c:	dc 01       	movw	r26, r24
    168e:	cb 01       	movw	r24, r22
    1690:	bc 01       	movw	r22, r24
    1692:	cd 01       	movw	r24, r26
    1694:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1698:	dc 01       	movw	r26, r24
    169a:	cb 01       	movw	r24, r22
    169c:	9e 83       	std	Y+6, r25	; 0x06
    169e:	8d 83       	std	Y+5, r24	; 0x05
    16a0:	0f c0       	rjmp	.+30     	; 0x16c0 <CLCD_voidSendData+0x300>
    16a2:	88 ec       	ldi	r24, 0xC8	; 200
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	9c 83       	std	Y+4, r25	; 0x04
    16a8:	8b 83       	std	Y+3, r24	; 0x03
    16aa:	8b 81       	ldd	r24, Y+3	; 0x03
    16ac:	9c 81       	ldd	r25, Y+4	; 0x04
    16ae:	01 97       	sbiw	r24, 0x01	; 1
    16b0:	f1 f7       	brne	.-4      	; 0x16ae <CLCD_voidSendData+0x2ee>
    16b2:	9c 83       	std	Y+4, r25	; 0x04
    16b4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16b6:	8d 81       	ldd	r24, Y+5	; 0x05
    16b8:	9e 81       	ldd	r25, Y+6	; 0x06
    16ba:	01 97       	sbiw	r24, 0x01	; 1
    16bc:	9e 83       	std	Y+6, r25	; 0x06
    16be:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16c0:	8d 81       	ldd	r24, Y+5	; 0x05
    16c2:	9e 81       	ldd	r25, Y+6	; 0x06
    16c4:	00 97       	sbiw	r24, 0x00	; 0
    16c6:	69 f7       	brne	.-38     	; 0x16a2 <CLCD_voidSendData+0x2e2>
    16c8:	14 c0       	rjmp	.+40     	; 0x16f2 <CLCD_voidSendData+0x332>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16ca:	6f 81       	ldd	r22, Y+7	; 0x07
    16cc:	78 85       	ldd	r23, Y+8	; 0x08
    16ce:	89 85       	ldd	r24, Y+9	; 0x09
    16d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    16d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16d6:	dc 01       	movw	r26, r24
    16d8:	cb 01       	movw	r24, r22
    16da:	9e 83       	std	Y+6, r25	; 0x06
    16dc:	8d 83       	std	Y+5, r24	; 0x05
    16de:	8d 81       	ldd	r24, Y+5	; 0x05
    16e0:	9e 81       	ldd	r25, Y+6	; 0x06
    16e2:	9a 83       	std	Y+2, r25	; 0x02
    16e4:	89 83       	std	Y+1, r24	; 0x01
    16e6:	89 81       	ldd	r24, Y+1	; 0x01
    16e8:	9a 81       	ldd	r25, Y+2	; 0x02
    16ea:	01 97       	sbiw	r24, 0x01	; 1
    16ec:	f1 f7       	brne	.-4      	; 0x16ea <CLCD_voidSendData+0x32a>
    16ee:	9a 83       	std	Y+2, r25	; 0x02
    16f0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	CLCD_voidSendCommand(0x06);
    16f2:	86 e0       	ldi	r24, 0x06	; 6
    16f4:	0e 94 02 08 	call	0x1004	; 0x1004 <CLCD_voidSendCommand>
#else
#error "In correct cconfigrtion of LCD_MODE"
#endif
}
    16f8:	ac 96       	adiw	r28, 0x2c	; 44
    16fa:	0f b6       	in	r0, 0x3f	; 63
    16fc:	f8 94       	cli
    16fe:	de bf       	out	0x3e, r29	; 62
    1700:	0f be       	out	0x3f, r0	; 63
    1702:	cd bf       	out	0x3d, r28	; 61
    1704:	cf 91       	pop	r28
    1706:	df 91       	pop	r29
    1708:	08 95       	ret

0000170a <CLCD_voidInit>:

void CLCD_voidInit(void)
{
    170a:	df 93       	push	r29
    170c:	cf 93       	push	r28
    170e:	cd b7       	in	r28, 0x3d	; 61
    1710:	de b7       	in	r29, 0x3e	; 62
    1712:	e8 97       	sbiw	r28, 0x38	; 56
    1714:	0f b6       	in	r0, 0x3f	; 63
    1716:	f8 94       	cli
    1718:	de bf       	out	0x3e, r29	; 62
    171a:	0f be       	out	0x3f, r0	; 63
    171c:	cd bf       	out	0x3d, r28	; 61
    171e:	80 e0       	ldi	r24, 0x00	; 0
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	a0 e2       	ldi	r26, 0x20	; 32
    1724:	b2 e4       	ldi	r27, 0x42	; 66
    1726:	8d ab       	std	Y+53, r24	; 0x35
    1728:	9e ab       	std	Y+54, r25	; 0x36
    172a:	af ab       	std	Y+55, r26	; 0x37
    172c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    172e:	6d a9       	ldd	r22, Y+53	; 0x35
    1730:	7e a9       	ldd	r23, Y+54	; 0x36
    1732:	8f a9       	ldd	r24, Y+55	; 0x37
    1734:	98 ad       	ldd	r25, Y+56	; 0x38
    1736:	20 e0       	ldi	r18, 0x00	; 0
    1738:	30 e0       	ldi	r19, 0x00	; 0
    173a:	4a ef       	ldi	r20, 0xFA	; 250
    173c:	54 e4       	ldi	r21, 0x44	; 68
    173e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1742:	dc 01       	movw	r26, r24
    1744:	cb 01       	movw	r24, r22
    1746:	89 ab       	std	Y+49, r24	; 0x31
    1748:	9a ab       	std	Y+50, r25	; 0x32
    174a:	ab ab       	std	Y+51, r26	; 0x33
    174c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    174e:	69 a9       	ldd	r22, Y+49	; 0x31
    1750:	7a a9       	ldd	r23, Y+50	; 0x32
    1752:	8b a9       	ldd	r24, Y+51	; 0x33
    1754:	9c a9       	ldd	r25, Y+52	; 0x34
    1756:	20 e0       	ldi	r18, 0x00	; 0
    1758:	30 e0       	ldi	r19, 0x00	; 0
    175a:	40 e8       	ldi	r20, 0x80	; 128
    175c:	5f e3       	ldi	r21, 0x3F	; 63
    175e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1762:	88 23       	and	r24, r24
    1764:	2c f4       	brge	.+10     	; 0x1770 <CLCD_voidInit+0x66>
		__ticks = 1;
    1766:	81 e0       	ldi	r24, 0x01	; 1
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	98 ab       	std	Y+48, r25	; 0x30
    176c:	8f a7       	std	Y+47, r24	; 0x2f
    176e:	3f c0       	rjmp	.+126    	; 0x17ee <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    1770:	69 a9       	ldd	r22, Y+49	; 0x31
    1772:	7a a9       	ldd	r23, Y+50	; 0x32
    1774:	8b a9       	ldd	r24, Y+51	; 0x33
    1776:	9c a9       	ldd	r25, Y+52	; 0x34
    1778:	20 e0       	ldi	r18, 0x00	; 0
    177a:	3f ef       	ldi	r19, 0xFF	; 255
    177c:	4f e7       	ldi	r20, 0x7F	; 127
    177e:	57 e4       	ldi	r21, 0x47	; 71
    1780:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1784:	18 16       	cp	r1, r24
    1786:	4c f5       	brge	.+82     	; 0x17da <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1788:	6d a9       	ldd	r22, Y+53	; 0x35
    178a:	7e a9       	ldd	r23, Y+54	; 0x36
    178c:	8f a9       	ldd	r24, Y+55	; 0x37
    178e:	98 ad       	ldd	r25, Y+56	; 0x38
    1790:	20 e0       	ldi	r18, 0x00	; 0
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	40 e2       	ldi	r20, 0x20	; 32
    1796:	51 e4       	ldi	r21, 0x41	; 65
    1798:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    179c:	dc 01       	movw	r26, r24
    179e:	cb 01       	movw	r24, r22
    17a0:	bc 01       	movw	r22, r24
    17a2:	cd 01       	movw	r24, r26
    17a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17a8:	dc 01       	movw	r26, r24
    17aa:	cb 01       	movw	r24, r22
    17ac:	98 ab       	std	Y+48, r25	; 0x30
    17ae:	8f a7       	std	Y+47, r24	; 0x2f
    17b0:	0f c0       	rjmp	.+30     	; 0x17d0 <CLCD_voidInit+0xc6>
    17b2:	88 ec       	ldi	r24, 0xC8	; 200
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	9e a7       	std	Y+46, r25	; 0x2e
    17b8:	8d a7       	std	Y+45, r24	; 0x2d
    17ba:	8d a5       	ldd	r24, Y+45	; 0x2d
    17bc:	9e a5       	ldd	r25, Y+46	; 0x2e
    17be:	01 97       	sbiw	r24, 0x01	; 1
    17c0:	f1 f7       	brne	.-4      	; 0x17be <CLCD_voidInit+0xb4>
    17c2:	9e a7       	std	Y+46, r25	; 0x2e
    17c4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17c6:	8f a5       	ldd	r24, Y+47	; 0x2f
    17c8:	98 a9       	ldd	r25, Y+48	; 0x30
    17ca:	01 97       	sbiw	r24, 0x01	; 1
    17cc:	98 ab       	std	Y+48, r25	; 0x30
    17ce:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17d0:	8f a5       	ldd	r24, Y+47	; 0x2f
    17d2:	98 a9       	ldd	r25, Y+48	; 0x30
    17d4:	00 97       	sbiw	r24, 0x00	; 0
    17d6:	69 f7       	brne	.-38     	; 0x17b2 <CLCD_voidInit+0xa8>
    17d8:	14 c0       	rjmp	.+40     	; 0x1802 <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17da:	69 a9       	ldd	r22, Y+49	; 0x31
    17dc:	7a a9       	ldd	r23, Y+50	; 0x32
    17de:	8b a9       	ldd	r24, Y+51	; 0x33
    17e0:	9c a9       	ldd	r25, Y+52	; 0x34
    17e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17e6:	dc 01       	movw	r26, r24
    17e8:	cb 01       	movw	r24, r22
    17ea:	98 ab       	std	Y+48, r25	; 0x30
    17ec:	8f a7       	std	Y+47, r24	; 0x2f
    17ee:	8f a5       	ldd	r24, Y+47	; 0x2f
    17f0:	98 a9       	ldd	r25, Y+48	; 0x30
    17f2:	9c a7       	std	Y+44, r25	; 0x2c
    17f4:	8b a7       	std	Y+43, r24	; 0x2b
    17f6:	8b a5       	ldd	r24, Y+43	; 0x2b
    17f8:	9c a5       	ldd	r25, Y+44	; 0x2c
    17fa:	01 97       	sbiw	r24, 0x01	; 1
    17fc:	f1 f7       	brne	.-4      	; 0x17fa <CLCD_voidInit+0xf0>
    17fe:	9c a7       	std	Y+44, r25	; 0x2c
    1800:	8b a7       	std	Y+43, r24	; 0x2b
	CLCD_voidSendCommand(0b00000001);
#elif CLCD_CHIOCE_MODE==_4_BIT_MODE
	/*WAIT FOR MORE THEN 30 MS*/
	_delay_ms(40);
	/*function set command: Set Bit 5 */
	CLCD_voidSendCommand(0b00100000);
    1802:	80 e2       	ldi	r24, 0x20	; 32
    1804:	0e 94 02 08 	call	0x1004	; 0x1004 <CLCD_voidSendCommand>
	CLCD_voidSendCommand(0b00100000);
    1808:	80 e2       	ldi	r24, 0x20	; 32
    180a:	0e 94 02 08 	call	0x1004	; 0x1004 <CLCD_voidSendCommand>

	/*function set command:(7_Bit) N --> Lines,(6_Bit) F --> 5*8 font */
	CLCD_voidSendCommand(0b10000000);
    180e:	80 e8       	ldi	r24, 0x80	; 128
    1810:	0e 94 02 08 	call	0x1004	; 0x1004 <CLCD_voidSendCommand>
    1814:	80 e0       	ldi	r24, 0x00	; 0
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	a0 e8       	ldi	r26, 0x80	; 128
    181a:	bf e3       	ldi	r27, 0x3F	; 63
    181c:	8f a3       	std	Y+39, r24	; 0x27
    181e:	98 a7       	std	Y+40, r25	; 0x28
    1820:	a9 a7       	std	Y+41, r26	; 0x29
    1822:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1824:	6f a1       	ldd	r22, Y+39	; 0x27
    1826:	78 a5       	ldd	r23, Y+40	; 0x28
    1828:	89 a5       	ldd	r24, Y+41	; 0x29
    182a:	9a a5       	ldd	r25, Y+42	; 0x2a
    182c:	20 e0       	ldi	r18, 0x00	; 0
    182e:	30 e0       	ldi	r19, 0x00	; 0
    1830:	4a ef       	ldi	r20, 0xFA	; 250
    1832:	54 e4       	ldi	r21, 0x44	; 68
    1834:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1838:	dc 01       	movw	r26, r24
    183a:	cb 01       	movw	r24, r22
    183c:	8b a3       	std	Y+35, r24	; 0x23
    183e:	9c a3       	std	Y+36, r25	; 0x24
    1840:	ad a3       	std	Y+37, r26	; 0x25
    1842:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1844:	6b a1       	ldd	r22, Y+35	; 0x23
    1846:	7c a1       	ldd	r23, Y+36	; 0x24
    1848:	8d a1       	ldd	r24, Y+37	; 0x25
    184a:	9e a1       	ldd	r25, Y+38	; 0x26
    184c:	20 e0       	ldi	r18, 0x00	; 0
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	40 e8       	ldi	r20, 0x80	; 128
    1852:	5f e3       	ldi	r21, 0x3F	; 63
    1854:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1858:	88 23       	and	r24, r24
    185a:	2c f4       	brge	.+10     	; 0x1866 <CLCD_voidInit+0x15c>
		__ticks = 1;
    185c:	81 e0       	ldi	r24, 0x01	; 1
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	9a a3       	std	Y+34, r25	; 0x22
    1862:	89 a3       	std	Y+33, r24	; 0x21
    1864:	3f c0       	rjmp	.+126    	; 0x18e4 <CLCD_voidInit+0x1da>
	else if (__tmp > 65535)
    1866:	6b a1       	ldd	r22, Y+35	; 0x23
    1868:	7c a1       	ldd	r23, Y+36	; 0x24
    186a:	8d a1       	ldd	r24, Y+37	; 0x25
    186c:	9e a1       	ldd	r25, Y+38	; 0x26
    186e:	20 e0       	ldi	r18, 0x00	; 0
    1870:	3f ef       	ldi	r19, 0xFF	; 255
    1872:	4f e7       	ldi	r20, 0x7F	; 127
    1874:	57 e4       	ldi	r21, 0x47	; 71
    1876:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    187a:	18 16       	cp	r1, r24
    187c:	4c f5       	brge	.+82     	; 0x18d0 <CLCD_voidInit+0x1c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    187e:	6f a1       	ldd	r22, Y+39	; 0x27
    1880:	78 a5       	ldd	r23, Y+40	; 0x28
    1882:	89 a5       	ldd	r24, Y+41	; 0x29
    1884:	9a a5       	ldd	r25, Y+42	; 0x2a
    1886:	20 e0       	ldi	r18, 0x00	; 0
    1888:	30 e0       	ldi	r19, 0x00	; 0
    188a:	40 e2       	ldi	r20, 0x20	; 32
    188c:	51 e4       	ldi	r21, 0x41	; 65
    188e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1892:	dc 01       	movw	r26, r24
    1894:	cb 01       	movw	r24, r22
    1896:	bc 01       	movw	r22, r24
    1898:	cd 01       	movw	r24, r26
    189a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    189e:	dc 01       	movw	r26, r24
    18a0:	cb 01       	movw	r24, r22
    18a2:	9a a3       	std	Y+34, r25	; 0x22
    18a4:	89 a3       	std	Y+33, r24	; 0x21
    18a6:	0f c0       	rjmp	.+30     	; 0x18c6 <CLCD_voidInit+0x1bc>
    18a8:	88 ec       	ldi	r24, 0xC8	; 200
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	98 a3       	std	Y+32, r25	; 0x20
    18ae:	8f 8f       	std	Y+31, r24	; 0x1f
    18b0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    18b2:	98 a1       	ldd	r25, Y+32	; 0x20
    18b4:	01 97       	sbiw	r24, 0x01	; 1
    18b6:	f1 f7       	brne	.-4      	; 0x18b4 <CLCD_voidInit+0x1aa>
    18b8:	98 a3       	std	Y+32, r25	; 0x20
    18ba:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18bc:	89 a1       	ldd	r24, Y+33	; 0x21
    18be:	9a a1       	ldd	r25, Y+34	; 0x22
    18c0:	01 97       	sbiw	r24, 0x01	; 1
    18c2:	9a a3       	std	Y+34, r25	; 0x22
    18c4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18c6:	89 a1       	ldd	r24, Y+33	; 0x21
    18c8:	9a a1       	ldd	r25, Y+34	; 0x22
    18ca:	00 97       	sbiw	r24, 0x00	; 0
    18cc:	69 f7       	brne	.-38     	; 0x18a8 <CLCD_voidInit+0x19e>
    18ce:	14 c0       	rjmp	.+40     	; 0x18f8 <CLCD_voidInit+0x1ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18d0:	6b a1       	ldd	r22, Y+35	; 0x23
    18d2:	7c a1       	ldd	r23, Y+36	; 0x24
    18d4:	8d a1       	ldd	r24, Y+37	; 0x25
    18d6:	9e a1       	ldd	r25, Y+38	; 0x26
    18d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18dc:	dc 01       	movw	r26, r24
    18de:	cb 01       	movw	r24, r22
    18e0:	9a a3       	std	Y+34, r25	; 0x22
    18e2:	89 a3       	std	Y+33, r24	; 0x21
    18e4:	89 a1       	ldd	r24, Y+33	; 0x21
    18e6:	9a a1       	ldd	r25, Y+34	; 0x22
    18e8:	9e 8f       	std	Y+30, r25	; 0x1e
    18ea:	8d 8f       	std	Y+29, r24	; 0x1d
    18ec:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18ee:	9e 8d       	ldd	r25, Y+30	; 0x1e
    18f0:	01 97       	sbiw	r24, 0x01	; 1
    18f2:	f1 f7       	brne	.-4      	; 0x18f0 <CLCD_voidInit+0x1e6>
    18f4:	9e 8f       	std	Y+30, r25	; 0x1e
    18f6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	CLCD_voidSendCommand(0b0000);
    18f8:	80 e0       	ldi	r24, 0x00	; 0
    18fa:	0e 94 02 08 	call	0x1004	; 0x1004 <CLCD_voidSendCommand>
	/*Display No/00f ctrl  */
	/*Set Bit 7 ,(6_Bit) D --> display enable ,C --> disable cursor ,B --> no blink cursor*/
	CLCD_voidSendCommand(0b011000000);
    18fe:	80 ec       	ldi	r24, 0xC0	; 192
    1900:	0e 94 02 08 	call	0x1004	; 0x1004 <CLCD_voidSendCommand>
    1904:	80 e0       	ldi	r24, 0x00	; 0
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	a0 e8       	ldi	r26, 0x80	; 128
    190a:	bf e3       	ldi	r27, 0x3F	; 63
    190c:	89 8f       	std	Y+25, r24	; 0x19
    190e:	9a 8f       	std	Y+26, r25	; 0x1a
    1910:	ab 8f       	std	Y+27, r26	; 0x1b
    1912:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1914:	69 8d       	ldd	r22, Y+25	; 0x19
    1916:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1918:	8b 8d       	ldd	r24, Y+27	; 0x1b
    191a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    191c:	20 e0       	ldi	r18, 0x00	; 0
    191e:	30 e0       	ldi	r19, 0x00	; 0
    1920:	4a ef       	ldi	r20, 0xFA	; 250
    1922:	54 e4       	ldi	r21, 0x44	; 68
    1924:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1928:	dc 01       	movw	r26, r24
    192a:	cb 01       	movw	r24, r22
    192c:	8d 8b       	std	Y+21, r24	; 0x15
    192e:	9e 8b       	std	Y+22, r25	; 0x16
    1930:	af 8b       	std	Y+23, r26	; 0x17
    1932:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1934:	6d 89       	ldd	r22, Y+21	; 0x15
    1936:	7e 89       	ldd	r23, Y+22	; 0x16
    1938:	8f 89       	ldd	r24, Y+23	; 0x17
    193a:	98 8d       	ldd	r25, Y+24	; 0x18
    193c:	20 e0       	ldi	r18, 0x00	; 0
    193e:	30 e0       	ldi	r19, 0x00	; 0
    1940:	40 e8       	ldi	r20, 0x80	; 128
    1942:	5f e3       	ldi	r21, 0x3F	; 63
    1944:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1948:	88 23       	and	r24, r24
    194a:	2c f4       	brge	.+10     	; 0x1956 <CLCD_voidInit+0x24c>
		__ticks = 1;
    194c:	81 e0       	ldi	r24, 0x01	; 1
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	9c 8b       	std	Y+20, r25	; 0x14
    1952:	8b 8b       	std	Y+19, r24	; 0x13
    1954:	3f c0       	rjmp	.+126    	; 0x19d4 <CLCD_voidInit+0x2ca>
	else if (__tmp > 65535)
    1956:	6d 89       	ldd	r22, Y+21	; 0x15
    1958:	7e 89       	ldd	r23, Y+22	; 0x16
    195a:	8f 89       	ldd	r24, Y+23	; 0x17
    195c:	98 8d       	ldd	r25, Y+24	; 0x18
    195e:	20 e0       	ldi	r18, 0x00	; 0
    1960:	3f ef       	ldi	r19, 0xFF	; 255
    1962:	4f e7       	ldi	r20, 0x7F	; 127
    1964:	57 e4       	ldi	r21, 0x47	; 71
    1966:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    196a:	18 16       	cp	r1, r24
    196c:	4c f5       	brge	.+82     	; 0x19c0 <CLCD_voidInit+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    196e:	69 8d       	ldd	r22, Y+25	; 0x19
    1970:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1972:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1974:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1976:	20 e0       	ldi	r18, 0x00	; 0
    1978:	30 e0       	ldi	r19, 0x00	; 0
    197a:	40 e2       	ldi	r20, 0x20	; 32
    197c:	51 e4       	ldi	r21, 0x41	; 65
    197e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1982:	dc 01       	movw	r26, r24
    1984:	cb 01       	movw	r24, r22
    1986:	bc 01       	movw	r22, r24
    1988:	cd 01       	movw	r24, r26
    198a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    198e:	dc 01       	movw	r26, r24
    1990:	cb 01       	movw	r24, r22
    1992:	9c 8b       	std	Y+20, r25	; 0x14
    1994:	8b 8b       	std	Y+19, r24	; 0x13
    1996:	0f c0       	rjmp	.+30     	; 0x19b6 <CLCD_voidInit+0x2ac>
    1998:	88 ec       	ldi	r24, 0xC8	; 200
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	9a 8b       	std	Y+18, r25	; 0x12
    199e:	89 8b       	std	Y+17, r24	; 0x11
    19a0:	89 89       	ldd	r24, Y+17	; 0x11
    19a2:	9a 89       	ldd	r25, Y+18	; 0x12
    19a4:	01 97       	sbiw	r24, 0x01	; 1
    19a6:	f1 f7       	brne	.-4      	; 0x19a4 <CLCD_voidInit+0x29a>
    19a8:	9a 8b       	std	Y+18, r25	; 0x12
    19aa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19ac:	8b 89       	ldd	r24, Y+19	; 0x13
    19ae:	9c 89       	ldd	r25, Y+20	; 0x14
    19b0:	01 97       	sbiw	r24, 0x01	; 1
    19b2:	9c 8b       	std	Y+20, r25	; 0x14
    19b4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19b6:	8b 89       	ldd	r24, Y+19	; 0x13
    19b8:	9c 89       	ldd	r25, Y+20	; 0x14
    19ba:	00 97       	sbiw	r24, 0x00	; 0
    19bc:	69 f7       	brne	.-38     	; 0x1998 <CLCD_voidInit+0x28e>
    19be:	14 c0       	rjmp	.+40     	; 0x19e8 <CLCD_voidInit+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19c0:	6d 89       	ldd	r22, Y+21	; 0x15
    19c2:	7e 89       	ldd	r23, Y+22	; 0x16
    19c4:	8f 89       	ldd	r24, Y+23	; 0x17
    19c6:	98 8d       	ldd	r25, Y+24	; 0x18
    19c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19cc:	dc 01       	movw	r26, r24
    19ce:	cb 01       	movw	r24, r22
    19d0:	9c 8b       	std	Y+20, r25	; 0x14
    19d2:	8b 8b       	std	Y+19, r24	; 0x13
    19d4:	8b 89       	ldd	r24, Y+19	; 0x13
    19d6:	9c 89       	ldd	r25, Y+20	; 0x14
    19d8:	98 8b       	std	Y+16, r25	; 0x10
    19da:	8f 87       	std	Y+15, r24	; 0x0f
    19dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    19de:	98 89       	ldd	r25, Y+16	; 0x10
    19e0:	01 97       	sbiw	r24, 0x01	; 1
    19e2:	f1 f7       	brne	.-4      	; 0x19e0 <CLCD_voidInit+0x2d6>
    19e4:	98 8b       	std	Y+16, r25	; 0x10
    19e6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	CLCD_voidSendCommand(0b0000);
    19e8:	80 e0       	ldi	r24, 0x00	; 0
    19ea:	0e 94 02 08 	call	0x1004	; 0x1004 <CLCD_voidSendCommand>
	/*Display Clear */
	CLCD_voidSendCommand(0b00010000);
    19ee:	80 e1       	ldi	r24, 0x10	; 16
    19f0:	0e 94 02 08 	call	0x1004	; 0x1004 <CLCD_voidSendCommand>
    19f4:	80 e0       	ldi	r24, 0x00	; 0
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	a0 e0       	ldi	r26, 0x00	; 0
    19fa:	b0 e4       	ldi	r27, 0x40	; 64
    19fc:	8b 87       	std	Y+11, r24	; 0x0b
    19fe:	9c 87       	std	Y+12, r25	; 0x0c
    1a00:	ad 87       	std	Y+13, r26	; 0x0d
    1a02:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a04:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a06:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a08:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a0a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a0c:	20 e0       	ldi	r18, 0x00	; 0
    1a0e:	30 e0       	ldi	r19, 0x00	; 0
    1a10:	4a ef       	ldi	r20, 0xFA	; 250
    1a12:	54 e4       	ldi	r21, 0x44	; 68
    1a14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a18:	dc 01       	movw	r26, r24
    1a1a:	cb 01       	movw	r24, r22
    1a1c:	8f 83       	std	Y+7, r24	; 0x07
    1a1e:	98 87       	std	Y+8, r25	; 0x08
    1a20:	a9 87       	std	Y+9, r26	; 0x09
    1a22:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a24:	6f 81       	ldd	r22, Y+7	; 0x07
    1a26:	78 85       	ldd	r23, Y+8	; 0x08
    1a28:	89 85       	ldd	r24, Y+9	; 0x09
    1a2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a2c:	20 e0       	ldi	r18, 0x00	; 0
    1a2e:	30 e0       	ldi	r19, 0x00	; 0
    1a30:	40 e8       	ldi	r20, 0x80	; 128
    1a32:	5f e3       	ldi	r21, 0x3F	; 63
    1a34:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a38:	88 23       	and	r24, r24
    1a3a:	2c f4       	brge	.+10     	; 0x1a46 <CLCD_voidInit+0x33c>
		__ticks = 1;
    1a3c:	81 e0       	ldi	r24, 0x01	; 1
    1a3e:	90 e0       	ldi	r25, 0x00	; 0
    1a40:	9e 83       	std	Y+6, r25	; 0x06
    1a42:	8d 83       	std	Y+5, r24	; 0x05
    1a44:	3f c0       	rjmp	.+126    	; 0x1ac4 <CLCD_voidInit+0x3ba>
	else if (__tmp > 65535)
    1a46:	6f 81       	ldd	r22, Y+7	; 0x07
    1a48:	78 85       	ldd	r23, Y+8	; 0x08
    1a4a:	89 85       	ldd	r24, Y+9	; 0x09
    1a4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a4e:	20 e0       	ldi	r18, 0x00	; 0
    1a50:	3f ef       	ldi	r19, 0xFF	; 255
    1a52:	4f e7       	ldi	r20, 0x7F	; 127
    1a54:	57 e4       	ldi	r21, 0x47	; 71
    1a56:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a5a:	18 16       	cp	r1, r24
    1a5c:	4c f5       	brge	.+82     	; 0x1ab0 <CLCD_voidInit+0x3a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a5e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a60:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a62:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a64:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a66:	20 e0       	ldi	r18, 0x00	; 0
    1a68:	30 e0       	ldi	r19, 0x00	; 0
    1a6a:	40 e2       	ldi	r20, 0x20	; 32
    1a6c:	51 e4       	ldi	r21, 0x41	; 65
    1a6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a72:	dc 01       	movw	r26, r24
    1a74:	cb 01       	movw	r24, r22
    1a76:	bc 01       	movw	r22, r24
    1a78:	cd 01       	movw	r24, r26
    1a7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a7e:	dc 01       	movw	r26, r24
    1a80:	cb 01       	movw	r24, r22
    1a82:	9e 83       	std	Y+6, r25	; 0x06
    1a84:	8d 83       	std	Y+5, r24	; 0x05
    1a86:	0f c0       	rjmp	.+30     	; 0x1aa6 <CLCD_voidInit+0x39c>
    1a88:	88 ec       	ldi	r24, 0xC8	; 200
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	9c 83       	std	Y+4, r25	; 0x04
    1a8e:	8b 83       	std	Y+3, r24	; 0x03
    1a90:	8b 81       	ldd	r24, Y+3	; 0x03
    1a92:	9c 81       	ldd	r25, Y+4	; 0x04
    1a94:	01 97       	sbiw	r24, 0x01	; 1
    1a96:	f1 f7       	brne	.-4      	; 0x1a94 <CLCD_voidInit+0x38a>
    1a98:	9c 83       	std	Y+4, r25	; 0x04
    1a9a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a9c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a9e:	9e 81       	ldd	r25, Y+6	; 0x06
    1aa0:	01 97       	sbiw	r24, 0x01	; 1
    1aa2:	9e 83       	std	Y+6, r25	; 0x06
    1aa4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aa6:	8d 81       	ldd	r24, Y+5	; 0x05
    1aa8:	9e 81       	ldd	r25, Y+6	; 0x06
    1aaa:	00 97       	sbiw	r24, 0x00	; 0
    1aac:	69 f7       	brne	.-38     	; 0x1a88 <CLCD_voidInit+0x37e>
    1aae:	14 c0       	rjmp	.+40     	; 0x1ad8 <CLCD_voidInit+0x3ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ab0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ab2:	78 85       	ldd	r23, Y+8	; 0x08
    1ab4:	89 85       	ldd	r24, Y+9	; 0x09
    1ab6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ab8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1abc:	dc 01       	movw	r26, r24
    1abe:	cb 01       	movw	r24, r22
    1ac0:	9e 83       	std	Y+6, r25	; 0x06
    1ac2:	8d 83       	std	Y+5, r24	; 0x05
    1ac4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ac6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ac8:	9a 83       	std	Y+2, r25	; 0x02
    1aca:	89 83       	std	Y+1, r24	; 0x01
    1acc:	89 81       	ldd	r24, Y+1	; 0x01
    1ace:	9a 81       	ldd	r25, Y+2	; 0x02
    1ad0:	01 97       	sbiw	r24, 0x01	; 1
    1ad2:	f1 f7       	brne	.-4      	; 0x1ad0 <CLCD_voidInit+0x3c6>
    1ad4:	9a 83       	std	Y+2, r25	; 0x02
    1ad6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

	iniIsFinich=1;
    1ad8:	81 e0       	ldi	r24, 0x01	; 1
    1ada:	80 93 05 01 	sts	0x0105, r24
#else
#error "In correct cconfigrtion of LCD_MODE"
#endif
}
    1ade:	e8 96       	adiw	r28, 0x38	; 56
    1ae0:	0f b6       	in	r0, 0x3f	; 63
    1ae2:	f8 94       	cli
    1ae4:	de bf       	out	0x3e, r29	; 62
    1ae6:	0f be       	out	0x3f, r0	; 63
    1ae8:	cd bf       	out	0x3d, r28	; 61
    1aea:	cf 91       	pop	r28
    1aec:	df 91       	pop	r29
    1aee:	08 95       	ret

00001af0 <CLCD_voidSendString>:
void CLCD_voidSendString(const char* Copy_pcString)//char ASCII Value Constant not allow the func to change the sent string
{
    1af0:	df 93       	push	r29
    1af2:	cf 93       	push	r28
    1af4:	00 d0       	rcall	.+0      	; 0x1af6 <CLCD_voidSendString+0x6>
    1af6:	0f 92       	push	r0
    1af8:	cd b7       	in	r28, 0x3d	; 61
    1afa:	de b7       	in	r29, 0x3e	; 62
    1afc:	9b 83       	std	Y+3, r25	; 0x03
    1afe:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8cnt=0;
    1b00:	19 82       	std	Y+1, r1	; 0x01
    1b02:	0e c0       	rjmp	.+28     	; 0x1b20 <CLCD_voidSendString+0x30>
	while(Copy_pcString[Local_u8cnt]!='\0')
	{
		CLCD_voidSendData(Copy_pcString[Local_u8cnt]);
    1b04:	89 81       	ldd	r24, Y+1	; 0x01
    1b06:	28 2f       	mov	r18, r24
    1b08:	30 e0       	ldi	r19, 0x00	; 0
    1b0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b0c:	9b 81       	ldd	r25, Y+3	; 0x03
    1b0e:	fc 01       	movw	r30, r24
    1b10:	e2 0f       	add	r30, r18
    1b12:	f3 1f       	adc	r31, r19
    1b14:	80 81       	ld	r24, Z
    1b16:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <CLCD_voidSendData>
		Local_u8cnt++;
    1b1a:	89 81       	ldd	r24, Y+1	; 0x01
    1b1c:	8f 5f       	subi	r24, 0xFF	; 255
    1b1e:	89 83       	std	Y+1, r24	; 0x01
#endif
}
void CLCD_voidSendString(const char* Copy_pcString)//char ASCII Value Constant not allow the func to change the sent string
{
	u8 Local_u8cnt=0;
	while(Copy_pcString[Local_u8cnt]!='\0')
    1b20:	89 81       	ldd	r24, Y+1	; 0x01
    1b22:	28 2f       	mov	r18, r24
    1b24:	30 e0       	ldi	r19, 0x00	; 0
    1b26:	8a 81       	ldd	r24, Y+2	; 0x02
    1b28:	9b 81       	ldd	r25, Y+3	; 0x03
    1b2a:	fc 01       	movw	r30, r24
    1b2c:	e2 0f       	add	r30, r18
    1b2e:	f3 1f       	adc	r31, r19
    1b30:	80 81       	ld	r24, Z
    1b32:	88 23       	and	r24, r24
    1b34:	39 f7       	brne	.-50     	; 0x1b04 <CLCD_voidSendString+0x14>
	{
		CLCD_voidSendData(Copy_pcString[Local_u8cnt]);
		Local_u8cnt++;
	}
}
    1b36:	0f 90       	pop	r0
    1b38:	0f 90       	pop	r0
    1b3a:	0f 90       	pop	r0
    1b3c:	cf 91       	pop	r28
    1b3e:	df 91       	pop	r29
    1b40:	08 95       	ret

00001b42 <CLCD_voidGoToXY>:

void CLCD_voidGoToXY(u8 Copy_u8XPos,u8 Copy_u8YPos)
{
    1b42:	df 93       	push	r29
    1b44:	cf 93       	push	r28
    1b46:	00 d0       	rcall	.+0      	; 0x1b48 <CLCD_voidGoToXY+0x6>
    1b48:	0f 92       	push	r0
    1b4a:	cd b7       	in	r28, 0x3d	; 61
    1b4c:	de b7       	in	r29, 0x3e	; 62
    1b4e:	8a 83       	std	Y+2, r24	; 0x02
    1b50:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Address;
	if(Copy_u8XPos==0)
    1b52:	8a 81       	ldd	r24, Y+2	; 0x02
    1b54:	88 23       	and	r24, r24
    1b56:	51 f4       	brne	.+20     	; 0x1b6c <CLCD_voidGoToXY+0x2a>
	{
		if (Copy_u8YPos > 15) {
    1b58:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5a:	80 31       	cpi	r24, 0x10	; 16
    1b5c:	20 f0       	brcs	.+8      	; 0x1b66 <CLCD_voidGoToXY+0x24>
			Local_u8Address = 0x40 + Copy_u8YPos;
    1b5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b60:	80 5c       	subi	r24, 0xC0	; 192
    1b62:	89 83       	std	Y+1, r24	; 0x01
    1b64:	09 c0       	rjmp	.+18     	; 0x1b78 <CLCD_voidGoToXY+0x36>
		} else {
			Local_u8Address = Copy_u8YPos;
    1b66:	8b 81       	ldd	r24, Y+3	; 0x03
    1b68:	89 83       	std	Y+1, r24	; 0x01
    1b6a:	06 c0       	rjmp	.+12     	; 0x1b78 <CLCD_voidGoToXY+0x36>
		}
	}
	else if(Copy_u8XPos==1)
    1b6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6e:	81 30       	cpi	r24, 0x01	; 1
    1b70:	19 f4       	brne	.+6      	; 0x1b78 <CLCD_voidGoToXY+0x36>
	{
		Local_u8Address=0x40+Copy_u8YPos;
    1b72:	8b 81       	ldd	r24, Y+3	; 0x03
    1b74:	80 5c       	subi	r24, 0xC0	; 192
    1b76:	89 83       	std	Y+1, r24	; 0x01
	}
	//put command from data sheet
	CLCD_voidSendCommand(Local_u8Address+128);
    1b78:	89 81       	ldd	r24, Y+1	; 0x01
    1b7a:	80 58       	subi	r24, 0x80	; 128
    1b7c:	0e 94 02 08 	call	0x1004	; 0x1004 <CLCD_voidSendCommand>
}
    1b80:	0f 90       	pop	r0
    1b82:	0f 90       	pop	r0
    1b84:	0f 90       	pop	r0
    1b86:	cf 91       	pop	r28
    1b88:	df 91       	pop	r29
    1b8a:	08 95       	ret

00001b8c <CLCD_voidWriteSpecialCharacter>:

void CLCD_voidWriteSpecialCharacter(u8* Copy_pu8Pattern, u8 Copy_u8PatternNmber,u8 Copy_u8XPos,u8 Copy_u8Ypos)
{
    1b8c:	df 93       	push	r29
    1b8e:	cf 93       	push	r28
    1b90:	cd b7       	in	r28, 0x3d	; 61
    1b92:	de b7       	in	r29, 0x3e	; 62
    1b94:	27 97       	sbiw	r28, 0x07	; 7
    1b96:	0f b6       	in	r0, 0x3f	; 63
    1b98:	f8 94       	cli
    1b9a:	de bf       	out	0x3e, r29	; 62
    1b9c:	0f be       	out	0x3f, r0	; 63
    1b9e:	cd bf       	out	0x3d, r28	; 61
    1ba0:	9c 83       	std	Y+4, r25	; 0x04
    1ba2:	8b 83       	std	Y+3, r24	; 0x03
    1ba4:	6d 83       	std	Y+5, r22	; 0x05
    1ba6:	4e 83       	std	Y+6, r20	; 0x06
    1ba8:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8CGRAMAddress=0;
    1baa:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8iterator;
	/*Calculate the CGRAM address whose each block is 8 bytes */
	Local_u8CGRAMAddress= Copy_u8PatternNmber*8;
    1bac:	8d 81       	ldd	r24, Y+5	; 0x05
    1bae:	88 2f       	mov	r24, r24
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	88 0f       	add	r24, r24
    1bb4:	99 1f       	adc	r25, r25
    1bb6:	88 0f       	add	r24, r24
    1bb8:	99 1f       	adc	r25, r25
    1bba:	88 0f       	add	r24, r24
    1bbc:	99 1f       	adc	r25, r25
    1bbe:	8a 83       	std	Y+2, r24	; 0x02

	/*Send CGRAM address command to LCD, with setting bit 6 , clear bit 7 */
	CLCD_voidSendCommand(Local_u8CGRAMAddress+64);
    1bc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc2:	80 5c       	subi	r24, 0xC0	; 192
    1bc4:	0e 94 02 08 	call	0x1004	; 0x1004 <CLCD_voidSendCommand>

	/*Write the pattern into CGRAM */
	for(Local_u8iterator=0;Local_u8iterator<8;Local_u8iterator++)
    1bc8:	19 82       	std	Y+1, r1	; 0x01
    1bca:	0e c0       	rjmp	.+28     	; 0x1be8 <CLCD_voidWriteSpecialCharacter+0x5c>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8iterator]);
    1bcc:	89 81       	ldd	r24, Y+1	; 0x01
    1bce:	28 2f       	mov	r18, r24
    1bd0:	30 e0       	ldi	r19, 0x00	; 0
    1bd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd4:	9c 81       	ldd	r25, Y+4	; 0x04
    1bd6:	fc 01       	movw	r30, r24
    1bd8:	e2 0f       	add	r30, r18
    1bda:	f3 1f       	adc	r31, r19
    1bdc:	80 81       	ld	r24, Z
    1bde:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <CLCD_voidSendData>

	/*Send CGRAM address command to LCD, with setting bit 6 , clear bit 7 */
	CLCD_voidSendCommand(Local_u8CGRAMAddress+64);

	/*Write the pattern into CGRAM */
	for(Local_u8iterator=0;Local_u8iterator<8;Local_u8iterator++)
    1be2:	89 81       	ldd	r24, Y+1	; 0x01
    1be4:	8f 5f       	subi	r24, 0xFF	; 255
    1be6:	89 83       	std	Y+1, r24	; 0x01
    1be8:	89 81       	ldd	r24, Y+1	; 0x01
    1bea:	88 30       	cpi	r24, 0x08	; 8
    1bec:	78 f3       	brcs	.-34     	; 0x1bcc <CLCD_voidWriteSpecialCharacter+0x40>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8iterator]);
	}
	/* Go back to DDRAM to display the pattern */
	CLCD_voidGoToXY(Copy_u8XPos,Copy_u8Ypos);
    1bee:	8e 81       	ldd	r24, Y+6	; 0x06
    1bf0:	6f 81       	ldd	r22, Y+7	; 0x07
    1bf2:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <CLCD_voidGoToXY>

	/* Display the pattern written  in the CGRAM */
	CLCD_voidSendData(Copy_u8PatternNmber);
    1bf6:	8d 81       	ldd	r24, Y+5	; 0x05
    1bf8:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <CLCD_voidSendData>

}
    1bfc:	27 96       	adiw	r28, 0x07	; 7
    1bfe:	0f b6       	in	r0, 0x3f	; 63
    1c00:	f8 94       	cli
    1c02:	de bf       	out	0x3e, r29	; 62
    1c04:	0f be       	out	0x3f, r0	; 63
    1c06:	cd bf       	out	0x3d, r28	; 61
    1c08:	cf 91       	pop	r28
    1c0a:	df 91       	pop	r29
    1c0c:	08 95       	ret

00001c0e <CLCD_voidWriteNumber>:

void CLCD_voidWriteNumber(u16 Copy_u16Number)
{
    1c0e:	df 93       	push	r29
    1c10:	cf 93       	push	r28
    1c12:	00 d0       	rcall	.+0      	; 0x1c14 <CLCD_voidWriteNumber+0x6>
    1c14:	00 d0       	rcall	.+0      	; 0x1c16 <CLCD_voidWriteNumber+0x8>
    1c16:	cd b7       	in	r28, 0x3d	; 61
    1c18:	de b7       	in	r29, 0x3e	; 62
    1c1a:	9c 83       	std	Y+4, r25	; 0x04
    1c1c:	8b 83       	std	Y+3, r24	; 0x03

	u8 Max_Digits = Num_length(Copy_u16Number);
    1c1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c20:	9c 81       	ldd	r25, Y+4	; 0x04
    1c22:	0e 94 ac 11 	call	0x2358	; 0x2358 <Num_length>
    1c26:	8a 83       	std	Y+2, r24	; 0x02
	for (s8 i = Max_Digits; i > 0; i--) {
    1c28:	8a 81       	ldd	r24, Y+2	; 0x02
    1c2a:	89 83       	std	Y+1, r24	; 0x01
    1c2c:	1d c0       	rjmp	.+58     	; 0x1c68 <CLCD_voidWriteNumber+0x5a>
		CLCD_voidSendData((Copy_u16Number / Multi_N_10(i - 1)) + '0');
    1c2e:	89 81       	ldd	r24, Y+1	; 0x01
    1c30:	81 50       	subi	r24, 0x01	; 1
    1c32:	0e 94 ce 11 	call	0x239c	; 0x239c <Multi_N_10>
    1c36:	9c 01       	movw	r18, r24
    1c38:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c3c:	b9 01       	movw	r22, r18
    1c3e:	0e 94 2d 20 	call	0x405a	; 0x405a <__udivmodhi4>
    1c42:	cb 01       	movw	r24, r22
    1c44:	80 5d       	subi	r24, 0xD0	; 208
    1c46:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <CLCD_voidSendData>
		Copy_u16Number = (Copy_u16Number % Multi_N_10(i - 1));
    1c4a:	89 81       	ldd	r24, Y+1	; 0x01
    1c4c:	81 50       	subi	r24, 0x01	; 1
    1c4e:	0e 94 ce 11 	call	0x239c	; 0x239c <Multi_N_10>
    1c52:	9c 01       	movw	r18, r24
    1c54:	8b 81       	ldd	r24, Y+3	; 0x03
    1c56:	9c 81       	ldd	r25, Y+4	; 0x04
    1c58:	b9 01       	movw	r22, r18
    1c5a:	0e 94 2d 20 	call	0x405a	; 0x405a <__udivmodhi4>
    1c5e:	9c 83       	std	Y+4, r25	; 0x04
    1c60:	8b 83       	std	Y+3, r24	; 0x03

void CLCD_voidWriteNumber(u16 Copy_u16Number)
{

	u8 Max_Digits = Num_length(Copy_u16Number);
	for (s8 i = Max_Digits; i > 0; i--) {
    1c62:	89 81       	ldd	r24, Y+1	; 0x01
    1c64:	81 50       	subi	r24, 0x01	; 1
    1c66:	89 83       	std	Y+1, r24	; 0x01
    1c68:	89 81       	ldd	r24, Y+1	; 0x01
    1c6a:	18 16       	cp	r1, r24
    1c6c:	04 f3       	brlt	.-64     	; 0x1c2e <CLCD_voidWriteNumber+0x20>
		CLCD_voidSendData((Copy_u16Number / Multi_N_10(i - 1)) + '0');
		Copy_u16Number = (Copy_u16Number % Multi_N_10(i - 1));
	}
}
    1c6e:	0f 90       	pop	r0
    1c70:	0f 90       	pop	r0
    1c72:	0f 90       	pop	r0
    1c74:	0f 90       	pop	r0
    1c76:	cf 91       	pop	r28
    1c78:	df 91       	pop	r29
    1c7a:	08 95       	ret

00001c7c <DIO_u8SetPinValue>:
#include "DIO_interface.h"



u8 DIO_u8SetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Value)
{
    1c7c:	df 93       	push	r29
    1c7e:	cf 93       	push	r28
    1c80:	cd b7       	in	r28, 0x3d	; 61
    1c82:	de b7       	in	r29, 0x3e	; 62
    1c84:	28 97       	sbiw	r28, 0x08	; 8
    1c86:	0f b6       	in	r0, 0x3f	; 63
    1c88:	f8 94       	cli
    1c8a:	de bf       	out	0x3e, r29	; 62
    1c8c:	0f be       	out	0x3f, r0	; 63
    1c8e:	cd bf       	out	0x3d, r28	; 61
    1c90:	8a 83       	std	Y+2, r24	; 0x02
    1c92:	6b 83       	std	Y+3, r22	; 0x03
    1c94:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    1c96:	19 82       	std	Y+1, r1	; 0x01
	if(DIO_PIN_HIGH==Copy_u8Value)
    1c98:	8c 81       	ldd	r24, Y+4	; 0x04
    1c9a:	81 30       	cpi	r24, 0x01	; 1
    1c9c:	09 f0       	breq	.+2      	; 0x1ca0 <DIO_u8SetPinValue+0x24>
    1c9e:	75 c0       	rjmp	.+234    	; 0x1d8a <DIO_u8SetPinValue+0x10e>
	{
		if((0<=Copy_u8Pin)&&(Copy_u8Pin<=7))
    1ca0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca2:	88 30       	cpi	r24, 0x08	; 8
    1ca4:	08 f0       	brcs	.+2      	; 0x1ca8 <DIO_u8SetPinValue+0x2c>
    1ca6:	6e c0       	rjmp	.+220    	; 0x1d84 <DIO_u8SetPinValue+0x108>
		{
			switch(Copy_u8Port)
    1ca8:	8a 81       	ldd	r24, Y+2	; 0x02
    1caa:	28 2f       	mov	r18, r24
    1cac:	30 e0       	ldi	r19, 0x00	; 0
    1cae:	38 87       	std	Y+8, r19	; 0x08
    1cb0:	2f 83       	std	Y+7, r18	; 0x07
    1cb2:	8f 81       	ldd	r24, Y+7	; 0x07
    1cb4:	98 85       	ldd	r25, Y+8	; 0x08
    1cb6:	81 30       	cpi	r24, 0x01	; 1
    1cb8:	91 05       	cpc	r25, r1
    1cba:	41 f1       	breq	.+80     	; 0x1d0c <DIO_u8SetPinValue+0x90>
    1cbc:	2f 81       	ldd	r18, Y+7	; 0x07
    1cbe:	38 85       	ldd	r19, Y+8	; 0x08
    1cc0:	22 30       	cpi	r18, 0x02	; 2
    1cc2:	31 05       	cpc	r19, r1
    1cc4:	2c f4       	brge	.+10     	; 0x1cd0 <DIO_u8SetPinValue+0x54>
    1cc6:	8f 81       	ldd	r24, Y+7	; 0x07
    1cc8:	98 85       	ldd	r25, Y+8	; 0x08
    1cca:	00 97       	sbiw	r24, 0x00	; 0
    1ccc:	61 f0       	breq	.+24     	; 0x1ce6 <DIO_u8SetPinValue+0x6a>
    1cce:	57 c0       	rjmp	.+174    	; 0x1d7e <DIO_u8SetPinValue+0x102>
    1cd0:	2f 81       	ldd	r18, Y+7	; 0x07
    1cd2:	38 85       	ldd	r19, Y+8	; 0x08
    1cd4:	22 30       	cpi	r18, 0x02	; 2
    1cd6:	31 05       	cpc	r19, r1
    1cd8:	61 f1       	breq	.+88     	; 0x1d32 <DIO_u8SetPinValue+0xb6>
    1cda:	8f 81       	ldd	r24, Y+7	; 0x07
    1cdc:	98 85       	ldd	r25, Y+8	; 0x08
    1cde:	83 30       	cpi	r24, 0x03	; 3
    1ce0:	91 05       	cpc	r25, r1
    1ce2:	d1 f1       	breq	.+116    	; 0x1d58 <DIO_u8SetPinValue+0xdc>
    1ce4:	4c c0       	rjmp	.+152    	; 0x1d7e <DIO_u8SetPinValue+0x102>
			{
				case DIO_PORTA:SET_BIT(PORTA,Copy_u8Pin);break;
    1ce6:	ab e3       	ldi	r26, 0x3B	; 59
    1ce8:	b0 e0       	ldi	r27, 0x00	; 0
    1cea:	eb e3       	ldi	r30, 0x3B	; 59
    1cec:	f0 e0       	ldi	r31, 0x00	; 0
    1cee:	40 81       	ld	r20, Z
    1cf0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf2:	28 2f       	mov	r18, r24
    1cf4:	30 e0       	ldi	r19, 0x00	; 0
    1cf6:	81 e0       	ldi	r24, 0x01	; 1
    1cf8:	90 e0       	ldi	r25, 0x00	; 0
    1cfa:	02 2e       	mov	r0, r18
    1cfc:	02 c0       	rjmp	.+4      	; 0x1d02 <DIO_u8SetPinValue+0x86>
    1cfe:	88 0f       	add	r24, r24
    1d00:	99 1f       	adc	r25, r25
    1d02:	0a 94       	dec	r0
    1d04:	e2 f7       	brpl	.-8      	; 0x1cfe <DIO_u8SetPinValue+0x82>
    1d06:	84 0f       	add	r24, r20
    1d08:	8c 93       	st	X, r24
    1d0a:	c3 c0       	rjmp	.+390    	; 0x1e92 <DIO_u8SetPinValue+0x216>
				case DIO_PORTB:SET_BIT(PORTB,Copy_u8Pin);break;
    1d0c:	a8 e3       	ldi	r26, 0x38	; 56
    1d0e:	b0 e0       	ldi	r27, 0x00	; 0
    1d10:	e8 e3       	ldi	r30, 0x38	; 56
    1d12:	f0 e0       	ldi	r31, 0x00	; 0
    1d14:	40 81       	ld	r20, Z
    1d16:	8b 81       	ldd	r24, Y+3	; 0x03
    1d18:	28 2f       	mov	r18, r24
    1d1a:	30 e0       	ldi	r19, 0x00	; 0
    1d1c:	81 e0       	ldi	r24, 0x01	; 1
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	02 2e       	mov	r0, r18
    1d22:	02 c0       	rjmp	.+4      	; 0x1d28 <DIO_u8SetPinValue+0xac>
    1d24:	88 0f       	add	r24, r24
    1d26:	99 1f       	adc	r25, r25
    1d28:	0a 94       	dec	r0
    1d2a:	e2 f7       	brpl	.-8      	; 0x1d24 <DIO_u8SetPinValue+0xa8>
    1d2c:	84 0f       	add	r24, r20
    1d2e:	8c 93       	st	X, r24
    1d30:	b0 c0       	rjmp	.+352    	; 0x1e92 <DIO_u8SetPinValue+0x216>
				case DIO_PORTC:SET_BIT(PORTC,Copy_u8Pin);break;
    1d32:	a5 e3       	ldi	r26, 0x35	; 53
    1d34:	b0 e0       	ldi	r27, 0x00	; 0
    1d36:	e5 e3       	ldi	r30, 0x35	; 53
    1d38:	f0 e0       	ldi	r31, 0x00	; 0
    1d3a:	40 81       	ld	r20, Z
    1d3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d3e:	28 2f       	mov	r18, r24
    1d40:	30 e0       	ldi	r19, 0x00	; 0
    1d42:	81 e0       	ldi	r24, 0x01	; 1
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	02 2e       	mov	r0, r18
    1d48:	02 c0       	rjmp	.+4      	; 0x1d4e <DIO_u8SetPinValue+0xd2>
    1d4a:	88 0f       	add	r24, r24
    1d4c:	99 1f       	adc	r25, r25
    1d4e:	0a 94       	dec	r0
    1d50:	e2 f7       	brpl	.-8      	; 0x1d4a <DIO_u8SetPinValue+0xce>
    1d52:	84 0f       	add	r24, r20
    1d54:	8c 93       	st	X, r24
    1d56:	9d c0       	rjmp	.+314    	; 0x1e92 <DIO_u8SetPinValue+0x216>
				case DIO_PORTD:SET_BIT(PORTD,Copy_u8Pin);break;
    1d58:	a2 e3       	ldi	r26, 0x32	; 50
    1d5a:	b0 e0       	ldi	r27, 0x00	; 0
    1d5c:	e2 e3       	ldi	r30, 0x32	; 50
    1d5e:	f0 e0       	ldi	r31, 0x00	; 0
    1d60:	40 81       	ld	r20, Z
    1d62:	8b 81       	ldd	r24, Y+3	; 0x03
    1d64:	28 2f       	mov	r18, r24
    1d66:	30 e0       	ldi	r19, 0x00	; 0
    1d68:	81 e0       	ldi	r24, 0x01	; 1
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	02 2e       	mov	r0, r18
    1d6e:	02 c0       	rjmp	.+4      	; 0x1d74 <DIO_u8SetPinValue+0xf8>
    1d70:	88 0f       	add	r24, r24
    1d72:	99 1f       	adc	r25, r25
    1d74:	0a 94       	dec	r0
    1d76:	e2 f7       	brpl	.-8      	; 0x1d70 <DIO_u8SetPinValue+0xf4>
    1d78:	84 0f       	add	r24, r20
    1d7a:	8c 93       	st	X, r24
    1d7c:	8a c0       	rjmp	.+276    	; 0x1e92 <DIO_u8SetPinValue+0x216>
				default: Local_u8ErrorState=1;				
    1d7e:	81 e0       	ldi	r24, 0x01	; 1
    1d80:	89 83       	std	Y+1, r24	; 0x01
    1d82:	87 c0       	rjmp	.+270    	; 0x1e92 <DIO_u8SetPinValue+0x216>
			}
		}
		else
			Local_u8ErrorState=1;
    1d84:	81 e0       	ldi	r24, 0x01	; 1
    1d86:	89 83       	std	Y+1, r24	; 0x01
    1d88:	84 c0       	rjmp	.+264    	; 0x1e92 <DIO_u8SetPinValue+0x216>
	}
	else if(DIO_PIN_LOW==Copy_u8Value)
    1d8a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d8c:	88 23       	and	r24, r24
    1d8e:	09 f0       	breq	.+2      	; 0x1d92 <DIO_u8SetPinValue+0x116>
    1d90:	7e c0       	rjmp	.+252    	; 0x1e8e <DIO_u8SetPinValue+0x212>
	{
		if((0<=Copy_u8Pin)&&(Copy_u8Pin<=7))
    1d92:	8b 81       	ldd	r24, Y+3	; 0x03
    1d94:	88 30       	cpi	r24, 0x08	; 8
    1d96:	08 f0       	brcs	.+2      	; 0x1d9a <DIO_u8SetPinValue+0x11e>
    1d98:	77 c0       	rjmp	.+238    	; 0x1e88 <DIO_u8SetPinValue+0x20c>
		{
			switch(Copy_u8Port)
    1d9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d9c:	28 2f       	mov	r18, r24
    1d9e:	30 e0       	ldi	r19, 0x00	; 0
    1da0:	3e 83       	std	Y+6, r19	; 0x06
    1da2:	2d 83       	std	Y+5, r18	; 0x05
    1da4:	8d 81       	ldd	r24, Y+5	; 0x05
    1da6:	9e 81       	ldd	r25, Y+6	; 0x06
    1da8:	81 30       	cpi	r24, 0x01	; 1
    1daa:	91 05       	cpc	r25, r1
    1dac:	59 f1       	breq	.+86     	; 0x1e04 <DIO_u8SetPinValue+0x188>
    1dae:	2d 81       	ldd	r18, Y+5	; 0x05
    1db0:	3e 81       	ldd	r19, Y+6	; 0x06
    1db2:	22 30       	cpi	r18, 0x02	; 2
    1db4:	31 05       	cpc	r19, r1
    1db6:	2c f4       	brge	.+10     	; 0x1dc2 <DIO_u8SetPinValue+0x146>
    1db8:	8d 81       	ldd	r24, Y+5	; 0x05
    1dba:	9e 81       	ldd	r25, Y+6	; 0x06
    1dbc:	00 97       	sbiw	r24, 0x00	; 0
    1dbe:	69 f0       	breq	.+26     	; 0x1dda <DIO_u8SetPinValue+0x15e>
    1dc0:	60 c0       	rjmp	.+192    	; 0x1e82 <DIO_u8SetPinValue+0x206>
    1dc2:	2d 81       	ldd	r18, Y+5	; 0x05
    1dc4:	3e 81       	ldd	r19, Y+6	; 0x06
    1dc6:	22 30       	cpi	r18, 0x02	; 2
    1dc8:	31 05       	cpc	r19, r1
    1dca:	89 f1       	breq	.+98     	; 0x1e2e <DIO_u8SetPinValue+0x1b2>
    1dcc:	8d 81       	ldd	r24, Y+5	; 0x05
    1dce:	9e 81       	ldd	r25, Y+6	; 0x06
    1dd0:	83 30       	cpi	r24, 0x03	; 3
    1dd2:	91 05       	cpc	r25, r1
    1dd4:	09 f4       	brne	.+2      	; 0x1dd8 <DIO_u8SetPinValue+0x15c>
    1dd6:	40 c0       	rjmp	.+128    	; 0x1e58 <DIO_u8SetPinValue+0x1dc>
    1dd8:	54 c0       	rjmp	.+168    	; 0x1e82 <DIO_u8SetPinValue+0x206>
			{
				case DIO_PORTA:CLR_BIT(PORTA,Copy_u8Pin);break;
    1dda:	ab e3       	ldi	r26, 0x3B	; 59
    1ddc:	b0 e0       	ldi	r27, 0x00	; 0
    1dde:	eb e3       	ldi	r30, 0x3B	; 59
    1de0:	f0 e0       	ldi	r31, 0x00	; 0
    1de2:	80 81       	ld	r24, Z
    1de4:	48 2f       	mov	r20, r24
    1de6:	8b 81       	ldd	r24, Y+3	; 0x03
    1de8:	28 2f       	mov	r18, r24
    1dea:	30 e0       	ldi	r19, 0x00	; 0
    1dec:	81 e0       	ldi	r24, 0x01	; 1
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	02 2e       	mov	r0, r18
    1df2:	02 c0       	rjmp	.+4      	; 0x1df8 <DIO_u8SetPinValue+0x17c>
    1df4:	88 0f       	add	r24, r24
    1df6:	99 1f       	adc	r25, r25
    1df8:	0a 94       	dec	r0
    1dfa:	e2 f7       	brpl	.-8      	; 0x1df4 <DIO_u8SetPinValue+0x178>
    1dfc:	80 95       	com	r24
    1dfe:	84 23       	and	r24, r20
    1e00:	8c 93       	st	X, r24
    1e02:	47 c0       	rjmp	.+142    	; 0x1e92 <DIO_u8SetPinValue+0x216>
				case DIO_PORTB:CLR_BIT(PORTB,Copy_u8Pin);break;
    1e04:	a8 e3       	ldi	r26, 0x38	; 56
    1e06:	b0 e0       	ldi	r27, 0x00	; 0
    1e08:	e8 e3       	ldi	r30, 0x38	; 56
    1e0a:	f0 e0       	ldi	r31, 0x00	; 0
    1e0c:	80 81       	ld	r24, Z
    1e0e:	48 2f       	mov	r20, r24
    1e10:	8b 81       	ldd	r24, Y+3	; 0x03
    1e12:	28 2f       	mov	r18, r24
    1e14:	30 e0       	ldi	r19, 0x00	; 0
    1e16:	81 e0       	ldi	r24, 0x01	; 1
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	02 2e       	mov	r0, r18
    1e1c:	02 c0       	rjmp	.+4      	; 0x1e22 <DIO_u8SetPinValue+0x1a6>
    1e1e:	88 0f       	add	r24, r24
    1e20:	99 1f       	adc	r25, r25
    1e22:	0a 94       	dec	r0
    1e24:	e2 f7       	brpl	.-8      	; 0x1e1e <DIO_u8SetPinValue+0x1a2>
    1e26:	80 95       	com	r24
    1e28:	84 23       	and	r24, r20
    1e2a:	8c 93       	st	X, r24
    1e2c:	32 c0       	rjmp	.+100    	; 0x1e92 <DIO_u8SetPinValue+0x216>
				case DIO_PORTC:CLR_BIT(PORTC,Copy_u8Pin);break;
    1e2e:	a5 e3       	ldi	r26, 0x35	; 53
    1e30:	b0 e0       	ldi	r27, 0x00	; 0
    1e32:	e5 e3       	ldi	r30, 0x35	; 53
    1e34:	f0 e0       	ldi	r31, 0x00	; 0
    1e36:	80 81       	ld	r24, Z
    1e38:	48 2f       	mov	r20, r24
    1e3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3c:	28 2f       	mov	r18, r24
    1e3e:	30 e0       	ldi	r19, 0x00	; 0
    1e40:	81 e0       	ldi	r24, 0x01	; 1
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	02 2e       	mov	r0, r18
    1e46:	02 c0       	rjmp	.+4      	; 0x1e4c <DIO_u8SetPinValue+0x1d0>
    1e48:	88 0f       	add	r24, r24
    1e4a:	99 1f       	adc	r25, r25
    1e4c:	0a 94       	dec	r0
    1e4e:	e2 f7       	brpl	.-8      	; 0x1e48 <DIO_u8SetPinValue+0x1cc>
    1e50:	80 95       	com	r24
    1e52:	84 23       	and	r24, r20
    1e54:	8c 93       	st	X, r24
    1e56:	1d c0       	rjmp	.+58     	; 0x1e92 <DIO_u8SetPinValue+0x216>
				case DIO_PORTD:CLR_BIT(PORTD,Copy_u8Pin);break;
    1e58:	a2 e3       	ldi	r26, 0x32	; 50
    1e5a:	b0 e0       	ldi	r27, 0x00	; 0
    1e5c:	e2 e3       	ldi	r30, 0x32	; 50
    1e5e:	f0 e0       	ldi	r31, 0x00	; 0
    1e60:	80 81       	ld	r24, Z
    1e62:	48 2f       	mov	r20, r24
    1e64:	8b 81       	ldd	r24, Y+3	; 0x03
    1e66:	28 2f       	mov	r18, r24
    1e68:	30 e0       	ldi	r19, 0x00	; 0
    1e6a:	81 e0       	ldi	r24, 0x01	; 1
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	02 2e       	mov	r0, r18
    1e70:	02 c0       	rjmp	.+4      	; 0x1e76 <DIO_u8SetPinValue+0x1fa>
    1e72:	88 0f       	add	r24, r24
    1e74:	99 1f       	adc	r25, r25
    1e76:	0a 94       	dec	r0
    1e78:	e2 f7       	brpl	.-8      	; 0x1e72 <DIO_u8SetPinValue+0x1f6>
    1e7a:	80 95       	com	r24
    1e7c:	84 23       	and	r24, r20
    1e7e:	8c 93       	st	X, r24
    1e80:	08 c0       	rjmp	.+16     	; 0x1e92 <DIO_u8SetPinValue+0x216>
				default: Local_u8ErrorState=1;	
    1e82:	81 e0       	ldi	r24, 0x01	; 1
    1e84:	89 83       	std	Y+1, r24	; 0x01
    1e86:	05 c0       	rjmp	.+10     	; 0x1e92 <DIO_u8SetPinValue+0x216>
			}
		}
		else
			Local_u8ErrorState=1;	
    1e88:	81 e0       	ldi	r24, 0x01	; 1
    1e8a:	89 83       	std	Y+1, r24	; 0x01
    1e8c:	02 c0       	rjmp	.+4      	; 0x1e92 <DIO_u8SetPinValue+0x216>
	}
	else
		Local_u8ErrorState=1;	
    1e8e:	81 e0       	ldi	r24, 0x01	; 1
    1e90:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    1e92:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e94:	28 96       	adiw	r28, 0x08	; 8
    1e96:	0f b6       	in	r0, 0x3f	; 63
    1e98:	f8 94       	cli
    1e9a:	de bf       	out	0x3e, r29	; 62
    1e9c:	0f be       	out	0x3f, r0	; 63
    1e9e:	cd bf       	out	0x3d, r28	; 61
    1ea0:	cf 91       	pop	r28
    1ea2:	df 91       	pop	r29
    1ea4:	08 95       	ret

00001ea6 <DIO_u8SetPortValue>:
u8 DIO_u8SetPortValue(u8 Copy_u8Port,u8 Copy_u8Value)
{
    1ea6:	df 93       	push	r29
    1ea8:	cf 93       	push	r28
    1eaa:	00 d0       	rcall	.+0      	; 0x1eac <DIO_u8SetPortValue+0x6>
    1eac:	00 d0       	rcall	.+0      	; 0x1eae <DIO_u8SetPortValue+0x8>
    1eae:	0f 92       	push	r0
    1eb0:	cd b7       	in	r28, 0x3d	; 61
    1eb2:	de b7       	in	r29, 0x3e	; 62
    1eb4:	8a 83       	std	Y+2, r24	; 0x02
    1eb6:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    1eb8:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
    1eba:	8a 81       	ldd	r24, Y+2	; 0x02
    1ebc:	28 2f       	mov	r18, r24
    1ebe:	30 e0       	ldi	r19, 0x00	; 0
    1ec0:	3d 83       	std	Y+5, r19	; 0x05
    1ec2:	2c 83       	std	Y+4, r18	; 0x04
    1ec4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ec6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ec8:	81 30       	cpi	r24, 0x01	; 1
    1eca:	91 05       	cpc	r25, r1
    1ecc:	d1 f0       	breq	.+52     	; 0x1f02 <DIO_u8SetPortValue+0x5c>
    1ece:	2c 81       	ldd	r18, Y+4	; 0x04
    1ed0:	3d 81       	ldd	r19, Y+5	; 0x05
    1ed2:	22 30       	cpi	r18, 0x02	; 2
    1ed4:	31 05       	cpc	r19, r1
    1ed6:	2c f4       	brge	.+10     	; 0x1ee2 <DIO_u8SetPortValue+0x3c>
    1ed8:	8c 81       	ldd	r24, Y+4	; 0x04
    1eda:	9d 81       	ldd	r25, Y+5	; 0x05
    1edc:	00 97       	sbiw	r24, 0x00	; 0
    1ede:	61 f0       	breq	.+24     	; 0x1ef8 <DIO_u8SetPortValue+0x52>
    1ee0:	1f c0       	rjmp	.+62     	; 0x1f20 <DIO_u8SetPortValue+0x7a>
    1ee2:	2c 81       	ldd	r18, Y+4	; 0x04
    1ee4:	3d 81       	ldd	r19, Y+5	; 0x05
    1ee6:	22 30       	cpi	r18, 0x02	; 2
    1ee8:	31 05       	cpc	r19, r1
    1eea:	81 f0       	breq	.+32     	; 0x1f0c <DIO_u8SetPortValue+0x66>
    1eec:	8c 81       	ldd	r24, Y+4	; 0x04
    1eee:	9d 81       	ldd	r25, Y+5	; 0x05
    1ef0:	83 30       	cpi	r24, 0x03	; 3
    1ef2:	91 05       	cpc	r25, r1
    1ef4:	81 f0       	breq	.+32     	; 0x1f16 <DIO_u8SetPortValue+0x70>
    1ef6:	14 c0       	rjmp	.+40     	; 0x1f20 <DIO_u8SetPortValue+0x7a>
	{
		case DIO_PORTA:PORTA=Copy_u8Value;break;
    1ef8:	eb e3       	ldi	r30, 0x3B	; 59
    1efa:	f0 e0       	ldi	r31, 0x00	; 0
    1efc:	8b 81       	ldd	r24, Y+3	; 0x03
    1efe:	80 83       	st	Z, r24
    1f00:	11 c0       	rjmp	.+34     	; 0x1f24 <DIO_u8SetPortValue+0x7e>
		case DIO_PORTB:PORTB=Copy_u8Value;break;
    1f02:	e8 e3       	ldi	r30, 0x38	; 56
    1f04:	f0 e0       	ldi	r31, 0x00	; 0
    1f06:	8b 81       	ldd	r24, Y+3	; 0x03
    1f08:	80 83       	st	Z, r24
    1f0a:	0c c0       	rjmp	.+24     	; 0x1f24 <DIO_u8SetPortValue+0x7e>
		case DIO_PORTC:PORTC=Copy_u8Value;break;
    1f0c:	e5 e3       	ldi	r30, 0x35	; 53
    1f0e:	f0 e0       	ldi	r31, 0x00	; 0
    1f10:	8b 81       	ldd	r24, Y+3	; 0x03
    1f12:	80 83       	st	Z, r24
    1f14:	07 c0       	rjmp	.+14     	; 0x1f24 <DIO_u8SetPortValue+0x7e>
		case DIO_PORTD:PORTD=Copy_u8Value;break;
    1f16:	e2 e3       	ldi	r30, 0x32	; 50
    1f18:	f0 e0       	ldi	r31, 0x00	; 0
    1f1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1c:	80 83       	st	Z, r24
    1f1e:	02 c0       	rjmp	.+4      	; 0x1f24 <DIO_u8SetPortValue+0x7e>
		default: Local_u8ErrorState=1;	
    1f20:	81 e0       	ldi	r24, 0x01	; 1
    1f22:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1f24:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f26:	0f 90       	pop	r0
    1f28:	0f 90       	pop	r0
    1f2a:	0f 90       	pop	r0
    1f2c:	0f 90       	pop	r0
    1f2e:	0f 90       	pop	r0
    1f30:	cf 91       	pop	r28
    1f32:	df 91       	pop	r29
    1f34:	08 95       	ret

00001f36 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 *Copy_pu8Value)
{
    1f36:	df 93       	push	r29
    1f38:	cf 93       	push	r28
    1f3a:	cd b7       	in	r28, 0x3d	; 61
    1f3c:	de b7       	in	r29, 0x3e	; 62
    1f3e:	27 97       	sbiw	r28, 0x07	; 7
    1f40:	0f b6       	in	r0, 0x3f	; 63
    1f42:	f8 94       	cli
    1f44:	de bf       	out	0x3e, r29	; 62
    1f46:	0f be       	out	0x3f, r0	; 63
    1f48:	cd bf       	out	0x3d, r28	; 61
    1f4a:	8a 83       	std	Y+2, r24	; 0x02
    1f4c:	6b 83       	std	Y+3, r22	; 0x03
    1f4e:	5d 83       	std	Y+5, r21	; 0x05
    1f50:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    1f52:	19 82       	std	Y+1, r1	; 0x01
	if((0<=Copy_u8Pin)&&(Copy_u8Pin<=7))
    1f54:	8b 81       	ldd	r24, Y+3	; 0x03
    1f56:	88 30       	cpi	r24, 0x08	; 8
    1f58:	08 f0       	brcs	.+2      	; 0x1f5c <DIO_u8GetPinValue+0x26>
    1f5a:	74 c0       	rjmp	.+232    	; 0x2044 <DIO_u8GetPinValue+0x10e>
	{
		switch(Copy_u8Port)
    1f5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f5e:	28 2f       	mov	r18, r24
    1f60:	30 e0       	ldi	r19, 0x00	; 0
    1f62:	3f 83       	std	Y+7, r19	; 0x07
    1f64:	2e 83       	std	Y+6, r18	; 0x06
    1f66:	4e 81       	ldd	r20, Y+6	; 0x06
    1f68:	5f 81       	ldd	r21, Y+7	; 0x07
    1f6a:	41 30       	cpi	r20, 0x01	; 1
    1f6c:	51 05       	cpc	r21, r1
    1f6e:	59 f1       	breq	.+86     	; 0x1fc6 <DIO_u8GetPinValue+0x90>
    1f70:	8e 81       	ldd	r24, Y+6	; 0x06
    1f72:	9f 81       	ldd	r25, Y+7	; 0x07
    1f74:	82 30       	cpi	r24, 0x02	; 2
    1f76:	91 05       	cpc	r25, r1
    1f78:	34 f4       	brge	.+12     	; 0x1f86 <DIO_u8GetPinValue+0x50>
    1f7a:	2e 81       	ldd	r18, Y+6	; 0x06
    1f7c:	3f 81       	ldd	r19, Y+7	; 0x07
    1f7e:	21 15       	cp	r18, r1
    1f80:	31 05       	cpc	r19, r1
    1f82:	69 f0       	breq	.+26     	; 0x1f9e <DIO_u8GetPinValue+0x68>
    1f84:	5c c0       	rjmp	.+184    	; 0x203e <DIO_u8GetPinValue+0x108>
    1f86:	4e 81       	ldd	r20, Y+6	; 0x06
    1f88:	5f 81       	ldd	r21, Y+7	; 0x07
    1f8a:	42 30       	cpi	r20, 0x02	; 2
    1f8c:	51 05       	cpc	r21, r1
    1f8e:	79 f1       	breq	.+94     	; 0x1fee <DIO_u8GetPinValue+0xb8>
    1f90:	8e 81       	ldd	r24, Y+6	; 0x06
    1f92:	9f 81       	ldd	r25, Y+7	; 0x07
    1f94:	83 30       	cpi	r24, 0x03	; 3
    1f96:	91 05       	cpc	r25, r1
    1f98:	09 f4       	brne	.+2      	; 0x1f9c <DIO_u8GetPinValue+0x66>
    1f9a:	3d c0       	rjmp	.+122    	; 0x2016 <DIO_u8GetPinValue+0xe0>
    1f9c:	50 c0       	rjmp	.+160    	; 0x203e <DIO_u8GetPinValue+0x108>
		{
			case DIO_PORTA:*Copy_pu8Value=GET_BIT(PINA,Copy_u8Pin);break;
    1f9e:	e9 e3       	ldi	r30, 0x39	; 57
    1fa0:	f0 e0       	ldi	r31, 0x00	; 0
    1fa2:	80 81       	ld	r24, Z
    1fa4:	28 2f       	mov	r18, r24
    1fa6:	30 e0       	ldi	r19, 0x00	; 0
    1fa8:	8b 81       	ldd	r24, Y+3	; 0x03
    1faa:	88 2f       	mov	r24, r24
    1fac:	90 e0       	ldi	r25, 0x00	; 0
    1fae:	a9 01       	movw	r20, r18
    1fb0:	02 c0       	rjmp	.+4      	; 0x1fb6 <DIO_u8GetPinValue+0x80>
    1fb2:	55 95       	asr	r21
    1fb4:	47 95       	ror	r20
    1fb6:	8a 95       	dec	r24
    1fb8:	e2 f7       	brpl	.-8      	; 0x1fb2 <DIO_u8GetPinValue+0x7c>
    1fba:	ca 01       	movw	r24, r20
    1fbc:	81 70       	andi	r24, 0x01	; 1
    1fbe:	ec 81       	ldd	r30, Y+4	; 0x04
    1fc0:	fd 81       	ldd	r31, Y+5	; 0x05
    1fc2:	80 83       	st	Z, r24
    1fc4:	41 c0       	rjmp	.+130    	; 0x2048 <DIO_u8GetPinValue+0x112>
			case DIO_PORTB:*Copy_pu8Value=GET_BIT(PINB,Copy_u8Pin);break;
    1fc6:	e6 e3       	ldi	r30, 0x36	; 54
    1fc8:	f0 e0       	ldi	r31, 0x00	; 0
    1fca:	80 81       	ld	r24, Z
    1fcc:	28 2f       	mov	r18, r24
    1fce:	30 e0       	ldi	r19, 0x00	; 0
    1fd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd2:	88 2f       	mov	r24, r24
    1fd4:	90 e0       	ldi	r25, 0x00	; 0
    1fd6:	a9 01       	movw	r20, r18
    1fd8:	02 c0       	rjmp	.+4      	; 0x1fde <DIO_u8GetPinValue+0xa8>
    1fda:	55 95       	asr	r21
    1fdc:	47 95       	ror	r20
    1fde:	8a 95       	dec	r24
    1fe0:	e2 f7       	brpl	.-8      	; 0x1fda <DIO_u8GetPinValue+0xa4>
    1fe2:	ca 01       	movw	r24, r20
    1fe4:	81 70       	andi	r24, 0x01	; 1
    1fe6:	ec 81       	ldd	r30, Y+4	; 0x04
    1fe8:	fd 81       	ldd	r31, Y+5	; 0x05
    1fea:	80 83       	st	Z, r24
    1fec:	2d c0       	rjmp	.+90     	; 0x2048 <DIO_u8GetPinValue+0x112>
			case DIO_PORTC:*Copy_pu8Value=GET_BIT(PINC,Copy_u8Pin);break;
    1fee:	e3 e3       	ldi	r30, 0x33	; 51
    1ff0:	f0 e0       	ldi	r31, 0x00	; 0
    1ff2:	80 81       	ld	r24, Z
    1ff4:	28 2f       	mov	r18, r24
    1ff6:	30 e0       	ldi	r19, 0x00	; 0
    1ff8:	8b 81       	ldd	r24, Y+3	; 0x03
    1ffa:	88 2f       	mov	r24, r24
    1ffc:	90 e0       	ldi	r25, 0x00	; 0
    1ffe:	a9 01       	movw	r20, r18
    2000:	02 c0       	rjmp	.+4      	; 0x2006 <DIO_u8GetPinValue+0xd0>
    2002:	55 95       	asr	r21
    2004:	47 95       	ror	r20
    2006:	8a 95       	dec	r24
    2008:	e2 f7       	brpl	.-8      	; 0x2002 <DIO_u8GetPinValue+0xcc>
    200a:	ca 01       	movw	r24, r20
    200c:	81 70       	andi	r24, 0x01	; 1
    200e:	ec 81       	ldd	r30, Y+4	; 0x04
    2010:	fd 81       	ldd	r31, Y+5	; 0x05
    2012:	80 83       	st	Z, r24
    2014:	19 c0       	rjmp	.+50     	; 0x2048 <DIO_u8GetPinValue+0x112>
			case DIO_PORTD:*Copy_pu8Value=GET_BIT(PIND,Copy_u8Pin);break;
    2016:	e0 e3       	ldi	r30, 0x30	; 48
    2018:	f0 e0       	ldi	r31, 0x00	; 0
    201a:	80 81       	ld	r24, Z
    201c:	28 2f       	mov	r18, r24
    201e:	30 e0       	ldi	r19, 0x00	; 0
    2020:	8b 81       	ldd	r24, Y+3	; 0x03
    2022:	88 2f       	mov	r24, r24
    2024:	90 e0       	ldi	r25, 0x00	; 0
    2026:	a9 01       	movw	r20, r18
    2028:	02 c0       	rjmp	.+4      	; 0x202e <DIO_u8GetPinValue+0xf8>
    202a:	55 95       	asr	r21
    202c:	47 95       	ror	r20
    202e:	8a 95       	dec	r24
    2030:	e2 f7       	brpl	.-8      	; 0x202a <DIO_u8GetPinValue+0xf4>
    2032:	ca 01       	movw	r24, r20
    2034:	81 70       	andi	r24, 0x01	; 1
    2036:	ec 81       	ldd	r30, Y+4	; 0x04
    2038:	fd 81       	ldd	r31, Y+5	; 0x05
    203a:	80 83       	st	Z, r24
    203c:	05 c0       	rjmp	.+10     	; 0x2048 <DIO_u8GetPinValue+0x112>
			default: Local_u8ErrorState=1;	
    203e:	81 e0       	ldi	r24, 0x01	; 1
    2040:	89 83       	std	Y+1, r24	; 0x01
    2042:	02 c0       	rjmp	.+4      	; 0x2048 <DIO_u8GetPinValue+0x112>
		}
	}
	else
		Local_u8ErrorState=1;	
    2044:	81 e0       	ldi	r24, 0x01	; 1
    2046:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    2048:	89 81       	ldd	r24, Y+1	; 0x01
}
    204a:	27 96       	adiw	r28, 0x07	; 7
    204c:	0f b6       	in	r0, 0x3f	; 63
    204e:	f8 94       	cli
    2050:	de bf       	out	0x3e, r29	; 62
    2052:	0f be       	out	0x3f, r0	; 63
    2054:	cd bf       	out	0x3d, r28	; 61
    2056:	cf 91       	pop	r28
    2058:	df 91       	pop	r29
    205a:	08 95       	ret

0000205c <GINT_voidEnable>:

#include "GINT_register.h"
#include "GINT_interface.h"

void GINT_voidEnable()
{
    205c:	df 93       	push	r29
    205e:	cf 93       	push	r28
    2060:	cd b7       	in	r28, 0x3d	; 61
    2062:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
    2064:	af e5       	ldi	r26, 0x5F	; 95
    2066:	b0 e0       	ldi	r27, 0x00	; 0
    2068:	ef e5       	ldi	r30, 0x5F	; 95
    206a:	f0 e0       	ldi	r31, 0x00	; 0
    206c:	80 81       	ld	r24, Z
    206e:	80 58       	subi	r24, 0x80	; 128
    2070:	8c 93       	st	X, r24
}
    2072:	cf 91       	pop	r28
    2074:	df 91       	pop	r29
    2076:	08 95       	ret

00002078 <GINT_voidDisable>:
void GINT_voidDisable()
{
    2078:	df 93       	push	r29
    207a:	cf 93       	push	r28
    207c:	cd b7       	in	r28, 0x3d	; 61
    207e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_I);
    2080:	af e5       	ldi	r26, 0x5F	; 95
    2082:	b0 e0       	ldi	r27, 0x00	; 0
    2084:	ef e5       	ldi	r30, 0x5F	; 95
    2086:	f0 e0       	ldi	r31, 0x00	; 0
    2088:	80 81       	ld	r24, Z
    208a:	8f 77       	andi	r24, 0x7F	; 127
    208c:	8c 93       	st	X, r24
}
    208e:	cf 91       	pop	r28
    2090:	df 91       	pop	r29
    2092:	08 95       	ret

00002094 <KPD_u8Key_pressed>:
#include "KPD_config.h"
#include "KPD_interface.h"


u8 KPD_u8Key_pressed()
{
    2094:	df 93       	push	r29
    2096:	cf 93       	push	r28
    2098:	00 d0       	rcall	.+0      	; 0x209a <KPD_u8Key_pressed+0x6>
    209a:	00 d0       	rcall	.+0      	; 0x209c <KPD_u8Key_pressed+0x8>
    209c:	0f 92       	push	r0
    209e:	cd b7       	in	r28, 0x3d	; 61
    20a0:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8RowItrator;
	u8 Local_u8ColItrator;
	u8 Local_u8GetState;
	u8 Local_u8KeyPressed = KPD_NO_PRESSED_KEY;
    20a2:	8f ef       	ldi	r24, 0xFF	; 255
    20a4:	89 83       	std	Y+1, r24	; 0x01
	static u8 Local_u8KPD_ROW_PINS[Max_Rows] = { KPD_ROW_PIN0, KPD_ROW_PIN1,
			KPD_ROW_PIN2, KPD_ROW_PIN3 };
	static u8 Local_u8KPD_COL_PINS[Max_Cols] = { KPD_COL_PIN0, KPD_COL_PIN1,
			KPD_COL_PIN2, KPD_COL_PIN3 };
	static u8 Local_u8KPD_Nums[Max_Rows][Max_Cols] = KPD_u8ARR;
	for (Local_u8ColItrator = 0; Local_u8ColItrator < Max_Cols;
    20a6:	1a 82       	std	Y+2, r1	; 0x02
    20a8:	5e c0       	rjmp	.+188    	; 0x2166 <KPD_u8Key_pressed+0xd2>
			Local_u8ColItrator++) {
		DIO_u8SetPinValue(KPD_INPUT_PORT,
    20aa:	8a 81       	ldd	r24, Y+2	; 0x02
    20ac:	88 2f       	mov	r24, r24
    20ae:	90 e0       	ldi	r25, 0x00	; 0
    20b0:	fc 01       	movw	r30, r24
    20b2:	e3 52       	subi	r30, 0x23	; 35
    20b4:	ff 4f       	sbci	r31, 0xFF	; 255
    20b6:	90 81       	ld	r25, Z
    20b8:	83 e0       	ldi	r24, 0x03	; 3
    20ba:	69 2f       	mov	r22, r25
    20bc:	40 e0       	ldi	r20, 0x00	; 0
    20be:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_u8SetPinValue>
				Local_u8KPD_COL_PINS[Local_u8ColItrator], DIO_PIN_LOW);
		/*Read the current Row*/
		for (Local_u8RowItrator = 0; Local_u8RowItrator < Max_Rows;
    20c2:	1b 82       	std	Y+3, r1	; 0x03
    20c4:	3d c0       	rjmp	.+122    	; 0x2140 <KPD_u8Key_pressed+0xac>
				Local_u8RowItrator++) {
			DIO_u8GetPinValue(KPD_INPUT_PORT,
    20c6:	8b 81       	ldd	r24, Y+3	; 0x03
    20c8:	88 2f       	mov	r24, r24
    20ca:	90 e0       	ldi	r25, 0x00	; 0
    20cc:	fc 01       	movw	r30, r24
    20ce:	ef 51       	subi	r30, 0x1F	; 31
    20d0:	ff 4f       	sbci	r31, 0xFF	; 255
    20d2:	90 81       	ld	r25, Z
    20d4:	9e 01       	movw	r18, r28
    20d6:	2c 5f       	subi	r18, 0xFC	; 252
    20d8:	3f 4f       	sbci	r19, 0xFF	; 255
    20da:	83 e0       	ldi	r24, 0x03	; 3
    20dc:	69 2f       	mov	r22, r25
    20de:	a9 01       	movw	r20, r18
    20e0:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <DIO_u8GetPinValue>
					Local_u8KPD_ROW_PINS[Local_u8RowItrator],
					&Local_u8GetState);
			/*chick switch id pressed */
			if (Local_u8GetState == DIO_PIN_LOW) {
    20e4:	8c 81       	ldd	r24, Y+4	; 0x04
    20e6:	88 23       	and	r24, r24
    20e8:	41 f5       	brne	.+80     	; 0x213a <KPD_u8Key_pressed+0xa6>
				Local_u8KeyPressed =
    20ea:	8b 81       	ldd	r24, Y+3	; 0x03
    20ec:	48 2f       	mov	r20, r24
    20ee:	50 e0       	ldi	r21, 0x00	; 0
    20f0:	8a 81       	ldd	r24, Y+2	; 0x02
    20f2:	28 2f       	mov	r18, r24
    20f4:	30 e0       	ldi	r19, 0x00	; 0
    20f6:	ca 01       	movw	r24, r20
    20f8:	88 0f       	add	r24, r24
    20fa:	99 1f       	adc	r25, r25
    20fc:	88 0f       	add	r24, r24
    20fe:	99 1f       	adc	r25, r25
    2100:	82 0f       	add	r24, r18
    2102:	93 1f       	adc	r25, r19
    2104:	fc 01       	movw	r30, r24
    2106:	e3 53       	subi	r30, 0x33	; 51
    2108:	ff 4f       	sbci	r31, 0xFF	; 255
    210a:	80 81       	ld	r24, Z
    210c:	89 83       	std	Y+1, r24	; 0x01
    210e:	0f c0       	rjmp	.+30     	; 0x212e <KPD_u8Key_pressed+0x9a>
						Local_u8KPD_Nums[Local_u8RowItrator][Local_u8ColItrator];
				/*polling busy waiting until the key is released*/
				while (Local_u8GetState == DIO_PIN_LOW) {
					DIO_u8GetPinValue(KPD_INPUT_PORT,
    2110:	8b 81       	ldd	r24, Y+3	; 0x03
    2112:	88 2f       	mov	r24, r24
    2114:	90 e0       	ldi	r25, 0x00	; 0
    2116:	fc 01       	movw	r30, r24
    2118:	ef 51       	subi	r30, 0x1F	; 31
    211a:	ff 4f       	sbci	r31, 0xFF	; 255
    211c:	90 81       	ld	r25, Z
    211e:	9e 01       	movw	r18, r28
    2120:	2c 5f       	subi	r18, 0xFC	; 252
    2122:	3f 4f       	sbci	r19, 0xFF	; 255
    2124:	83 e0       	ldi	r24, 0x03	; 3
    2126:	69 2f       	mov	r22, r25
    2128:	a9 01       	movw	r20, r18
    212a:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <DIO_u8GetPinValue>
			/*chick switch id pressed */
			if (Local_u8GetState == DIO_PIN_LOW) {
				Local_u8KeyPressed =
						Local_u8KPD_Nums[Local_u8RowItrator][Local_u8ColItrator];
				/*polling busy waiting until the key is released*/
				while (Local_u8GetState == DIO_PIN_LOW) {
    212e:	8c 81       	ldd	r24, Y+4	; 0x04
    2130:	88 23       	and	r24, r24
    2132:	71 f3       	breq	.-36     	; 0x2110 <KPD_u8Key_pressed+0x7c>
					DIO_u8GetPinValue(KPD_INPUT_PORT,
							Local_u8KPD_ROW_PINS[Local_u8RowItrator],
							&Local_u8GetState);
				}
				return Local_u8KeyPressed;
    2134:	89 81       	ldd	r24, Y+1	; 0x01
    2136:	8d 83       	std	Y+5, r24	; 0x05
    2138:	1c c0       	rjmp	.+56     	; 0x2172 <KPD_u8Key_pressed+0xde>
			Local_u8ColItrator++) {
		DIO_u8SetPinValue(KPD_INPUT_PORT,
				Local_u8KPD_COL_PINS[Local_u8ColItrator], DIO_PIN_LOW);
		/*Read the current Row*/
		for (Local_u8RowItrator = 0; Local_u8RowItrator < Max_Rows;
				Local_u8RowItrator++) {
    213a:	8b 81       	ldd	r24, Y+3	; 0x03
    213c:	8f 5f       	subi	r24, 0xFF	; 255
    213e:	8b 83       	std	Y+3, r24	; 0x03
	for (Local_u8ColItrator = 0; Local_u8ColItrator < Max_Cols;
			Local_u8ColItrator++) {
		DIO_u8SetPinValue(KPD_INPUT_PORT,
				Local_u8KPD_COL_PINS[Local_u8ColItrator], DIO_PIN_LOW);
		/*Read the current Row*/
		for (Local_u8RowItrator = 0; Local_u8RowItrator < Max_Rows;
    2140:	8b 81       	ldd	r24, Y+3	; 0x03
    2142:	84 30       	cpi	r24, 0x04	; 4
    2144:	08 f4       	brcc	.+2      	; 0x2148 <KPD_u8Key_pressed+0xb4>
    2146:	bf cf       	rjmp	.-130    	; 0x20c6 <KPD_u8Key_pressed+0x32>
							&Local_u8GetState);
				}
				return Local_u8KeyPressed;
			}
		}
		DIO_u8SetPinValue(KPD_INPUT_PORT,
    2148:	8a 81       	ldd	r24, Y+2	; 0x02
    214a:	88 2f       	mov	r24, r24
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	fc 01       	movw	r30, r24
    2150:	e3 52       	subi	r30, 0x23	; 35
    2152:	ff 4f       	sbci	r31, 0xFF	; 255
    2154:	90 81       	ld	r25, Z
    2156:	83 e0       	ldi	r24, 0x03	; 3
    2158:	69 2f       	mov	r22, r25
    215a:	41 e0       	ldi	r20, 0x01	; 1
    215c:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_u8SetPinValue>
			KPD_ROW_PIN2, KPD_ROW_PIN3 };
	static u8 Local_u8KPD_COL_PINS[Max_Cols] = { KPD_COL_PIN0, KPD_COL_PIN1,
			KPD_COL_PIN2, KPD_COL_PIN3 };
	static u8 Local_u8KPD_Nums[Max_Rows][Max_Cols] = KPD_u8ARR;
	for (Local_u8ColItrator = 0; Local_u8ColItrator < Max_Cols;
			Local_u8ColItrator++) {
    2160:	8a 81       	ldd	r24, Y+2	; 0x02
    2162:	8f 5f       	subi	r24, 0xFF	; 255
    2164:	8a 83       	std	Y+2, r24	; 0x02
	static u8 Local_u8KPD_ROW_PINS[Max_Rows] = { KPD_ROW_PIN0, KPD_ROW_PIN1,
			KPD_ROW_PIN2, KPD_ROW_PIN3 };
	static u8 Local_u8KPD_COL_PINS[Max_Cols] = { KPD_COL_PIN0, KPD_COL_PIN1,
			KPD_COL_PIN2, KPD_COL_PIN3 };
	static u8 Local_u8KPD_Nums[Max_Rows][Max_Cols] = KPD_u8ARR;
	for (Local_u8ColItrator = 0; Local_u8ColItrator < Max_Cols;
    2166:	8a 81       	ldd	r24, Y+2	; 0x02
    2168:	84 30       	cpi	r24, 0x04	; 4
    216a:	08 f4       	brcc	.+2      	; 0x216e <KPD_u8Key_pressed+0xda>
    216c:	9e cf       	rjmp	.-196    	; 0x20aa <KPD_u8Key_pressed+0x16>
			}
		}
		DIO_u8SetPinValue(KPD_INPUT_PORT,
				Local_u8KPD_COL_PINS[Local_u8ColItrator], DIO_PIN_HIGH);
	}
	return Local_u8KeyPressed;
    216e:	89 81       	ldd	r24, Y+1	; 0x01
    2170:	8d 83       	std	Y+5, r24	; 0x05
    2172:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2174:	0f 90       	pop	r0
    2176:	0f 90       	pop	r0
    2178:	0f 90       	pop	r0
    217a:	0f 90       	pop	r0
    217c:	0f 90       	pop	r0
    217e:	cf 91       	pop	r28
    2180:	df 91       	pop	r29
    2182:	08 95       	ret

00002184 <PORT_voidInit>:
#include "PORT_config.h"
#include "PORT_register.h"
#include "PORT_interface.h"

void PORT_voidInit()
{
    2184:	df 93       	push	r29
    2186:	cf 93       	push	r28
    2188:	cd b7       	in	r28, 0x3d	; 61
    218a:	de b7       	in	r29, 0x3e	; 62
	DDRA = PORTA_DIR;	
    218c:	ea e3       	ldi	r30, 0x3A	; 58
    218e:	f0 e0       	ldi	r31, 0x00	; 0
    2190:	80 ef       	ldi	r24, 0xF0	; 240
    2192:	80 83       	st	Z, r24
	DDRB = PORTB_DIR;
    2194:	e7 e3       	ldi	r30, 0x37	; 55
    2196:	f0 e0       	ldi	r31, 0x00	; 0
    2198:	87 e7       	ldi	r24, 0x77	; 119
    219a:	80 83       	st	Z, r24
	DDRC = PORTC_DIR;
    219c:	e4 e3       	ldi	r30, 0x34	; 52
    219e:	f0 e0       	ldi	r31, 0x00	; 0
    21a0:	8f ef       	ldi	r24, 0xFF	; 255
    21a2:	80 83       	st	Z, r24
	DDRD = PORTD_DIR;
    21a4:	e1 e3       	ldi	r30, 0x31	; 49
    21a6:	f0 e0       	ldi	r31, 0x00	; 0
    21a8:	80 ef       	ldi	r24, 0xF0	; 240
    21aa:	80 83       	st	Z, r24
	
	PORTA =PORTA_INIT_VALUE;
    21ac:	eb e3       	ldi	r30, 0x3B	; 59
    21ae:	f0 e0       	ldi	r31, 0x00	; 0
    21b0:	83 e0       	ldi	r24, 0x03	; 3
    21b2:	80 83       	st	Z, r24
	PORTB =PORTB_INIT_VALUE;
    21b4:	e8 e3       	ldi	r30, 0x38	; 56
    21b6:	f0 e0       	ldi	r31, 0x00	; 0
    21b8:	80 e2       	ldi	r24, 0x20	; 32
    21ba:	80 83       	st	Z, r24
	PORTC =PORTC_INIT_VALUE;
    21bc:	e5 e3       	ldi	r30, 0x35	; 53
    21be:	f0 e0       	ldi	r31, 0x00	; 0
    21c0:	10 82       	st	Z, r1
	PORTD =PORTD_INIT_VALUE;
    21c2:	e2 e3       	ldi	r30, 0x32	; 50
    21c4:	f0 e0       	ldi	r31, 0x00	; 0
    21c6:	8f ef       	ldi	r24, 0xFF	; 255
    21c8:	80 83       	st	Z, r24
	
    21ca:	cf 91       	pop	r28
    21cc:	df 91       	pop	r29
    21ce:	08 95       	ret

000021d0 <SSD_u8Enable>:
#include "DIO_interface.h"
#include "SSD_private.h"
#include "SSD_config.h"
#include "SSD_interface.h"

u8 SSD_u8Enable(SSD_t* SSD) {
    21d0:	df 93       	push	r29
    21d2:	cf 93       	push	r28
    21d4:	00 d0       	rcall	.+0      	; 0x21d6 <SSD_u8Enable+0x6>
    21d6:	0f 92       	push	r0
    21d8:	cd b7       	in	r28, 0x3d	; 61
    21da:	de b7       	in	r29, 0x3e	; 62
    21dc:	9b 83       	std	Y+3, r25	; 0x03
    21de:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = 0;
    21e0:	19 82       	std	Y+1, r1	; 0x01
	if (CATHODE == SSD->ComType) {
    21e2:	ea 81       	ldd	r30, Y+2	; 0x02
    21e4:	fb 81       	ldd	r31, Y+3	; 0x03
    21e6:	80 81       	ld	r24, Z
    21e8:	88 23       	and	r24, r24
    21ea:	59 f4       	brne	.+22     	; 0x2202 <SSD_u8Enable+0x32>
			DIO_u8SetPinValue(SSD->EnablePort, SSD->EnablePin, DIO_PIN_LOW);
    21ec:	ea 81       	ldd	r30, Y+2	; 0x02
    21ee:	fb 81       	ldd	r31, Y+3	; 0x03
    21f0:	82 81       	ldd	r24, Z+2	; 0x02
    21f2:	ea 81       	ldd	r30, Y+2	; 0x02
    21f4:	fb 81       	ldd	r31, Y+3	; 0x03
    21f6:	93 81       	ldd	r25, Z+3	; 0x03
    21f8:	69 2f       	mov	r22, r25
    21fa:	40 e0       	ldi	r20, 0x00	; 0
    21fc:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_u8SetPinValue>
    2200:	12 c0       	rjmp	.+36     	; 0x2226 <SSD_u8Enable+0x56>
	} else if (ANODE == SSD->ComType) {
    2202:	ea 81       	ldd	r30, Y+2	; 0x02
    2204:	fb 81       	ldd	r31, Y+3	; 0x03
    2206:	80 81       	ld	r24, Z
    2208:	81 30       	cpi	r24, 0x01	; 1
    220a:	59 f4       	brne	.+22     	; 0x2222 <SSD_u8Enable+0x52>
			DIO_u8SetPinValue(SSD->EnablePort, SSD->EnablePin, DIO_PIN_HIGH);
    220c:	ea 81       	ldd	r30, Y+2	; 0x02
    220e:	fb 81       	ldd	r31, Y+3	; 0x03
    2210:	82 81       	ldd	r24, Z+2	; 0x02
    2212:	ea 81       	ldd	r30, Y+2	; 0x02
    2214:	fb 81       	ldd	r31, Y+3	; 0x03
    2216:	93 81       	ldd	r25, Z+3	; 0x03
    2218:	69 2f       	mov	r22, r25
    221a:	41 e0       	ldi	r20, 0x01	; 1
    221c:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_u8SetPinValue>
    2220:	02 c0       	rjmp	.+4      	; 0x2226 <SSD_u8Enable+0x56>
	} else
		Local_u8ErrorState = 1;
    2222:	81 e0       	ldi	r24, 0x01	; 1
    2224:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    2226:	89 81       	ldd	r24, Y+1	; 0x01
}
    2228:	0f 90       	pop	r0
    222a:	0f 90       	pop	r0
    222c:	0f 90       	pop	r0
    222e:	cf 91       	pop	r28
    2230:	df 91       	pop	r29
    2232:	08 95       	ret

00002234 <SSD_u8Disable>:
u8 SSD_u8Disable(SSD_t* SSD) {
    2234:	df 93       	push	r29
    2236:	cf 93       	push	r28
    2238:	00 d0       	rcall	.+0      	; 0x223a <SSD_u8Disable+0x6>
    223a:	0f 92       	push	r0
    223c:	cd b7       	in	r28, 0x3d	; 61
    223e:	de b7       	in	r29, 0x3e	; 62
    2240:	9b 83       	std	Y+3, r25	; 0x03
    2242:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = 0;
    2244:	19 82       	std	Y+1, r1	; 0x01
	if (CATHODE == SSD->ComType) {
    2246:	ea 81       	ldd	r30, Y+2	; 0x02
    2248:	fb 81       	ldd	r31, Y+3	; 0x03
    224a:	80 81       	ld	r24, Z
    224c:	88 23       	and	r24, r24
    224e:	59 f4       	brne	.+22     	; 0x2266 <SSD_u8Disable+0x32>
			DIO_u8SetPinValue(SSD->EnablePort, SSD->EnablePin, DIO_PIN_HIGH);
    2250:	ea 81       	ldd	r30, Y+2	; 0x02
    2252:	fb 81       	ldd	r31, Y+3	; 0x03
    2254:	82 81       	ldd	r24, Z+2	; 0x02
    2256:	ea 81       	ldd	r30, Y+2	; 0x02
    2258:	fb 81       	ldd	r31, Y+3	; 0x03
    225a:	93 81       	ldd	r25, Z+3	; 0x03
    225c:	69 2f       	mov	r22, r25
    225e:	41 e0       	ldi	r20, 0x01	; 1
    2260:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_u8SetPinValue>
    2264:	12 c0       	rjmp	.+36     	; 0x228a <SSD_u8Disable+0x56>
	} else if (ANODE == SSD->ComType) {
    2266:	ea 81       	ldd	r30, Y+2	; 0x02
    2268:	fb 81       	ldd	r31, Y+3	; 0x03
    226a:	80 81       	ld	r24, Z
    226c:	81 30       	cpi	r24, 0x01	; 1
    226e:	59 f4       	brne	.+22     	; 0x2286 <SSD_u8Disable+0x52>
			DIO_u8SetPinValue(SSD->EnablePort, SSD->EnablePin, DIO_PIN_LOW);
    2270:	ea 81       	ldd	r30, Y+2	; 0x02
    2272:	fb 81       	ldd	r31, Y+3	; 0x03
    2274:	82 81       	ldd	r24, Z+2	; 0x02
    2276:	ea 81       	ldd	r30, Y+2	; 0x02
    2278:	fb 81       	ldd	r31, Y+3	; 0x03
    227a:	93 81       	ldd	r25, Z+3	; 0x03
    227c:	69 2f       	mov	r22, r25
    227e:	40 e0       	ldi	r20, 0x00	; 0
    2280:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_u8SetPinValue>
    2284:	02 c0       	rjmp	.+4      	; 0x228a <SSD_u8Disable+0x56>
	} else
		Local_u8ErrorState = 1;
    2286:	81 e0       	ldi	r24, 0x01	; 1
    2288:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    228a:	89 81       	ldd	r24, Y+1	; 0x01
}
    228c:	0f 90       	pop	r0
    228e:	0f 90       	pop	r0
    2290:	0f 90       	pop	r0
    2292:	cf 91       	pop	r28
    2294:	df 91       	pop	r29
    2296:	08 95       	ret

00002298 <SSD_u8SetNumber>:
u8 SSD_u8SetNumber(SSD_t* SSD, u8 Copy_u8Number) {
    2298:	df 93       	push	r29
    229a:	cf 93       	push	r28
    229c:	00 d0       	rcall	.+0      	; 0x229e <SSD_u8SetNumber+0x6>
    229e:	00 d0       	rcall	.+0      	; 0x22a0 <SSD_u8SetNumber+0x8>
    22a0:	0f 92       	push	r0
    22a2:	cd b7       	in	r28, 0x3d	; 61
    22a4:	de b7       	in	r29, 0x3e	; 62
    22a6:	9c 83       	std	Y+4, r25	; 0x04
    22a8:	8b 83       	std	Y+3, r24	; 0x03
    22aa:	6d 83       	std	Y+5, r22	; 0x05
	u8 Local_u8ErrorState = 0;
    22ac:	19 82       	std	Y+1, r1	; 0x01
	u8 Local_u8EnableState;
	static u8 Local_u8Segmantarr[10] = SEGMANT_ARR;
	if (CATHODE == SSD->ComType) {
    22ae:	eb 81       	ldd	r30, Y+3	; 0x03
    22b0:	fc 81       	ldd	r31, Y+4	; 0x04
    22b2:	80 81       	ld	r24, Z
    22b4:	88 23       	and	r24, r24
    22b6:	f9 f4       	brne	.+62     	; 0x22f6 <SSD_u8SetNumber+0x5e>
		DIO_u8GetPinValue(SSD->EnablePort, SSD->EnablePin,
    22b8:	eb 81       	ldd	r30, Y+3	; 0x03
    22ba:	fc 81       	ldd	r31, Y+4	; 0x04
    22bc:	82 81       	ldd	r24, Z+2	; 0x02
    22be:	eb 81       	ldd	r30, Y+3	; 0x03
    22c0:	fc 81       	ldd	r31, Y+4	; 0x04
    22c2:	93 81       	ldd	r25, Z+3	; 0x03
    22c4:	9e 01       	movw	r18, r28
    22c6:	2e 5f       	subi	r18, 0xFE	; 254
    22c8:	3f 4f       	sbci	r19, 0xFF	; 255
    22ca:	69 2f       	mov	r22, r25
    22cc:	a9 01       	movw	r20, r18
    22ce:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <DIO_u8GetPinValue>
				&Local_u8EnableState);
		if (Enable_LOW == Local_u8EnableState) {
    22d2:	8a 81       	ldd	r24, Y+2	; 0x02
    22d4:	88 23       	and	r24, r24
    22d6:	b9 f5       	brne	.+110    	; 0x2346 <SSD_u8SetNumber+0xae>
				DIO_u8SetPortValue(SSD->Port,Local_u8Segmantarr[Copy_u8Number]);
    22d8:	eb 81       	ldd	r30, Y+3	; 0x03
    22da:	fc 81       	ldd	r31, Y+4	; 0x04
    22dc:	21 81       	ldd	r18, Z+1	; 0x01
    22de:	8d 81       	ldd	r24, Y+5	; 0x05
    22e0:	88 2f       	mov	r24, r24
    22e2:	90 e0       	ldi	r25, 0x00	; 0
    22e4:	fc 01       	movw	r30, r24
    22e6:	eb 51       	subi	r30, 0x1B	; 27
    22e8:	ff 4f       	sbci	r31, 0xFF	; 255
    22ea:	90 81       	ld	r25, Z
    22ec:	82 2f       	mov	r24, r18
    22ee:	69 2f       	mov	r22, r25
    22f0:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <DIO_u8SetPortValue>
    22f4:	28 c0       	rjmp	.+80     	; 0x2346 <SSD_u8SetNumber+0xae>
		}
	} else if (ANODE == SSD->ComType) {
    22f6:	eb 81       	ldd	r30, Y+3	; 0x03
    22f8:	fc 81       	ldd	r31, Y+4	; 0x04
    22fa:	80 81       	ld	r24, Z
    22fc:	81 30       	cpi	r24, 0x01	; 1
    22fe:	09 f5       	brne	.+66     	; 0x2342 <SSD_u8SetNumber+0xaa>
		DIO_u8GetPinValue(SSD->EnablePort, SSD->EnablePin,
    2300:	eb 81       	ldd	r30, Y+3	; 0x03
    2302:	fc 81       	ldd	r31, Y+4	; 0x04
    2304:	82 81       	ldd	r24, Z+2	; 0x02
    2306:	eb 81       	ldd	r30, Y+3	; 0x03
    2308:	fc 81       	ldd	r31, Y+4	; 0x04
    230a:	93 81       	ldd	r25, Z+3	; 0x03
    230c:	9e 01       	movw	r18, r28
    230e:	2e 5f       	subi	r18, 0xFE	; 254
    2310:	3f 4f       	sbci	r19, 0xFF	; 255
    2312:	69 2f       	mov	r22, r25
    2314:	a9 01       	movw	r20, r18
    2316:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <DIO_u8GetPinValue>
				&Local_u8EnableState);
		if (Enable_HIGH == Local_u8EnableState) {
    231a:	8a 81       	ldd	r24, Y+2	; 0x02
    231c:	81 30       	cpi	r24, 0x01	; 1
    231e:	99 f4       	brne	.+38     	; 0x2346 <SSD_u8SetNumber+0xae>
			DIO_u8SetPortValue(SSD->Port, ~(Local_u8Segmantarr[Copy_u8Number]));
    2320:	eb 81       	ldd	r30, Y+3	; 0x03
    2322:	fc 81       	ldd	r31, Y+4	; 0x04
    2324:	21 81       	ldd	r18, Z+1	; 0x01
    2326:	8d 81       	ldd	r24, Y+5	; 0x05
    2328:	88 2f       	mov	r24, r24
    232a:	90 e0       	ldi	r25, 0x00	; 0
    232c:	fc 01       	movw	r30, r24
    232e:	eb 51       	subi	r30, 0x1B	; 27
    2330:	ff 4f       	sbci	r31, 0xFF	; 255
    2332:	80 81       	ld	r24, Z
    2334:	98 2f       	mov	r25, r24
    2336:	90 95       	com	r25
    2338:	82 2f       	mov	r24, r18
    233a:	69 2f       	mov	r22, r25
    233c:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <DIO_u8SetPortValue>
    2340:	02 c0       	rjmp	.+4      	; 0x2346 <SSD_u8SetNumber+0xae>
		}
	} else
		Local_u8ErrorState = 1;
    2342:	81 e0       	ldi	r24, 0x01	; 1
    2344:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    2346:	89 81       	ldd	r24, Y+1	; 0x01
}
    2348:	0f 90       	pop	r0
    234a:	0f 90       	pop	r0
    234c:	0f 90       	pop	r0
    234e:	0f 90       	pop	r0
    2350:	0f 90       	pop	r0
    2352:	cf 91       	pop	r28
    2354:	df 91       	pop	r29
    2356:	08 95       	ret

00002358 <Num_length>:
 *      Author: user
 */
#include "STD_TYPES.h"
#include "CLCD_private.h"

u8 Num_length(u16 num) {
    2358:	df 93       	push	r29
    235a:	cf 93       	push	r28
    235c:	00 d0       	rcall	.+0      	; 0x235e <Num_length+0x6>
    235e:	0f 92       	push	r0
    2360:	cd b7       	in	r28, 0x3d	; 61
    2362:	de b7       	in	r29, 0x3e	; 62
    2364:	9b 83       	std	Y+3, r25	; 0x03
    2366:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Cnt = 0;
    2368:	19 82       	std	Y+1, r1	; 0x01
    236a:	0d c0       	rjmp	.+26     	; 0x2386 <Num_length+0x2e>
	while (num != 0) {
		num /= 10;
    236c:	8a 81       	ldd	r24, Y+2	; 0x02
    236e:	9b 81       	ldd	r25, Y+3	; 0x03
    2370:	2a e0       	ldi	r18, 0x0A	; 10
    2372:	30 e0       	ldi	r19, 0x00	; 0
    2374:	b9 01       	movw	r22, r18
    2376:	0e 94 2d 20 	call	0x405a	; 0x405a <__udivmodhi4>
    237a:	cb 01       	movw	r24, r22
    237c:	9b 83       	std	Y+3, r25	; 0x03
    237e:	8a 83       	std	Y+2, r24	; 0x02
		Local_u8Cnt++;
    2380:	89 81       	ldd	r24, Y+1	; 0x01
    2382:	8f 5f       	subi	r24, 0xFF	; 255
    2384:	89 83       	std	Y+1, r24	; 0x01
#include "STD_TYPES.h"
#include "CLCD_private.h"

u8 Num_length(u16 num) {
	u8 Local_u8Cnt = 0;
	while (num != 0) {
    2386:	8a 81       	ldd	r24, Y+2	; 0x02
    2388:	9b 81       	ldd	r25, Y+3	; 0x03
    238a:	00 97       	sbiw	r24, 0x00	; 0
    238c:	79 f7       	brne	.-34     	; 0x236c <Num_length+0x14>
		num /= 10;
		Local_u8Cnt++;
	}
	return Local_u8Cnt;
    238e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2390:	0f 90       	pop	r0
    2392:	0f 90       	pop	r0
    2394:	0f 90       	pop	r0
    2396:	cf 91       	pop	r28
    2398:	df 91       	pop	r29
    239a:	08 95       	ret

0000239c <Multi_N_10>:
u16 Multi_N_10(u8 N) {
    239c:	df 93       	push	r29
    239e:	cf 93       	push	r28
    23a0:	00 d0       	rcall	.+0      	; 0x23a2 <Multi_N_10+0x6>
    23a2:	00 d0       	rcall	.+0      	; 0x23a4 <Multi_N_10+0x8>
    23a4:	cd b7       	in	r28, 0x3d	; 61
    23a6:	de b7       	in	r29, 0x3e	; 62
    23a8:	8c 83       	std	Y+4, r24	; 0x04
	u8 Local_u8Cnt;
	u16 p = 1;
    23aa:	81 e0       	ldi	r24, 0x01	; 1
    23ac:	90 e0       	ldi	r25, 0x00	; 0
    23ae:	9a 83       	std	Y+2, r25	; 0x02
    23b0:	89 83       	std	Y+1, r24	; 0x01
	for (Local_u8Cnt = 0; Local_u8Cnt < N; Local_u8Cnt++)
    23b2:	1b 82       	std	Y+3, r1	; 0x03
    23b4:	11 c0       	rjmp	.+34     	; 0x23d8 <Multi_N_10+0x3c>
		p *= 10;
    23b6:	89 81       	ldd	r24, Y+1	; 0x01
    23b8:	9a 81       	ldd	r25, Y+2	; 0x02
    23ba:	9c 01       	movw	r18, r24
    23bc:	22 0f       	add	r18, r18
    23be:	33 1f       	adc	r19, r19
    23c0:	c9 01       	movw	r24, r18
    23c2:	88 0f       	add	r24, r24
    23c4:	99 1f       	adc	r25, r25
    23c6:	88 0f       	add	r24, r24
    23c8:	99 1f       	adc	r25, r25
    23ca:	82 0f       	add	r24, r18
    23cc:	93 1f       	adc	r25, r19
    23ce:	9a 83       	std	Y+2, r25	; 0x02
    23d0:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8Cnt;
}
u16 Multi_N_10(u8 N) {
	u8 Local_u8Cnt;
	u16 p = 1;
	for (Local_u8Cnt = 0; Local_u8Cnt < N; Local_u8Cnt++)
    23d2:	8b 81       	ldd	r24, Y+3	; 0x03
    23d4:	8f 5f       	subi	r24, 0xFF	; 255
    23d6:	8b 83       	std	Y+3, r24	; 0x03
    23d8:	9b 81       	ldd	r25, Y+3	; 0x03
    23da:	8c 81       	ldd	r24, Y+4	; 0x04
    23dc:	98 17       	cp	r25, r24
    23de:	58 f3       	brcs	.-42     	; 0x23b6 <Multi_N_10+0x1a>
		p *= 10;
	return p;
    23e0:	89 81       	ldd	r24, Y+1	; 0x01
    23e2:	9a 81       	ldd	r25, Y+2	; 0x02
}
    23e4:	0f 90       	pop	r0
    23e6:	0f 90       	pop	r0
    23e8:	0f 90       	pop	r0
    23ea:	0f 90       	pop	r0
    23ec:	cf 91       	pop	r28
    23ee:	df 91       	pop	r29
    23f0:	08 95       	ret

000023f2 <main>:
u8 ARRADC[2]={0,1};
u16 result[2]={0};
Chain_t channel={ARRADC,2,result,NotifyFunc};
//u16 Local_u16readingchannel;
void main()
{
    23f2:	0f 93       	push	r16
    23f4:	1f 93       	push	r17
    23f6:	df 93       	push	r29
    23f8:	cf 93       	push	r28
    23fa:	cd b7       	in	r28, 0x3d	; 61
    23fc:	de b7       	in	r29, 0x3e	; 62
    23fe:	c7 55       	subi	r28, 0x57	; 87
    2400:	d0 40       	sbci	r29, 0x00	; 0
    2402:	0f b6       	in	r0, 0x3f	; 63
    2404:	f8 94       	cli
    2406:	de bf       	out	0x3e, r29	; 62
    2408:	0f be       	out	0x3f, r0	; 63
    240a:	cd bf       	out	0x3d, r28	; 61
	PORT_voidInit();
	while(1)
	{
		BuzzerSound();
	}*/
	PORT_voidInit();
    240c:	0e 94 c2 10 	call	0x2184	; 0x2184 <PORT_voidInit>
	CLCD_voidInit();
    2410:	0e 94 85 0b 	call	0x170a	; 0x170a <CLCD_voidInit>
	ADC_voidInit();
    2414:	0e 94 a3 05 	call	0xb46	; 0xb46 <ADC_voidInit>
	GINT_voidEnable();
    2418:	0e 94 2e 10 	call	0x205c	; 0x205c <GINT_voidEnable>

	/*kpd ,SSd Number*/
	u8 Keypress=45,trials=2;
    241c:	fe 01       	movw	r30, r28
    241e:	e1 5b       	subi	r30, 0xB1	; 177
    2420:	ff 4f       	sbci	r31, 0xFF	; 255
    2422:	8d e2       	ldi	r24, 0x2D	; 45
    2424:	80 83       	st	Z, r24
    2426:	fe 01       	movw	r30, r28
    2428:	e2 5b       	subi	r30, 0xB2	; 178
    242a:	ff 4f       	sbci	r31, 0xFF	; 255
    242c:	82 e0       	ldi	r24, 0x02	; 2
    242e:	80 83       	st	Z, r24
	//voltage in milli ,password Storage variable
	u16  password=0,pass=0,p=1;
    2430:	fe 01       	movw	r30, r28
    2432:	e4 5b       	subi	r30, 0xB4	; 180
    2434:	ff 4f       	sbci	r31, 0xFF	; 255
    2436:	11 82       	std	Z+1, r1	; 0x01
    2438:	10 82       	st	Z, r1
    243a:	fe 01       	movw	r30, r28
    243c:	e6 5b       	subi	r30, 0xB6	; 182
    243e:	ff 4f       	sbci	r31, 0xFF	; 255
    2440:	11 82       	std	Z+1, r1	; 0x01
    2442:	10 82       	st	Z, r1
    2444:	fe 01       	movw	r30, r28
    2446:	e8 5b       	subi	r30, 0xB8	; 184
    2448:	ff 4f       	sbci	r31, 0xFF	; 255
    244a:	81 e0       	ldi	r24, 0x01	; 1
    244c:	90 e0       	ldi	r25, 0x00	; 0
    244e:	91 83       	std	Z+1, r25	; 0x01
    2450:	80 83       	st	Z, r24
	// entre or not
	u8 isEntered=0;
    2452:	fe 01       	movw	r30, r28
    2454:	e9 5b       	subi	r30, 0xB9	; 185
    2456:	ff 4f       	sbci	r31, 0xFF	; 255
    2458:	10 82       	st	Z, r1
	// SSD arr 1 => 3
	u8 arr[3]={SSD_u8VisableNUM1,SSD_u8VisableNUM2,SSD_u8VisableNUM3};
    245a:	ce 01       	movw	r24, r28
    245c:	80 5b       	subi	r24, 0xB0	; 176
    245e:	9f 4f       	sbci	r25, 0xFF	; 255
    2460:	65 96       	adiw	r28, 0x15	; 21
    2462:	9f af       	std	Y+63, r25	; 0x3f
    2464:	8e af       	std	Y+62, r24	; 0x3e
    2466:	65 97       	sbiw	r28, 0x15	; 21
    2468:	48 ef       	ldi	r20, 0xF8	; 248
    246a:	50 e0       	ldi	r21, 0x00	; 0
    246c:	67 96       	adiw	r28, 0x17	; 23
    246e:	5f af       	std	Y+63, r21	; 0x3f
    2470:	4e af       	std	Y+62, r20	; 0x3e
    2472:	67 97       	sbiw	r28, 0x17	; 23
    2474:	53 e0       	ldi	r21, 0x03	; 3
    2476:	68 96       	adiw	r28, 0x18	; 24
    2478:	5f af       	std	Y+63, r21	; 0x3f
    247a:	68 97       	sbiw	r28, 0x18	; 24
    247c:	67 96       	adiw	r28, 0x17	; 23
    247e:	ee ad       	ldd	r30, Y+62	; 0x3e
    2480:	ff ad       	ldd	r31, Y+63	; 0x3f
    2482:	67 97       	sbiw	r28, 0x17	; 23
    2484:	00 80       	ld	r0, Z
    2486:	67 96       	adiw	r28, 0x17	; 23
    2488:	4e ad       	ldd	r20, Y+62	; 0x3e
    248a:	5f ad       	ldd	r21, Y+63	; 0x3f
    248c:	67 97       	sbiw	r28, 0x17	; 23
    248e:	4f 5f       	subi	r20, 0xFF	; 255
    2490:	5f 4f       	sbci	r21, 0xFF	; 255
    2492:	67 96       	adiw	r28, 0x17	; 23
    2494:	5f af       	std	Y+63, r21	; 0x3f
    2496:	4e af       	std	Y+62, r20	; 0x3e
    2498:	67 97       	sbiw	r28, 0x17	; 23
    249a:	65 96       	adiw	r28, 0x15	; 21
    249c:	ee ad       	ldd	r30, Y+62	; 0x3e
    249e:	ff ad       	ldd	r31, Y+63	; 0x3f
    24a0:	65 97       	sbiw	r28, 0x15	; 21
    24a2:	00 82       	st	Z, r0
    24a4:	65 96       	adiw	r28, 0x15	; 21
    24a6:	4e ad       	ldd	r20, Y+62	; 0x3e
    24a8:	5f ad       	ldd	r21, Y+63	; 0x3f
    24aa:	65 97       	sbiw	r28, 0x15	; 21
    24ac:	4f 5f       	subi	r20, 0xFF	; 255
    24ae:	5f 4f       	sbci	r21, 0xFF	; 255
    24b0:	65 96       	adiw	r28, 0x15	; 21
    24b2:	5f af       	std	Y+63, r21	; 0x3f
    24b4:	4e af       	std	Y+62, r20	; 0x3e
    24b6:	65 97       	sbiw	r28, 0x15	; 21
    24b8:	68 96       	adiw	r28, 0x18	; 24
    24ba:	5f ad       	ldd	r21, Y+63	; 0x3f
    24bc:	68 97       	sbiw	r28, 0x18	; 24
    24be:	51 50       	subi	r21, 0x01	; 1
    24c0:	68 96       	adiw	r28, 0x18	; 24
    24c2:	5f af       	std	Y+63, r21	; 0x3f
    24c4:	68 97       	sbiw	r28, 0x18	; 24
    24c6:	68 96       	adiw	r28, 0x18	; 24
    24c8:	8f ad       	ldd	r24, Y+63	; 0x3f
    24ca:	68 97       	sbiw	r28, 0x18	; 24
    24cc:	88 23       	and	r24, r24
    24ce:	b1 f6       	brne	.-84     	; 0x247c <main+0x8a>
	// display 3
	DIO_u8SetPortValue(DIO_PORTC,arr[trials]);
    24d0:	fe 01       	movw	r30, r28
    24d2:	e2 5b       	subi	r30, 0xB2	; 178
    24d4:	ff 4f       	sbci	r31, 0xFF	; 255
    24d6:	80 81       	ld	r24, Z
    24d8:	28 2f       	mov	r18, r24
    24da:	30 e0       	ldi	r19, 0x00	; 0
    24dc:	ce 01       	movw	r24, r28
    24de:	80 5b       	subi	r24, 0xB0	; 176
    24e0:	9f 4f       	sbci	r25, 0xFF	; 255
    24e2:	fc 01       	movw	r30, r24
    24e4:	e2 0f       	add	r30, r18
    24e6:	f3 1f       	adc	r31, r19
    24e8:	90 81       	ld	r25, Z
    24ea:	82 e0       	ldi	r24, 0x02	; 2
    24ec:	69 2f       	mov	r22, r25
    24ee:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <DIO_u8SetPortValue>
	CLCD_voidSendString("WELCOME");
    24f2:	80 e6       	ldi	r24, 0x60	; 96
    24f4:	90 e0       	ldi	r25, 0x00	; 0
    24f6:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <CLCD_voidSendString>
    24fa:	fe 01       	movw	r30, r28
    24fc:	ed 5b       	subi	r30, 0xBD	; 189
    24fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2500:	80 e0       	ldi	r24, 0x00	; 0
    2502:	90 e0       	ldi	r25, 0x00	; 0
    2504:	aa e7       	ldi	r26, 0x7A	; 122
    2506:	b4 e4       	ldi	r27, 0x44	; 68
    2508:	80 83       	st	Z, r24
    250a:	91 83       	std	Z+1, r25	; 0x01
    250c:	a2 83       	std	Z+2, r26	; 0x02
    250e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2510:	8e 01       	movw	r16, r28
    2512:	01 5c       	subi	r16, 0xC1	; 193
    2514:	1f 4f       	sbci	r17, 0xFF	; 255
    2516:	fe 01       	movw	r30, r28
    2518:	ed 5b       	subi	r30, 0xBD	; 189
    251a:	ff 4f       	sbci	r31, 0xFF	; 255
    251c:	60 81       	ld	r22, Z
    251e:	71 81       	ldd	r23, Z+1	; 0x01
    2520:	82 81       	ldd	r24, Z+2	; 0x02
    2522:	93 81       	ldd	r25, Z+3	; 0x03
    2524:	20 e0       	ldi	r18, 0x00	; 0
    2526:	30 e0       	ldi	r19, 0x00	; 0
    2528:	4a ef       	ldi	r20, 0xFA	; 250
    252a:	54 e4       	ldi	r21, 0x44	; 68
    252c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2530:	dc 01       	movw	r26, r24
    2532:	cb 01       	movw	r24, r22
    2534:	f8 01       	movw	r30, r16
    2536:	80 83       	st	Z, r24
    2538:	91 83       	std	Z+1, r25	; 0x01
    253a:	a2 83       	std	Z+2, r26	; 0x02
    253c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    253e:	fe 01       	movw	r30, r28
    2540:	ff 96       	adiw	r30, 0x3f	; 63
    2542:	60 81       	ld	r22, Z
    2544:	71 81       	ldd	r23, Z+1	; 0x01
    2546:	82 81       	ldd	r24, Z+2	; 0x02
    2548:	93 81       	ldd	r25, Z+3	; 0x03
    254a:	20 e0       	ldi	r18, 0x00	; 0
    254c:	30 e0       	ldi	r19, 0x00	; 0
    254e:	40 e8       	ldi	r20, 0x80	; 128
    2550:	5f e3       	ldi	r21, 0x3F	; 63
    2552:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2556:	88 23       	and	r24, r24
    2558:	2c f4       	brge	.+10     	; 0x2564 <main+0x172>
		__ticks = 1;
    255a:	81 e0       	ldi	r24, 0x01	; 1
    255c:	90 e0       	ldi	r25, 0x00	; 0
    255e:	9e af       	std	Y+62, r25	; 0x3e
    2560:	8d af       	std	Y+61, r24	; 0x3d
    2562:	46 c0       	rjmp	.+140    	; 0x25f0 <main+0x1fe>
	else if (__tmp > 65535)
    2564:	fe 01       	movw	r30, r28
    2566:	ff 96       	adiw	r30, 0x3f	; 63
    2568:	60 81       	ld	r22, Z
    256a:	71 81       	ldd	r23, Z+1	; 0x01
    256c:	82 81       	ldd	r24, Z+2	; 0x02
    256e:	93 81       	ldd	r25, Z+3	; 0x03
    2570:	20 e0       	ldi	r18, 0x00	; 0
    2572:	3f ef       	ldi	r19, 0xFF	; 255
    2574:	4f e7       	ldi	r20, 0x7F	; 127
    2576:	57 e4       	ldi	r21, 0x47	; 71
    2578:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    257c:	18 16       	cp	r1, r24
    257e:	64 f5       	brge	.+88     	; 0x25d8 <main+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2580:	fe 01       	movw	r30, r28
    2582:	ed 5b       	subi	r30, 0xBD	; 189
    2584:	ff 4f       	sbci	r31, 0xFF	; 255
    2586:	60 81       	ld	r22, Z
    2588:	71 81       	ldd	r23, Z+1	; 0x01
    258a:	82 81       	ldd	r24, Z+2	; 0x02
    258c:	93 81       	ldd	r25, Z+3	; 0x03
    258e:	20 e0       	ldi	r18, 0x00	; 0
    2590:	30 e0       	ldi	r19, 0x00	; 0
    2592:	40 e2       	ldi	r20, 0x20	; 32
    2594:	51 e4       	ldi	r21, 0x41	; 65
    2596:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    259a:	dc 01       	movw	r26, r24
    259c:	cb 01       	movw	r24, r22
    259e:	bc 01       	movw	r22, r24
    25a0:	cd 01       	movw	r24, r26
    25a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25a6:	dc 01       	movw	r26, r24
    25a8:	cb 01       	movw	r24, r22
    25aa:	9e af       	std	Y+62, r25	; 0x3e
    25ac:	8d af       	std	Y+61, r24	; 0x3d
    25ae:	0f c0       	rjmp	.+30     	; 0x25ce <main+0x1dc>
    25b0:	88 ec       	ldi	r24, 0xC8	; 200
    25b2:	90 e0       	ldi	r25, 0x00	; 0
    25b4:	9c af       	std	Y+60, r25	; 0x3c
    25b6:	8b af       	std	Y+59, r24	; 0x3b
    25b8:	8b ad       	ldd	r24, Y+59	; 0x3b
    25ba:	9c ad       	ldd	r25, Y+60	; 0x3c
    25bc:	01 97       	sbiw	r24, 0x01	; 1
    25be:	f1 f7       	brne	.-4      	; 0x25bc <main+0x1ca>
    25c0:	9c af       	std	Y+60, r25	; 0x3c
    25c2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25c4:	8d ad       	ldd	r24, Y+61	; 0x3d
    25c6:	9e ad       	ldd	r25, Y+62	; 0x3e
    25c8:	01 97       	sbiw	r24, 0x01	; 1
    25ca:	9e af       	std	Y+62, r25	; 0x3e
    25cc:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25ce:	8d ad       	ldd	r24, Y+61	; 0x3d
    25d0:	9e ad       	ldd	r25, Y+62	; 0x3e
    25d2:	00 97       	sbiw	r24, 0x00	; 0
    25d4:	69 f7       	brne	.-38     	; 0x25b0 <main+0x1be>
    25d6:	16 c0       	rjmp	.+44     	; 0x2604 <main+0x212>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25d8:	fe 01       	movw	r30, r28
    25da:	ff 96       	adiw	r30, 0x3f	; 63
    25dc:	60 81       	ld	r22, Z
    25de:	71 81       	ldd	r23, Z+1	; 0x01
    25e0:	82 81       	ldd	r24, Z+2	; 0x02
    25e2:	93 81       	ldd	r25, Z+3	; 0x03
    25e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25e8:	dc 01       	movw	r26, r24
    25ea:	cb 01       	movw	r24, r22
    25ec:	9e af       	std	Y+62, r25	; 0x3e
    25ee:	8d af       	std	Y+61, r24	; 0x3d
    25f0:	8d ad       	ldd	r24, Y+61	; 0x3d
    25f2:	9e ad       	ldd	r25, Y+62	; 0x3e
    25f4:	9a af       	std	Y+58, r25	; 0x3a
    25f6:	89 af       	std	Y+57, r24	; 0x39
    25f8:	89 ad       	ldd	r24, Y+57	; 0x39
    25fa:	9a ad       	ldd	r25, Y+58	; 0x3a
    25fc:	01 97       	sbiw	r24, 0x01	; 1
    25fe:	f1 f7       	brne	.-4      	; 0x25fc <main+0x20a>
    2600:	9a af       	std	Y+58, r25	; 0x3a
    2602:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1000);
	CLCD_voidSendCommand(1);
    2604:	81 e0       	ldi	r24, 0x01	; 1
    2606:	0e 94 02 08 	call	0x1004	; 0x1004 <CLCD_voidSendCommand>
	while(1)
	{
		CLCD_voidSendCommand(1);
    260a:	81 e0       	ldi	r24, 0x01	; 1
    260c:	0e 94 02 08 	call	0x1004	; 0x1004 <CLCD_voidSendCommand>
		CLCD_voidSendString("Enter ID : ");
    2610:	88 e6       	ldi	r24, 0x68	; 104
    2612:	90 e0       	ldi	r25, 0x00	; 0
    2614:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <CLCD_voidSendString>
		do{
			do{
				Keypress=KPD_u8Key_pressed();
    2618:	0e 94 4a 10 	call	0x2094	; 0x2094 <KPD_u8Key_pressed>
    261c:	fe 01       	movw	r30, r28
    261e:	e1 5b       	subi	r30, 0xB1	; 177
    2620:	ff 4f       	sbci	r31, 0xFF	; 255
    2622:	80 83       	st	Z, r24
			}while(Keypress==0xff);
    2624:	fe 01       	movw	r30, r28
    2626:	e1 5b       	subi	r30, 0xB1	; 177
    2628:	ff 4f       	sbci	r31, 0xFF	; 255
    262a:	80 81       	ld	r24, Z
    262c:	8f 3f       	cpi	r24, 0xFF	; 255
    262e:	a1 f3       	breq	.-24     	; 0x2618 <main+0x226>
			if((0<=Keypress)&&(Keypress<=9)){
    2630:	fe 01       	movw	r30, r28
    2632:	e1 5b       	subi	r30, 0xB1	; 177
    2634:	ff 4f       	sbci	r31, 0xFF	; 255
    2636:	80 81       	ld	r24, Z
    2638:	8a 30       	cpi	r24, 0x0A	; 10
    263a:	08 f0       	brcs	.+2      	; 0x263e <main+0x24c>
    263c:	41 c0       	rjmp	.+130    	; 0x26c0 <main+0x2ce>
				isEntered=1;
    263e:	fe 01       	movw	r30, r28
    2640:	e9 5b       	subi	r30, 0xB9	; 185
    2642:	ff 4f       	sbci	r31, 0xFF	; 255
    2644:	81 e0       	ldi	r24, 0x01	; 1
    2646:	80 83       	st	Z, r24
				CLCD_voidWriteNumber(Keypress);
    2648:	fe 01       	movw	r30, r28
    264a:	e1 5b       	subi	r30, 0xB1	; 177
    264c:	ff 4f       	sbci	r31, 0xFF	; 255
    264e:	80 81       	ld	r24, Z
    2650:	88 2f       	mov	r24, r24
    2652:	90 e0       	ldi	r25, 0x00	; 0
    2654:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <CLCD_voidWriteNumber>
				pass=pass+Keypress*p;
    2658:	fe 01       	movw	r30, r28
    265a:	e1 5b       	subi	r30, 0xB1	; 177
    265c:	ff 4f       	sbci	r31, 0xFF	; 255
    265e:	80 81       	ld	r24, Z
    2660:	28 2f       	mov	r18, r24
    2662:	30 e0       	ldi	r19, 0x00	; 0
    2664:	fe 01       	movw	r30, r28
    2666:	e8 5b       	subi	r30, 0xB8	; 184
    2668:	ff 4f       	sbci	r31, 0xFF	; 255
    266a:	80 81       	ld	r24, Z
    266c:	91 81       	ldd	r25, Z+1	; 0x01
    266e:	a9 01       	movw	r20, r18
    2670:	48 9f       	mul	r20, r24
    2672:	90 01       	movw	r18, r0
    2674:	49 9f       	mul	r20, r25
    2676:	30 0d       	add	r19, r0
    2678:	58 9f       	mul	r21, r24
    267a:	30 0d       	add	r19, r0
    267c:	11 24       	eor	r1, r1
    267e:	de 01       	movw	r26, r28
    2680:	a6 5b       	subi	r26, 0xB6	; 182
    2682:	bf 4f       	sbci	r27, 0xFF	; 255
    2684:	fe 01       	movw	r30, r28
    2686:	e6 5b       	subi	r30, 0xB6	; 182
    2688:	ff 4f       	sbci	r31, 0xFF	; 255
    268a:	80 81       	ld	r24, Z
    268c:	91 81       	ldd	r25, Z+1	; 0x01
    268e:	82 0f       	add	r24, r18
    2690:	93 1f       	adc	r25, r19
    2692:	8d 93       	st	X+, r24
    2694:	9c 93       	st	X, r25
				p*=10;
    2696:	de 01       	movw	r26, r28
    2698:	a8 5b       	subi	r26, 0xB8	; 184
    269a:	bf 4f       	sbci	r27, 0xFF	; 255
    269c:	fe 01       	movw	r30, r28
    269e:	e8 5b       	subi	r30, 0xB8	; 184
    26a0:	ff 4f       	sbci	r31, 0xFF	; 255
    26a2:	80 81       	ld	r24, Z
    26a4:	91 81       	ldd	r25, Z+1	; 0x01
    26a6:	9c 01       	movw	r18, r24
    26a8:	22 0f       	add	r18, r18
    26aa:	33 1f       	adc	r19, r19
    26ac:	c9 01       	movw	r24, r18
    26ae:	88 0f       	add	r24, r24
    26b0:	99 1f       	adc	r25, r25
    26b2:	88 0f       	add	r24, r24
    26b4:	99 1f       	adc	r25, r25
    26b6:	82 0f       	add	r24, r18
    26b8:	93 1f       	adc	r25, r19
    26ba:	11 96       	adiw	r26, 0x01	; 1
    26bc:	9c 93       	st	X, r25
    26be:	8e 93       	st	-X, r24
			}
		}while(Keypress!=14);
    26c0:	fe 01       	movw	r30, r28
    26c2:	e1 5b       	subi	r30, 0xB1	; 177
    26c4:	ff 4f       	sbci	r31, 0xFF	; 255
    26c6:	80 81       	ld	r24, Z
    26c8:	8e 30       	cpi	r24, 0x0E	; 14
    26ca:	09 f0       	breq	.+2      	; 0x26ce <main+0x2dc>
    26cc:	a5 cf       	rjmp	.-182    	; 0x2618 <main+0x226>
		p/=10;
    26ce:	8e 01       	movw	r16, r28
    26d0:	08 5b       	subi	r16, 0xB8	; 184
    26d2:	1f 4f       	sbci	r17, 0xFF	; 255
    26d4:	fe 01       	movw	r30, r28
    26d6:	e8 5b       	subi	r30, 0xB8	; 184
    26d8:	ff 4f       	sbci	r31, 0xFF	; 255
    26da:	80 81       	ld	r24, Z
    26dc:	91 81       	ldd	r25, Z+1	; 0x01
    26de:	2a e0       	ldi	r18, 0x0A	; 10
    26e0:	30 e0       	ldi	r19, 0x00	; 0
    26e2:	b9 01       	movw	r22, r18
    26e4:	0e 94 2d 20 	call	0x405a	; 0x405a <__udivmodhi4>
    26e8:	cb 01       	movw	r24, r22
    26ea:	f8 01       	movw	r30, r16
    26ec:	91 83       	std	Z+1, r25	; 0x01
    26ee:	80 83       	st	Z, r24
		//real password
		password=pass;
    26f0:	de 01       	movw	r26, r28
    26f2:	a4 5b       	subi	r26, 0xB4	; 180
    26f4:	bf 4f       	sbci	r27, 0xFF	; 255
    26f6:	fe 01       	movw	r30, r28
    26f8:	e6 5b       	subi	r30, 0xB6	; 182
    26fa:	ff 4f       	sbci	r31, 0xFF	; 255
    26fc:	80 81       	ld	r24, Z
    26fe:	91 81       	ldd	r25, Z+1	; 0x01
    2700:	8d 93       	st	X+, r24
    2702:	9c 93       	st	X, r25
		pass=0;
    2704:	fe 01       	movw	r30, r28
    2706:	e6 5b       	subi	r30, 0xB6	; 182
    2708:	ff 4f       	sbci	r31, 0xFF	; 255
    270a:	11 82       	std	Z+1, r1	; 0x01
    270c:	10 82       	st	Z, r1
		CLCD_voidSendCommand(1);
    270e:	81 e0       	ldi	r24, 0x01	; 1
    2710:	0e 94 02 08 	call	0x1004	; 0x1004 <CLCD_voidSendCommand>
		while(1){

			CLCD_voidSendString("Enter pass:");
    2714:	84 e7       	ldi	r24, 0x74	; 116
    2716:	90 e0       	ldi	r25, 0x00	; 0
    2718:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <CLCD_voidSendString>
			do{
				do{
					Keypress=KPD_u8Key_pressed();
    271c:	0e 94 4a 10 	call	0x2094	; 0x2094 <KPD_u8Key_pressed>
    2720:	fe 01       	movw	r30, r28
    2722:	e1 5b       	subi	r30, 0xB1	; 177
    2724:	ff 4f       	sbci	r31, 0xFF	; 255
    2726:	80 83       	st	Z, r24
				}while(Keypress==0xff);
    2728:	fe 01       	movw	r30, r28
    272a:	e1 5b       	subi	r30, 0xB1	; 177
    272c:	ff 4f       	sbci	r31, 0xFF	; 255
    272e:	80 81       	ld	r24, Z
    2730:	8f 3f       	cpi	r24, 0xFF	; 255
    2732:	a1 f3       	breq	.-24     	; 0x271c <main+0x32a>
				if((0<=Keypress)&&(Keypress<=9)){
    2734:	fe 01       	movw	r30, r28
    2736:	e1 5b       	subi	r30, 0xB1	; 177
    2738:	ff 4f       	sbci	r31, 0xFF	; 255
    273a:	80 81       	ld	r24, Z
    273c:	8a 30       	cpi	r24, 0x0A	; 10
    273e:	c8 f5       	brcc	.+114    	; 0x27b2 <main+0x3c0>

					CLCD_voidWriteNumber(Keypress);
    2740:	fe 01       	movw	r30, r28
    2742:	e1 5b       	subi	r30, 0xB1	; 177
    2744:	ff 4f       	sbci	r31, 0xFF	; 255
    2746:	80 81       	ld	r24, Z
    2748:	88 2f       	mov	r24, r24
    274a:	90 e0       	ldi	r25, 0x00	; 0
    274c:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <CLCD_voidWriteNumber>
					pass=pass+Keypress*p;
    2750:	fe 01       	movw	r30, r28
    2752:	e1 5b       	subi	r30, 0xB1	; 177
    2754:	ff 4f       	sbci	r31, 0xFF	; 255
    2756:	80 81       	ld	r24, Z
    2758:	28 2f       	mov	r18, r24
    275a:	30 e0       	ldi	r19, 0x00	; 0
    275c:	fe 01       	movw	r30, r28
    275e:	e8 5b       	subi	r30, 0xB8	; 184
    2760:	ff 4f       	sbci	r31, 0xFF	; 255
    2762:	80 81       	ld	r24, Z
    2764:	91 81       	ldd	r25, Z+1	; 0x01
    2766:	a9 01       	movw	r20, r18
    2768:	48 9f       	mul	r20, r24
    276a:	90 01       	movw	r18, r0
    276c:	49 9f       	mul	r20, r25
    276e:	30 0d       	add	r19, r0
    2770:	58 9f       	mul	r21, r24
    2772:	30 0d       	add	r19, r0
    2774:	11 24       	eor	r1, r1
    2776:	de 01       	movw	r26, r28
    2778:	a6 5b       	subi	r26, 0xB6	; 182
    277a:	bf 4f       	sbci	r27, 0xFF	; 255
    277c:	fe 01       	movw	r30, r28
    277e:	e6 5b       	subi	r30, 0xB6	; 182
    2780:	ff 4f       	sbci	r31, 0xFF	; 255
    2782:	80 81       	ld	r24, Z
    2784:	91 81       	ldd	r25, Z+1	; 0x01
    2786:	82 0f       	add	r24, r18
    2788:	93 1f       	adc	r25, r19
    278a:	11 96       	adiw	r26, 0x01	; 1
    278c:	9c 93       	st	X, r25
    278e:	8e 93       	st	-X, r24
					p/=10;
    2790:	8e 01       	movw	r16, r28
    2792:	08 5b       	subi	r16, 0xB8	; 184
    2794:	1f 4f       	sbci	r17, 0xFF	; 255
    2796:	fe 01       	movw	r30, r28
    2798:	e8 5b       	subi	r30, 0xB8	; 184
    279a:	ff 4f       	sbci	r31, 0xFF	; 255
    279c:	80 81       	ld	r24, Z
    279e:	91 81       	ldd	r25, Z+1	; 0x01
    27a0:	2a e0       	ldi	r18, 0x0A	; 10
    27a2:	30 e0       	ldi	r19, 0x00	; 0
    27a4:	b9 01       	movw	r22, r18
    27a6:	0e 94 2d 20 	call	0x405a	; 0x405a <__udivmodhi4>
    27aa:	cb 01       	movw	r24, r22
    27ac:	f8 01       	movw	r30, r16
    27ae:	91 83       	std	Z+1, r25	; 0x01
    27b0:	80 83       	st	Z, r24
				}
			}while(Keypress!=14);
    27b2:	fe 01       	movw	r30, r28
    27b4:	e1 5b       	subi	r30, 0xB1	; 177
    27b6:	ff 4f       	sbci	r31, 0xFF	; 255
    27b8:	80 81       	ld	r24, Z
    27ba:	8e 30       	cpi	r24, 0x0E	; 14
    27bc:	09 f0       	breq	.+2      	; 0x27c0 <main+0x3ce>
    27be:	ae cf       	rjmp	.-164    	; 0x271c <main+0x32a>
			CLCD_voidGoToXY(1,0);
    27c0:	81 e0       	ldi	r24, 0x01	; 1
    27c2:	60 e0       	ldi	r22, 0x00	; 0
    27c4:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <CLCD_voidGoToXY>
			CLCD_voidWriteNumber(pass);
    27c8:	fe 01       	movw	r30, r28
    27ca:	e6 5b       	subi	r30, 0xB6	; 182
    27cc:	ff 4f       	sbci	r31, 0xFF	; 255
    27ce:	80 81       	ld	r24, Z
    27d0:	91 81       	ldd	r25, Z+1	; 0x01
    27d2:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <CLCD_voidWriteNumber>
			CLCD_voidSendData(' ');
    27d6:	80 e2       	ldi	r24, 0x20	; 32
    27d8:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <CLCD_voidSendData>
			CLCD_voidWriteNumber(password);
    27dc:	fe 01       	movw	r30, r28
    27de:	e4 5b       	subi	r30, 0xB4	; 180
    27e0:	ff 4f       	sbci	r31, 0xFF	; 255
    27e2:	80 81       	ld	r24, Z
    27e4:	91 81       	ldd	r25, Z+1	; 0x01
    27e6:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <CLCD_voidWriteNumber>
    27ea:	80 e0       	ldi	r24, 0x00	; 0
    27ec:	90 e0       	ldi	r25, 0x00	; 0
    27ee:	aa e7       	ldi	r26, 0x7A	; 122
    27f0:	b4 e4       	ldi	r27, 0x44	; 68
    27f2:	8d ab       	std	Y+53, r24	; 0x35
    27f4:	9e ab       	std	Y+54, r25	; 0x36
    27f6:	af ab       	std	Y+55, r26	; 0x37
    27f8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27fa:	6d a9       	ldd	r22, Y+53	; 0x35
    27fc:	7e a9       	ldd	r23, Y+54	; 0x36
    27fe:	8f a9       	ldd	r24, Y+55	; 0x37
    2800:	98 ad       	ldd	r25, Y+56	; 0x38
    2802:	20 e0       	ldi	r18, 0x00	; 0
    2804:	30 e0       	ldi	r19, 0x00	; 0
    2806:	4a ef       	ldi	r20, 0xFA	; 250
    2808:	54 e4       	ldi	r21, 0x44	; 68
    280a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    280e:	dc 01       	movw	r26, r24
    2810:	cb 01       	movw	r24, r22
    2812:	89 ab       	std	Y+49, r24	; 0x31
    2814:	9a ab       	std	Y+50, r25	; 0x32
    2816:	ab ab       	std	Y+51, r26	; 0x33
    2818:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    281a:	69 a9       	ldd	r22, Y+49	; 0x31
    281c:	7a a9       	ldd	r23, Y+50	; 0x32
    281e:	8b a9       	ldd	r24, Y+51	; 0x33
    2820:	9c a9       	ldd	r25, Y+52	; 0x34
    2822:	20 e0       	ldi	r18, 0x00	; 0
    2824:	30 e0       	ldi	r19, 0x00	; 0
    2826:	40 e8       	ldi	r20, 0x80	; 128
    2828:	5f e3       	ldi	r21, 0x3F	; 63
    282a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    282e:	88 23       	and	r24, r24
    2830:	2c f4       	brge	.+10     	; 0x283c <main+0x44a>
		__ticks = 1;
    2832:	81 e0       	ldi	r24, 0x01	; 1
    2834:	90 e0       	ldi	r25, 0x00	; 0
    2836:	98 ab       	std	Y+48, r25	; 0x30
    2838:	8f a7       	std	Y+47, r24	; 0x2f
    283a:	3f c0       	rjmp	.+126    	; 0x28ba <main+0x4c8>
	else if (__tmp > 65535)
    283c:	69 a9       	ldd	r22, Y+49	; 0x31
    283e:	7a a9       	ldd	r23, Y+50	; 0x32
    2840:	8b a9       	ldd	r24, Y+51	; 0x33
    2842:	9c a9       	ldd	r25, Y+52	; 0x34
    2844:	20 e0       	ldi	r18, 0x00	; 0
    2846:	3f ef       	ldi	r19, 0xFF	; 255
    2848:	4f e7       	ldi	r20, 0x7F	; 127
    284a:	57 e4       	ldi	r21, 0x47	; 71
    284c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2850:	18 16       	cp	r1, r24
    2852:	4c f5       	brge	.+82     	; 0x28a6 <main+0x4b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2854:	6d a9       	ldd	r22, Y+53	; 0x35
    2856:	7e a9       	ldd	r23, Y+54	; 0x36
    2858:	8f a9       	ldd	r24, Y+55	; 0x37
    285a:	98 ad       	ldd	r25, Y+56	; 0x38
    285c:	20 e0       	ldi	r18, 0x00	; 0
    285e:	30 e0       	ldi	r19, 0x00	; 0
    2860:	40 e2       	ldi	r20, 0x20	; 32
    2862:	51 e4       	ldi	r21, 0x41	; 65
    2864:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2868:	dc 01       	movw	r26, r24
    286a:	cb 01       	movw	r24, r22
    286c:	bc 01       	movw	r22, r24
    286e:	cd 01       	movw	r24, r26
    2870:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2874:	dc 01       	movw	r26, r24
    2876:	cb 01       	movw	r24, r22
    2878:	98 ab       	std	Y+48, r25	; 0x30
    287a:	8f a7       	std	Y+47, r24	; 0x2f
    287c:	0f c0       	rjmp	.+30     	; 0x289c <main+0x4aa>
    287e:	88 ec       	ldi	r24, 0xC8	; 200
    2880:	90 e0       	ldi	r25, 0x00	; 0
    2882:	9e a7       	std	Y+46, r25	; 0x2e
    2884:	8d a7       	std	Y+45, r24	; 0x2d
    2886:	8d a5       	ldd	r24, Y+45	; 0x2d
    2888:	9e a5       	ldd	r25, Y+46	; 0x2e
    288a:	01 97       	sbiw	r24, 0x01	; 1
    288c:	f1 f7       	brne	.-4      	; 0x288a <main+0x498>
    288e:	9e a7       	std	Y+46, r25	; 0x2e
    2890:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2892:	8f a5       	ldd	r24, Y+47	; 0x2f
    2894:	98 a9       	ldd	r25, Y+48	; 0x30
    2896:	01 97       	sbiw	r24, 0x01	; 1
    2898:	98 ab       	std	Y+48, r25	; 0x30
    289a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    289c:	8f a5       	ldd	r24, Y+47	; 0x2f
    289e:	98 a9       	ldd	r25, Y+48	; 0x30
    28a0:	00 97       	sbiw	r24, 0x00	; 0
    28a2:	69 f7       	brne	.-38     	; 0x287e <main+0x48c>
    28a4:	14 c0       	rjmp	.+40     	; 0x28ce <main+0x4dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28a6:	69 a9       	ldd	r22, Y+49	; 0x31
    28a8:	7a a9       	ldd	r23, Y+50	; 0x32
    28aa:	8b a9       	ldd	r24, Y+51	; 0x33
    28ac:	9c a9       	ldd	r25, Y+52	; 0x34
    28ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28b2:	dc 01       	movw	r26, r24
    28b4:	cb 01       	movw	r24, r22
    28b6:	98 ab       	std	Y+48, r25	; 0x30
    28b8:	8f a7       	std	Y+47, r24	; 0x2f
    28ba:	8f a5       	ldd	r24, Y+47	; 0x2f
    28bc:	98 a9       	ldd	r25, Y+48	; 0x30
    28be:	9c a7       	std	Y+44, r25	; 0x2c
    28c0:	8b a7       	std	Y+43, r24	; 0x2b
    28c2:	8b a5       	ldd	r24, Y+43	; 0x2b
    28c4:	9c a5       	ldd	r25, Y+44	; 0x2c
    28c6:	01 97       	sbiw	r24, 0x01	; 1
    28c8:	f1 f7       	brne	.-4      	; 0x28c6 <main+0x4d4>
    28ca:	9c a7       	std	Y+44, r25	; 0x2c
    28cc:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(1000);
			if((pass==password)&&(isEntered==1))
    28ce:	fe 01       	movw	r30, r28
    28d0:	e6 5b       	subi	r30, 0xB6	; 182
    28d2:	ff 4f       	sbci	r31, 0xFF	; 255
    28d4:	de 01       	movw	r26, r28
    28d6:	a4 5b       	subi	r26, 0xB4	; 180
    28d8:	bf 4f       	sbci	r27, 0xFF	; 255
    28da:	20 81       	ld	r18, Z
    28dc:	31 81       	ldd	r19, Z+1	; 0x01
    28de:	8d 91       	ld	r24, X+
    28e0:	9c 91       	ld	r25, X
    28e2:	11 97       	sbiw	r26, 0x01	; 1
    28e4:	28 17       	cp	r18, r24
    28e6:	39 07       	cpc	r19, r25
    28e8:	09 f0       	breq	.+2      	; 0x28ec <main+0x4fa>
    28ea:	97 c0       	rjmp	.+302    	; 0x2a1a <main+0x628>
    28ec:	fe 01       	movw	r30, r28
    28ee:	e9 5b       	subi	r30, 0xB9	; 185
    28f0:	ff 4f       	sbci	r31, 0xFF	; 255
    28f2:	80 81       	ld	r24, Z
    28f4:	81 30       	cpi	r24, 0x01	; 1
    28f6:	09 f0       	breq	.+2      	; 0x28fa <main+0x508>
    28f8:	90 c0       	rjmp	.+288    	; 0x2a1a <main+0x628>
			{
				CLCD_voidSendCommand(1);
    28fa:	81 e0       	ldi	r24, 0x01	; 1
    28fc:	0e 94 02 08 	call	0x1004	; 0x1004 <CLCD_voidSendCommand>
				CLCD_voidSendString("WELCOME ID ");
    2900:	80 e8       	ldi	r24, 0x80	; 128
    2902:	90 e0       	ldi	r25, 0x00	; 0
    2904:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <CLCD_voidSendString>
				CLCD_voidWriteNumber(pass);
    2908:	fe 01       	movw	r30, r28
    290a:	e6 5b       	subi	r30, 0xB6	; 182
    290c:	ff 4f       	sbci	r31, 0xFF	; 255
    290e:	80 81       	ld	r24, Z
    2910:	91 81       	ldd	r25, Z+1	; 0x01
    2912:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <CLCD_voidWriteNumber>
    2916:	80 e0       	ldi	r24, 0x00	; 0
    2918:	90 e0       	ldi	r25, 0x00	; 0
    291a:	aa e7       	ldi	r26, 0x7A	; 122
    291c:	b4 e4       	ldi	r27, 0x44	; 68
    291e:	8f a3       	std	Y+39, r24	; 0x27
    2920:	98 a7       	std	Y+40, r25	; 0x28
    2922:	a9 a7       	std	Y+41, r26	; 0x29
    2924:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2926:	6f a1       	ldd	r22, Y+39	; 0x27
    2928:	78 a5       	ldd	r23, Y+40	; 0x28
    292a:	89 a5       	ldd	r24, Y+41	; 0x29
    292c:	9a a5       	ldd	r25, Y+42	; 0x2a
    292e:	20 e0       	ldi	r18, 0x00	; 0
    2930:	30 e0       	ldi	r19, 0x00	; 0
    2932:	4a ef       	ldi	r20, 0xFA	; 250
    2934:	54 e4       	ldi	r21, 0x44	; 68
    2936:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    293a:	dc 01       	movw	r26, r24
    293c:	cb 01       	movw	r24, r22
    293e:	8b a3       	std	Y+35, r24	; 0x23
    2940:	9c a3       	std	Y+36, r25	; 0x24
    2942:	ad a3       	std	Y+37, r26	; 0x25
    2944:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2946:	6b a1       	ldd	r22, Y+35	; 0x23
    2948:	7c a1       	ldd	r23, Y+36	; 0x24
    294a:	8d a1       	ldd	r24, Y+37	; 0x25
    294c:	9e a1       	ldd	r25, Y+38	; 0x26
    294e:	20 e0       	ldi	r18, 0x00	; 0
    2950:	30 e0       	ldi	r19, 0x00	; 0
    2952:	40 e8       	ldi	r20, 0x80	; 128
    2954:	5f e3       	ldi	r21, 0x3F	; 63
    2956:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    295a:	88 23       	and	r24, r24
    295c:	2c f4       	brge	.+10     	; 0x2968 <main+0x576>
		__ticks = 1;
    295e:	81 e0       	ldi	r24, 0x01	; 1
    2960:	90 e0       	ldi	r25, 0x00	; 0
    2962:	9a a3       	std	Y+34, r25	; 0x22
    2964:	89 a3       	std	Y+33, r24	; 0x21
    2966:	3f c0       	rjmp	.+126    	; 0x29e6 <main+0x5f4>
	else if (__tmp > 65535)
    2968:	6b a1       	ldd	r22, Y+35	; 0x23
    296a:	7c a1       	ldd	r23, Y+36	; 0x24
    296c:	8d a1       	ldd	r24, Y+37	; 0x25
    296e:	9e a1       	ldd	r25, Y+38	; 0x26
    2970:	20 e0       	ldi	r18, 0x00	; 0
    2972:	3f ef       	ldi	r19, 0xFF	; 255
    2974:	4f e7       	ldi	r20, 0x7F	; 127
    2976:	57 e4       	ldi	r21, 0x47	; 71
    2978:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    297c:	18 16       	cp	r1, r24
    297e:	4c f5       	brge	.+82     	; 0x29d2 <main+0x5e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2980:	6f a1       	ldd	r22, Y+39	; 0x27
    2982:	78 a5       	ldd	r23, Y+40	; 0x28
    2984:	89 a5       	ldd	r24, Y+41	; 0x29
    2986:	9a a5       	ldd	r25, Y+42	; 0x2a
    2988:	20 e0       	ldi	r18, 0x00	; 0
    298a:	30 e0       	ldi	r19, 0x00	; 0
    298c:	40 e2       	ldi	r20, 0x20	; 32
    298e:	51 e4       	ldi	r21, 0x41	; 65
    2990:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2994:	dc 01       	movw	r26, r24
    2996:	cb 01       	movw	r24, r22
    2998:	bc 01       	movw	r22, r24
    299a:	cd 01       	movw	r24, r26
    299c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29a0:	dc 01       	movw	r26, r24
    29a2:	cb 01       	movw	r24, r22
    29a4:	9a a3       	std	Y+34, r25	; 0x22
    29a6:	89 a3       	std	Y+33, r24	; 0x21
    29a8:	0f c0       	rjmp	.+30     	; 0x29c8 <main+0x5d6>
    29aa:	88 ec       	ldi	r24, 0xC8	; 200
    29ac:	90 e0       	ldi	r25, 0x00	; 0
    29ae:	98 a3       	std	Y+32, r25	; 0x20
    29b0:	8f 8f       	std	Y+31, r24	; 0x1f
    29b2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    29b4:	98 a1       	ldd	r25, Y+32	; 0x20
    29b6:	01 97       	sbiw	r24, 0x01	; 1
    29b8:	f1 f7       	brne	.-4      	; 0x29b6 <main+0x5c4>
    29ba:	98 a3       	std	Y+32, r25	; 0x20
    29bc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29be:	89 a1       	ldd	r24, Y+33	; 0x21
    29c0:	9a a1       	ldd	r25, Y+34	; 0x22
    29c2:	01 97       	sbiw	r24, 0x01	; 1
    29c4:	9a a3       	std	Y+34, r25	; 0x22
    29c6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29c8:	89 a1       	ldd	r24, Y+33	; 0x21
    29ca:	9a a1       	ldd	r25, Y+34	; 0x22
    29cc:	00 97       	sbiw	r24, 0x00	; 0
    29ce:	69 f7       	brne	.-38     	; 0x29aa <main+0x5b8>
    29d0:	14 c0       	rjmp	.+40     	; 0x29fa <main+0x608>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29d2:	6b a1       	ldd	r22, Y+35	; 0x23
    29d4:	7c a1       	ldd	r23, Y+36	; 0x24
    29d6:	8d a1       	ldd	r24, Y+37	; 0x25
    29d8:	9e a1       	ldd	r25, Y+38	; 0x26
    29da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29de:	dc 01       	movw	r26, r24
    29e0:	cb 01       	movw	r24, r22
    29e2:	9a a3       	std	Y+34, r25	; 0x22
    29e4:	89 a3       	std	Y+33, r24	; 0x21
    29e6:	89 a1       	ldd	r24, Y+33	; 0x21
    29e8:	9a a1       	ldd	r25, Y+34	; 0x22
    29ea:	9e 8f       	std	Y+30, r25	; 0x1e
    29ec:	8d 8f       	std	Y+29, r24	; 0x1d
    29ee:	8d 8d       	ldd	r24, Y+29	; 0x1d
    29f0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    29f2:	01 97       	sbiw	r24, 0x01	; 1
    29f4:	f1 f7       	brne	.-4      	; 0x29f2 <main+0x600>
    29f6:	9e 8f       	std	Y+30, r25	; 0x1e
    29f8:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(1000);
				CLCD_voidSendCommand(1);
    29fa:	81 e0       	ldi	r24, 0x01	; 1
    29fc:	0e 94 02 08 	call	0x1004	; 0x1004 <CLCD_voidSendCommand>
				DIO_u8SetPinValue(DIO_PORTB,DIO_PIN4,DIO_PIN_HIGH);
    2a00:	81 e0       	ldi	r24, 0x01	; 1
    2a02:	64 e0       	ldi	r22, 0x04	; 4
    2a04:	41 e0       	ldi	r20, 0x01	; 1
    2a06:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_u8SetPinValue>
				DIO_u8SetPinValue(DIO_PORTB,DIO_PIN5,DIO_PIN_LOW);
    2a0a:	81 e0       	ldi	r24, 0x01	; 1
    2a0c:	65 e0       	ldi	r22, 0x05	; 5
    2a0e:	40 e0       	ldi	r20, 0x00	; 0
    2a10:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_u8SetPinValue>
				//--------------------- system ---------------------
				while(1){
					LTSystem();
    2a14:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <LTSystem>
    2a18:	fd cf       	rjmp	.-6      	; 0x2a14 <main+0x622>
				}
			}
			else
			{
				if(isEntered==1){
    2a1a:	fe 01       	movw	r30, r28
    2a1c:	e9 5b       	subi	r30, 0xB9	; 185
    2a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a20:	80 81       	ld	r24, Z
    2a22:	81 30       	cpi	r24, 0x01	; 1
    2a24:	09 f0       	breq	.+2      	; 0x2a28 <main+0x636>
    2a26:	b8 c0       	rjmp	.+368    	; 0x2b98 <main+0x7a6>
					trials--;
    2a28:	de 01       	movw	r26, r28
    2a2a:	a2 5b       	subi	r26, 0xB2	; 178
    2a2c:	bf 4f       	sbci	r27, 0xFF	; 255
    2a2e:	fe 01       	movw	r30, r28
    2a30:	e2 5b       	subi	r30, 0xB2	; 178
    2a32:	ff 4f       	sbci	r31, 0xFF	; 255
    2a34:	80 81       	ld	r24, Z
    2a36:	81 50       	subi	r24, 0x01	; 1
    2a38:	8c 93       	st	X, r24
					DIO_u8SetPortValue(DIO_PORTC,arr[trials]);
    2a3a:	fe 01       	movw	r30, r28
    2a3c:	e2 5b       	subi	r30, 0xB2	; 178
    2a3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a40:	80 81       	ld	r24, Z
    2a42:	28 2f       	mov	r18, r24
    2a44:	30 e0       	ldi	r19, 0x00	; 0
    2a46:	ce 01       	movw	r24, r28
    2a48:	80 5b       	subi	r24, 0xB0	; 176
    2a4a:	9f 4f       	sbci	r25, 0xFF	; 255
    2a4c:	fc 01       	movw	r30, r24
    2a4e:	e2 0f       	add	r30, r18
    2a50:	f3 1f       	adc	r31, r19
    2a52:	90 81       	ld	r25, Z
    2a54:	82 e0       	ldi	r24, 0x02	; 2
    2a56:	69 2f       	mov	r22, r25
    2a58:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <DIO_u8SetPortValue>
					pass=0;
    2a5c:	fe 01       	movw	r30, r28
    2a5e:	e6 5b       	subi	r30, 0xB6	; 182
    2a60:	ff 4f       	sbci	r31, 0xFF	; 255
    2a62:	11 82       	std	Z+1, r1	; 0x01
    2a64:	10 82       	st	Z, r1
					password=0;
    2a66:	fe 01       	movw	r30, r28
    2a68:	e4 5b       	subi	r30, 0xB4	; 180
    2a6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a6c:	11 82       	std	Z+1, r1	; 0x01
    2a6e:	10 82       	st	Z, r1
					p=1;
    2a70:	fe 01       	movw	r30, r28
    2a72:	e8 5b       	subi	r30, 0xB8	; 184
    2a74:	ff 4f       	sbci	r31, 0xFF	; 255
    2a76:	81 e0       	ldi	r24, 0x01	; 1
    2a78:	90 e0       	ldi	r25, 0x00	; 0
    2a7a:	91 83       	std	Z+1, r25	; 0x01
    2a7c:	80 83       	st	Z, r24
					CLCD_voidSendCommand(1);
    2a7e:	81 e0       	ldi	r24, 0x01	; 1
    2a80:	0e 94 02 08 	call	0x1004	; 0x1004 <CLCD_voidSendCommand>
					CLCD_voidSendString("Try Again ! ");
    2a84:	8c e8       	ldi	r24, 0x8C	; 140
    2a86:	90 e0       	ldi	r25, 0x00	; 0
    2a88:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <CLCD_voidSendString>
    2a8c:	80 e0       	ldi	r24, 0x00	; 0
    2a8e:	90 e0       	ldi	r25, 0x00	; 0
    2a90:	aa e7       	ldi	r26, 0x7A	; 122
    2a92:	b4 e4       	ldi	r27, 0x44	; 68
    2a94:	89 8f       	std	Y+25, r24	; 0x19
    2a96:	9a 8f       	std	Y+26, r25	; 0x1a
    2a98:	ab 8f       	std	Y+27, r26	; 0x1b
    2a9a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a9c:	69 8d       	ldd	r22, Y+25	; 0x19
    2a9e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2aa0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2aa2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2aa4:	20 e0       	ldi	r18, 0x00	; 0
    2aa6:	30 e0       	ldi	r19, 0x00	; 0
    2aa8:	4a ef       	ldi	r20, 0xFA	; 250
    2aaa:	54 e4       	ldi	r21, 0x44	; 68
    2aac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ab0:	dc 01       	movw	r26, r24
    2ab2:	cb 01       	movw	r24, r22
    2ab4:	8d 8b       	std	Y+21, r24	; 0x15
    2ab6:	9e 8b       	std	Y+22, r25	; 0x16
    2ab8:	af 8b       	std	Y+23, r26	; 0x17
    2aba:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2abc:	6d 89       	ldd	r22, Y+21	; 0x15
    2abe:	7e 89       	ldd	r23, Y+22	; 0x16
    2ac0:	8f 89       	ldd	r24, Y+23	; 0x17
    2ac2:	98 8d       	ldd	r25, Y+24	; 0x18
    2ac4:	20 e0       	ldi	r18, 0x00	; 0
    2ac6:	30 e0       	ldi	r19, 0x00	; 0
    2ac8:	40 e8       	ldi	r20, 0x80	; 128
    2aca:	5f e3       	ldi	r21, 0x3F	; 63
    2acc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ad0:	88 23       	and	r24, r24
    2ad2:	2c f4       	brge	.+10     	; 0x2ade <main+0x6ec>
		__ticks = 1;
    2ad4:	81 e0       	ldi	r24, 0x01	; 1
    2ad6:	90 e0       	ldi	r25, 0x00	; 0
    2ad8:	9c 8b       	std	Y+20, r25	; 0x14
    2ada:	8b 8b       	std	Y+19, r24	; 0x13
    2adc:	3f c0       	rjmp	.+126    	; 0x2b5c <main+0x76a>
	else if (__tmp > 65535)
    2ade:	6d 89       	ldd	r22, Y+21	; 0x15
    2ae0:	7e 89       	ldd	r23, Y+22	; 0x16
    2ae2:	8f 89       	ldd	r24, Y+23	; 0x17
    2ae4:	98 8d       	ldd	r25, Y+24	; 0x18
    2ae6:	20 e0       	ldi	r18, 0x00	; 0
    2ae8:	3f ef       	ldi	r19, 0xFF	; 255
    2aea:	4f e7       	ldi	r20, 0x7F	; 127
    2aec:	57 e4       	ldi	r21, 0x47	; 71
    2aee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2af2:	18 16       	cp	r1, r24
    2af4:	4c f5       	brge	.+82     	; 0x2b48 <main+0x756>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2af6:	69 8d       	ldd	r22, Y+25	; 0x19
    2af8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2afa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2afc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2afe:	20 e0       	ldi	r18, 0x00	; 0
    2b00:	30 e0       	ldi	r19, 0x00	; 0
    2b02:	40 e2       	ldi	r20, 0x20	; 32
    2b04:	51 e4       	ldi	r21, 0x41	; 65
    2b06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b0a:	dc 01       	movw	r26, r24
    2b0c:	cb 01       	movw	r24, r22
    2b0e:	bc 01       	movw	r22, r24
    2b10:	cd 01       	movw	r24, r26
    2b12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b16:	dc 01       	movw	r26, r24
    2b18:	cb 01       	movw	r24, r22
    2b1a:	9c 8b       	std	Y+20, r25	; 0x14
    2b1c:	8b 8b       	std	Y+19, r24	; 0x13
    2b1e:	0f c0       	rjmp	.+30     	; 0x2b3e <main+0x74c>
    2b20:	88 ec       	ldi	r24, 0xC8	; 200
    2b22:	90 e0       	ldi	r25, 0x00	; 0
    2b24:	9a 8b       	std	Y+18, r25	; 0x12
    2b26:	89 8b       	std	Y+17, r24	; 0x11
    2b28:	89 89       	ldd	r24, Y+17	; 0x11
    2b2a:	9a 89       	ldd	r25, Y+18	; 0x12
    2b2c:	01 97       	sbiw	r24, 0x01	; 1
    2b2e:	f1 f7       	brne	.-4      	; 0x2b2c <main+0x73a>
    2b30:	9a 8b       	std	Y+18, r25	; 0x12
    2b32:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b34:	8b 89       	ldd	r24, Y+19	; 0x13
    2b36:	9c 89       	ldd	r25, Y+20	; 0x14
    2b38:	01 97       	sbiw	r24, 0x01	; 1
    2b3a:	9c 8b       	std	Y+20, r25	; 0x14
    2b3c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b3e:	8b 89       	ldd	r24, Y+19	; 0x13
    2b40:	9c 89       	ldd	r25, Y+20	; 0x14
    2b42:	00 97       	sbiw	r24, 0x00	; 0
    2b44:	69 f7       	brne	.-38     	; 0x2b20 <main+0x72e>
    2b46:	14 c0       	rjmp	.+40     	; 0x2b70 <main+0x77e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b48:	6d 89       	ldd	r22, Y+21	; 0x15
    2b4a:	7e 89       	ldd	r23, Y+22	; 0x16
    2b4c:	8f 89       	ldd	r24, Y+23	; 0x17
    2b4e:	98 8d       	ldd	r25, Y+24	; 0x18
    2b50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b54:	dc 01       	movw	r26, r24
    2b56:	cb 01       	movw	r24, r22
    2b58:	9c 8b       	std	Y+20, r25	; 0x14
    2b5a:	8b 8b       	std	Y+19, r24	; 0x13
    2b5c:	8b 89       	ldd	r24, Y+19	; 0x13
    2b5e:	9c 89       	ldd	r25, Y+20	; 0x14
    2b60:	98 8b       	std	Y+16, r25	; 0x10
    2b62:	8f 87       	std	Y+15, r24	; 0x0f
    2b64:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b66:	98 89       	ldd	r25, Y+16	; 0x10
    2b68:	01 97       	sbiw	r24, 0x01	; 1
    2b6a:	f1 f7       	brne	.-4      	; 0x2b68 <main+0x776>
    2b6c:	98 8b       	std	Y+16, r25	; 0x10
    2b6e:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(1000);
					CLCD_voidSendCommand(1);
    2b70:	81 e0       	ldi	r24, 0x01	; 1
    2b72:	0e 94 02 08 	call	0x1004	; 0x1004 <CLCD_voidSendCommand>
					if(trials>0)
    2b76:	fe 01       	movw	r30, r28
    2b78:	e2 5b       	subi	r30, 0xB2	; 178
    2b7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b7c:	80 81       	ld	r24, Z
    2b7e:	88 23       	and	r24, r24
    2b80:	29 f0       	breq	.+10     	; 0x2b8c <main+0x79a>
					{
						isEntered=0;
    2b82:	fe 01       	movw	r30, r28
    2b84:	e9 5b       	subi	r30, 0xB9	; 185
    2b86:	ff 4f       	sbci	r31, 0xFF	; 255
    2b88:	10 82       	st	Z, r1
    2b8a:	c4 cd       	rjmp	.-1144   	; 0x2714 <main+0x322>
						continue;
					}else{
						DIO_u8SetPinValue(DIO_PORTA,DIO_PIN3,DIO_PIN_HIGH);
    2b8c:	80 e0       	ldi	r24, 0x00	; 0
    2b8e:	63 e0       	ldi	r22, 0x03	; 3
    2b90:	41 e0       	ldi	r20, 0x01	; 1
    2b92:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_u8SetPinValue>
    2b96:	39 cd       	rjmp	.-1422   	; 0x260a <main+0x218>
						break;
					}
				}
				else{
					CLCD_voidSendCommand(1);
    2b98:	81 e0       	ldi	r24, 0x01	; 1
    2b9a:	0e 94 02 08 	call	0x1004	; 0x1004 <CLCD_voidSendCommand>
					CLCD_voidSendString("   Please,");
    2b9e:	89 e9       	ldi	r24, 0x99	; 153
    2ba0:	90 e0       	ldi	r25, 0x00	; 0
    2ba2:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <CLCD_voidSendString>
					CLCD_voidGoToXY(1,0);
    2ba6:	81 e0       	ldi	r24, 0x01	; 1
    2ba8:	60 e0       	ldi	r22, 0x00	; 0
    2baa:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <CLCD_voidGoToXY>
					CLCD_voidSendString("Enter your data.");
    2bae:	84 ea       	ldi	r24, 0xA4	; 164
    2bb0:	90 e0       	ldi	r25, 0x00	; 0
    2bb2:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <CLCD_voidSendString>
    2bb6:	80 e0       	ldi	r24, 0x00	; 0
    2bb8:	90 e0       	ldi	r25, 0x00	; 0
    2bba:	aa e7       	ldi	r26, 0x7A	; 122
    2bbc:	b4 e4       	ldi	r27, 0x44	; 68
    2bbe:	8b 87       	std	Y+11, r24	; 0x0b
    2bc0:	9c 87       	std	Y+12, r25	; 0x0c
    2bc2:	ad 87       	std	Y+13, r26	; 0x0d
    2bc4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bc6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bc8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bca:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bcc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bce:	20 e0       	ldi	r18, 0x00	; 0
    2bd0:	30 e0       	ldi	r19, 0x00	; 0
    2bd2:	4a ef       	ldi	r20, 0xFA	; 250
    2bd4:	54 e4       	ldi	r21, 0x44	; 68
    2bd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bda:	dc 01       	movw	r26, r24
    2bdc:	cb 01       	movw	r24, r22
    2bde:	8f 83       	std	Y+7, r24	; 0x07
    2be0:	98 87       	std	Y+8, r25	; 0x08
    2be2:	a9 87       	std	Y+9, r26	; 0x09
    2be4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2be6:	6f 81       	ldd	r22, Y+7	; 0x07
    2be8:	78 85       	ldd	r23, Y+8	; 0x08
    2bea:	89 85       	ldd	r24, Y+9	; 0x09
    2bec:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bee:	20 e0       	ldi	r18, 0x00	; 0
    2bf0:	30 e0       	ldi	r19, 0x00	; 0
    2bf2:	40 e8       	ldi	r20, 0x80	; 128
    2bf4:	5f e3       	ldi	r21, 0x3F	; 63
    2bf6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2bfa:	88 23       	and	r24, r24
    2bfc:	2c f4       	brge	.+10     	; 0x2c08 <main+0x816>
		__ticks = 1;
    2bfe:	81 e0       	ldi	r24, 0x01	; 1
    2c00:	90 e0       	ldi	r25, 0x00	; 0
    2c02:	9e 83       	std	Y+6, r25	; 0x06
    2c04:	8d 83       	std	Y+5, r24	; 0x05
    2c06:	3f c0       	rjmp	.+126    	; 0x2c86 <main+0x894>
	else if (__tmp > 65535)
    2c08:	6f 81       	ldd	r22, Y+7	; 0x07
    2c0a:	78 85       	ldd	r23, Y+8	; 0x08
    2c0c:	89 85       	ldd	r24, Y+9	; 0x09
    2c0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c10:	20 e0       	ldi	r18, 0x00	; 0
    2c12:	3f ef       	ldi	r19, 0xFF	; 255
    2c14:	4f e7       	ldi	r20, 0x7F	; 127
    2c16:	57 e4       	ldi	r21, 0x47	; 71
    2c18:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c1c:	18 16       	cp	r1, r24
    2c1e:	4c f5       	brge	.+82     	; 0x2c72 <main+0x880>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c20:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c22:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c24:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c26:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c28:	20 e0       	ldi	r18, 0x00	; 0
    2c2a:	30 e0       	ldi	r19, 0x00	; 0
    2c2c:	40 e2       	ldi	r20, 0x20	; 32
    2c2e:	51 e4       	ldi	r21, 0x41	; 65
    2c30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c34:	dc 01       	movw	r26, r24
    2c36:	cb 01       	movw	r24, r22
    2c38:	bc 01       	movw	r22, r24
    2c3a:	cd 01       	movw	r24, r26
    2c3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c40:	dc 01       	movw	r26, r24
    2c42:	cb 01       	movw	r24, r22
    2c44:	9e 83       	std	Y+6, r25	; 0x06
    2c46:	8d 83       	std	Y+5, r24	; 0x05
    2c48:	0f c0       	rjmp	.+30     	; 0x2c68 <main+0x876>
    2c4a:	88 ec       	ldi	r24, 0xC8	; 200
    2c4c:	90 e0       	ldi	r25, 0x00	; 0
    2c4e:	9c 83       	std	Y+4, r25	; 0x04
    2c50:	8b 83       	std	Y+3, r24	; 0x03
    2c52:	8b 81       	ldd	r24, Y+3	; 0x03
    2c54:	9c 81       	ldd	r25, Y+4	; 0x04
    2c56:	01 97       	sbiw	r24, 0x01	; 1
    2c58:	f1 f7       	brne	.-4      	; 0x2c56 <main+0x864>
    2c5a:	9c 83       	std	Y+4, r25	; 0x04
    2c5c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c5e:	8d 81       	ldd	r24, Y+5	; 0x05
    2c60:	9e 81       	ldd	r25, Y+6	; 0x06
    2c62:	01 97       	sbiw	r24, 0x01	; 1
    2c64:	9e 83       	std	Y+6, r25	; 0x06
    2c66:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c68:	8d 81       	ldd	r24, Y+5	; 0x05
    2c6a:	9e 81       	ldd	r25, Y+6	; 0x06
    2c6c:	00 97       	sbiw	r24, 0x00	; 0
    2c6e:	69 f7       	brne	.-38     	; 0x2c4a <main+0x858>
    2c70:	51 cd       	rjmp	.-1374   	; 0x2714 <main+0x322>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c72:	6f 81       	ldd	r22, Y+7	; 0x07
    2c74:	78 85       	ldd	r23, Y+8	; 0x08
    2c76:	89 85       	ldd	r24, Y+9	; 0x09
    2c78:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c7e:	dc 01       	movw	r26, r24
    2c80:	cb 01       	movw	r24, r22
    2c82:	9e 83       	std	Y+6, r25	; 0x06
    2c84:	8d 83       	std	Y+5, r24	; 0x05
    2c86:	8d 81       	ldd	r24, Y+5	; 0x05
    2c88:	9e 81       	ldd	r25, Y+6	; 0x06
    2c8a:	9a 83       	std	Y+2, r25	; 0x02
    2c8c:	89 83       	std	Y+1, r24	; 0x01
    2c8e:	89 81       	ldd	r24, Y+1	; 0x01
    2c90:	9a 81       	ldd	r25, Y+2	; 0x02
    2c92:	01 97       	sbiw	r24, 0x01	; 1
    2c94:	f1 f7       	brne	.-4      	; 0x2c92 <main+0x8a0>
    2c96:	9a 83       	std	Y+2, r25	; 0x02
    2c98:	89 83       	std	Y+1, r24	; 0x01
    2c9a:	3c cd       	rjmp	.-1416   	; 0x2714 <main+0x322>

00002c9c <Maping>:
	}
	while(1);

}
u32 Maping(u32 MinRangeX,u32 MaxRangeX, u32 MinRangY, u32 MaxRangeY,u32 InpValue)
{
    2c9c:	af 92       	push	r10
    2c9e:	bf 92       	push	r11
    2ca0:	cf 92       	push	r12
    2ca2:	df 92       	push	r13
    2ca4:	ef 92       	push	r14
    2ca6:	ff 92       	push	r15
    2ca8:	0f 93       	push	r16
    2caa:	1f 93       	push	r17
    2cac:	df 93       	push	r29
    2cae:	cf 93       	push	r28
    2cb0:	cd b7       	in	r28, 0x3d	; 61
    2cb2:	de b7       	in	r29, 0x3e	; 62
    2cb4:	60 97       	sbiw	r28, 0x10	; 16
    2cb6:	0f b6       	in	r0, 0x3f	; 63
    2cb8:	f8 94       	cli
    2cba:	de bf       	out	0x3e, r29	; 62
    2cbc:	0f be       	out	0x3f, r0	; 63
    2cbe:	cd bf       	out	0x3d, r28	; 61
    2cc0:	69 83       	std	Y+1, r22	; 0x01
    2cc2:	7a 83       	std	Y+2, r23	; 0x02
    2cc4:	8b 83       	std	Y+3, r24	; 0x03
    2cc6:	9c 83       	std	Y+4, r25	; 0x04
    2cc8:	2d 83       	std	Y+5, r18	; 0x05
    2cca:	3e 83       	std	Y+6, r19	; 0x06
    2ccc:	4f 83       	std	Y+7, r20	; 0x07
    2cce:	58 87       	std	Y+8, r21	; 0x08
    2cd0:	e9 86       	std	Y+9, r14	; 0x09
    2cd2:	fa 86       	std	Y+10, r15	; 0x0a
    2cd4:	0b 87       	std	Y+11, r16	; 0x0b
    2cd6:	1c 87       	std	Y+12, r17	; 0x0c
    2cd8:	ad 86       	std	Y+13, r10	; 0x0d
    2cda:	be 86       	std	Y+14, r11	; 0x0e
    2cdc:	cf 86       	std	Y+15, r12	; 0x0f
    2cde:	d8 8a       	std	Y+16, r13	; 0x10
	return (((InpValue-MinRangeX)*(MaxRangeY-MinRangY)/(MaxRangeX-MinRangeX))+MinRangY);
    2ce0:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2ce2:	3e 8d       	ldd	r19, Y+30	; 0x1e
    2ce4:	4f 8d       	ldd	r20, Y+31	; 0x1f
    2ce6:	58 a1       	ldd	r21, Y+32	; 0x20
    2ce8:	89 81       	ldd	r24, Y+1	; 0x01
    2cea:	9a 81       	ldd	r25, Y+2	; 0x02
    2cec:	ab 81       	ldd	r26, Y+3	; 0x03
    2cee:	bc 81       	ldd	r27, Y+4	; 0x04
    2cf0:	79 01       	movw	r14, r18
    2cf2:	8a 01       	movw	r16, r20
    2cf4:	e8 1a       	sub	r14, r24
    2cf6:	f9 0a       	sbc	r15, r25
    2cf8:	0a 0b       	sbc	r16, r26
    2cfa:	1b 0b       	sbc	r17, r27
    2cfc:	2d 85       	ldd	r18, Y+13	; 0x0d
    2cfe:	3e 85       	ldd	r19, Y+14	; 0x0e
    2d00:	4f 85       	ldd	r20, Y+15	; 0x0f
    2d02:	58 89       	ldd	r21, Y+16	; 0x10
    2d04:	89 85       	ldd	r24, Y+9	; 0x09
    2d06:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d08:	ab 85       	ldd	r26, Y+11	; 0x0b
    2d0a:	bc 85       	ldd	r27, Y+12	; 0x0c
    2d0c:	28 1b       	sub	r18, r24
    2d0e:	39 0b       	sbc	r19, r25
    2d10:	4a 0b       	sbc	r20, r26
    2d12:	5b 0b       	sbc	r21, r27
    2d14:	c8 01       	movw	r24, r16
    2d16:	b7 01       	movw	r22, r14
    2d18:	0e 94 0e 20 	call	0x401c	; 0x401c <__mulsi3>
    2d1c:	7b 01       	movw	r14, r22
    2d1e:	8c 01       	movw	r16, r24
    2d20:	2d 81       	ldd	r18, Y+5	; 0x05
    2d22:	3e 81       	ldd	r19, Y+6	; 0x06
    2d24:	4f 81       	ldd	r20, Y+7	; 0x07
    2d26:	58 85       	ldd	r21, Y+8	; 0x08
    2d28:	89 81       	ldd	r24, Y+1	; 0x01
    2d2a:	9a 81       	ldd	r25, Y+2	; 0x02
    2d2c:	ab 81       	ldd	r26, Y+3	; 0x03
    2d2e:	bc 81       	ldd	r27, Y+4	; 0x04
    2d30:	28 1b       	sub	r18, r24
    2d32:	39 0b       	sbc	r19, r25
    2d34:	4a 0b       	sbc	r20, r26
    2d36:	5b 0b       	sbc	r21, r27
    2d38:	c8 01       	movw	r24, r16
    2d3a:	b7 01       	movw	r22, r14
    2d3c:	0e 94 41 20 	call	0x4082	; 0x4082 <__udivmodsi4>
    2d40:	da 01       	movw	r26, r20
    2d42:	c9 01       	movw	r24, r18
    2d44:	9c 01       	movw	r18, r24
    2d46:	ad 01       	movw	r20, r26
    2d48:	89 85       	ldd	r24, Y+9	; 0x09
    2d4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d4c:	ab 85       	ldd	r26, Y+11	; 0x0b
    2d4e:	bc 85       	ldd	r27, Y+12	; 0x0c
    2d50:	82 0f       	add	r24, r18
    2d52:	93 1f       	adc	r25, r19
    2d54:	a4 1f       	adc	r26, r20
    2d56:	b5 1f       	adc	r27, r21
}
    2d58:	bc 01       	movw	r22, r24
    2d5a:	cd 01       	movw	r24, r26
    2d5c:	60 96       	adiw	r28, 0x10	; 16
    2d5e:	0f b6       	in	r0, 0x3f	; 63
    2d60:	f8 94       	cli
    2d62:	de bf       	out	0x3e, r29	; 62
    2d64:	0f be       	out	0x3f, r0	; 63
    2d66:	cd bf       	out	0x3d, r28	; 61
    2d68:	cf 91       	pop	r28
    2d6a:	df 91       	pop	r29
    2d6c:	1f 91       	pop	r17
    2d6e:	0f 91       	pop	r16
    2d70:	ff 90       	pop	r15
    2d72:	ef 90       	pop	r14
    2d74:	df 90       	pop	r13
    2d76:	cf 90       	pop	r12
    2d78:	bf 90       	pop	r11
    2d7a:	af 90       	pop	r10
    2d7c:	08 95       	ret

00002d7e <LED_CONTROL>:

void LED_CONTROL(u8 ledNum)
{
    2d7e:	df 93       	push	r29
    2d80:	cf 93       	push	r28
    2d82:	0f 92       	push	r0
    2d84:	cd b7       	in	r28, 0x3d	; 61
    2d86:	de b7       	in	r29, 0x3e	; 62
    2d88:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPortValue(DIO_PORTC,(1<<ledNum)-1);
    2d8a:	89 81       	ldd	r24, Y+1	; 0x01
    2d8c:	28 2f       	mov	r18, r24
    2d8e:	30 e0       	ldi	r19, 0x00	; 0
    2d90:	81 e0       	ldi	r24, 0x01	; 1
    2d92:	90 e0       	ldi	r25, 0x00	; 0
    2d94:	02 c0       	rjmp	.+4      	; 0x2d9a <LED_CONTROL+0x1c>
    2d96:	88 0f       	add	r24, r24
    2d98:	99 1f       	adc	r25, r25
    2d9a:	2a 95       	dec	r18
    2d9c:	e2 f7       	brpl	.-8      	; 0x2d96 <LED_CONTROL+0x18>
    2d9e:	98 2f       	mov	r25, r24
    2da0:	91 50       	subi	r25, 0x01	; 1
    2da2:	82 e0       	ldi	r24, 0x02	; 2
    2da4:	69 2f       	mov	r22, r25
    2da6:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <DIO_u8SetPortValue>
}
    2daa:	0f 90       	pop	r0
    2dac:	cf 91       	pop	r28
    2dae:	df 91       	pop	r29
    2db0:	08 95       	ret

00002db2 <LTSystem>:
void LTSystem()
{
    2db2:	df 93       	push	r29
    2db4:	cf 93       	push	r28
    2db6:	cd b7       	in	r28, 0x3d	; 61
    2db8:	de b7       	in	r29, 0x3e	; 62
    2dba:	2e 97       	sbiw	r28, 0x0e	; 14
    2dbc:	0f b6       	in	r0, 0x3f	; 63
    2dbe:	f8 94       	cli
    2dc0:	de bf       	out	0x3e, r29	; 62
    2dc2:	0f be       	out	0x3f, r0	; 63
    2dc4:	cd bf       	out	0x3d, r28	; 61
	CLCD_voidSendCommand(1);
    2dc6:	81 e0       	ldi	r24, 0x01	; 1
    2dc8:	0e 94 02 08 	call	0x1004	; 0x1004 <CLCD_voidSendCommand>
	CLCD_voidGoToXY(0,0);
    2dcc:	80 e0       	ldi	r24, 0x00	; 0
    2dce:	60 e0       	ldi	r22, 0x00	; 0
    2dd0:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <CLCD_voidGoToXY>
	CLCD_voidSendString("temp : ");
    2dd4:	85 eb       	ldi	r24, 0xB5	; 181
    2dd6:	90 e0       	ldi	r25, 0x00	; 0
    2dd8:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <CLCD_voidSendString>
	CLCD_voidGoToXY(1,0);
    2ddc:	81 e0       	ldi	r24, 0x01	; 1
    2dde:	60 e0       	ldi	r22, 0x00	; 0
    2de0:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <CLCD_voidGoToXY>
	CLCD_voidSendString("leds : ");
    2de4:	8d eb       	ldi	r24, 0xBD	; 189
    2de6:	90 e0       	ldi	r25, 0x00	; 0
    2de8:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <CLCD_voidSendString>
	ADC_u8StartChainConvertionAsynch(&channel);
    2dec:	81 ef       	ldi	r24, 0xF1	; 241
    2dee:	90 e0       	ldi	r25, 0x00	; 0
    2df0:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <ADC_u8StartChainConvertionAsynch>
    2df4:	80 e0       	ldi	r24, 0x00	; 0
    2df6:	90 e0       	ldi	r25, 0x00	; 0
    2df8:	a0 ea       	ldi	r26, 0xA0	; 160
    2dfa:	b1 e4       	ldi	r27, 0x41	; 65
    2dfc:	8b 87       	std	Y+11, r24	; 0x0b
    2dfe:	9c 87       	std	Y+12, r25	; 0x0c
    2e00:	ad 87       	std	Y+13, r26	; 0x0d
    2e02:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e04:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e06:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e08:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e0a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e0c:	20 e0       	ldi	r18, 0x00	; 0
    2e0e:	30 e0       	ldi	r19, 0x00	; 0
    2e10:	4a ef       	ldi	r20, 0xFA	; 250
    2e12:	54 e4       	ldi	r21, 0x44	; 68
    2e14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e18:	dc 01       	movw	r26, r24
    2e1a:	cb 01       	movw	r24, r22
    2e1c:	8f 83       	std	Y+7, r24	; 0x07
    2e1e:	98 87       	std	Y+8, r25	; 0x08
    2e20:	a9 87       	std	Y+9, r26	; 0x09
    2e22:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e24:	6f 81       	ldd	r22, Y+7	; 0x07
    2e26:	78 85       	ldd	r23, Y+8	; 0x08
    2e28:	89 85       	ldd	r24, Y+9	; 0x09
    2e2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e2c:	20 e0       	ldi	r18, 0x00	; 0
    2e2e:	30 e0       	ldi	r19, 0x00	; 0
    2e30:	40 e8       	ldi	r20, 0x80	; 128
    2e32:	5f e3       	ldi	r21, 0x3F	; 63
    2e34:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e38:	88 23       	and	r24, r24
    2e3a:	2c f4       	brge	.+10     	; 0x2e46 <LTSystem+0x94>
		__ticks = 1;
    2e3c:	81 e0       	ldi	r24, 0x01	; 1
    2e3e:	90 e0       	ldi	r25, 0x00	; 0
    2e40:	9e 83       	std	Y+6, r25	; 0x06
    2e42:	8d 83       	std	Y+5, r24	; 0x05
    2e44:	3f c0       	rjmp	.+126    	; 0x2ec4 <LTSystem+0x112>
	else if (__tmp > 65535)
    2e46:	6f 81       	ldd	r22, Y+7	; 0x07
    2e48:	78 85       	ldd	r23, Y+8	; 0x08
    2e4a:	89 85       	ldd	r24, Y+9	; 0x09
    2e4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e4e:	20 e0       	ldi	r18, 0x00	; 0
    2e50:	3f ef       	ldi	r19, 0xFF	; 255
    2e52:	4f e7       	ldi	r20, 0x7F	; 127
    2e54:	57 e4       	ldi	r21, 0x47	; 71
    2e56:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e5a:	18 16       	cp	r1, r24
    2e5c:	4c f5       	brge	.+82     	; 0x2eb0 <LTSystem+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e5e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e60:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e62:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e64:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e66:	20 e0       	ldi	r18, 0x00	; 0
    2e68:	30 e0       	ldi	r19, 0x00	; 0
    2e6a:	40 e2       	ldi	r20, 0x20	; 32
    2e6c:	51 e4       	ldi	r21, 0x41	; 65
    2e6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e72:	dc 01       	movw	r26, r24
    2e74:	cb 01       	movw	r24, r22
    2e76:	bc 01       	movw	r22, r24
    2e78:	cd 01       	movw	r24, r26
    2e7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e7e:	dc 01       	movw	r26, r24
    2e80:	cb 01       	movw	r24, r22
    2e82:	9e 83       	std	Y+6, r25	; 0x06
    2e84:	8d 83       	std	Y+5, r24	; 0x05
    2e86:	0f c0       	rjmp	.+30     	; 0x2ea6 <LTSystem+0xf4>
    2e88:	88 ec       	ldi	r24, 0xC8	; 200
    2e8a:	90 e0       	ldi	r25, 0x00	; 0
    2e8c:	9c 83       	std	Y+4, r25	; 0x04
    2e8e:	8b 83       	std	Y+3, r24	; 0x03
    2e90:	8b 81       	ldd	r24, Y+3	; 0x03
    2e92:	9c 81       	ldd	r25, Y+4	; 0x04
    2e94:	01 97       	sbiw	r24, 0x01	; 1
    2e96:	f1 f7       	brne	.-4      	; 0x2e94 <LTSystem+0xe2>
    2e98:	9c 83       	std	Y+4, r25	; 0x04
    2e9a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e9c:	8d 81       	ldd	r24, Y+5	; 0x05
    2e9e:	9e 81       	ldd	r25, Y+6	; 0x06
    2ea0:	01 97       	sbiw	r24, 0x01	; 1
    2ea2:	9e 83       	std	Y+6, r25	; 0x06
    2ea4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ea6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ea8:	9e 81       	ldd	r25, Y+6	; 0x06
    2eaa:	00 97       	sbiw	r24, 0x00	; 0
    2eac:	69 f7       	brne	.-38     	; 0x2e88 <LTSystem+0xd6>
    2eae:	14 c0       	rjmp	.+40     	; 0x2ed8 <LTSystem+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2eb0:	6f 81       	ldd	r22, Y+7	; 0x07
    2eb2:	78 85       	ldd	r23, Y+8	; 0x08
    2eb4:	89 85       	ldd	r24, Y+9	; 0x09
    2eb6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2eb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ebc:	dc 01       	movw	r26, r24
    2ebe:	cb 01       	movw	r24, r22
    2ec0:	9e 83       	std	Y+6, r25	; 0x06
    2ec2:	8d 83       	std	Y+5, r24	; 0x05
    2ec4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ec6:	9e 81       	ldd	r25, Y+6	; 0x06
    2ec8:	9a 83       	std	Y+2, r25	; 0x02
    2eca:	89 83       	std	Y+1, r24	; 0x01
    2ecc:	89 81       	ldd	r24, Y+1	; 0x01
    2ece:	9a 81       	ldd	r25, Y+2	; 0x02
    2ed0:	01 97       	sbiw	r24, 0x01	; 1
    2ed2:	f1 f7       	brne	.-4      	; 0x2ed0 <LTSystem+0x11e>
    2ed4:	9a 83       	std	Y+2, r25	; 0x02
    2ed6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
	if(milliVolt>30){
    2ed8:	80 91 0b 01 	lds	r24, 0x010B
    2edc:	90 91 0c 01 	lds	r25, 0x010C
    2ee0:	8f 31       	cpi	r24, 0x1F	; 31
    2ee2:	91 05       	cpc	r25, r1
    2ee4:	30 f0       	brcs	.+12     	; 0x2ef2 <LTSystem+0x140>
		DIO_u8SetPinValue(DIO_PORTB,DIO_PIN6,DIO_PIN_HIGH);
    2ee6:	81 e0       	ldi	r24, 0x01	; 1
    2ee8:	66 e0       	ldi	r22, 0x06	; 6
    2eea:	41 e0       	ldi	r20, 0x01	; 1
    2eec:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_u8SetPinValue>
    2ef0:	05 c0       	rjmp	.+10     	; 0x2efc <LTSystem+0x14a>
	}
	else
		DIO_u8SetPinValue(DIO_PORTB,DIO_PIN6,DIO_PIN_LOW);
    2ef2:	81 e0       	ldi	r24, 0x01	; 1
    2ef4:	66 e0       	ldi	r22, 0x06	; 6
    2ef6:	40 e0       	ldi	r20, 0x00	; 0
    2ef8:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_u8SetPinValue>
}
    2efc:	2e 96       	adiw	r28, 0x0e	; 14
    2efe:	0f b6       	in	r0, 0x3f	; 63
    2f00:	f8 94       	cli
    2f02:	de bf       	out	0x3e, r29	; 62
    2f04:	0f be       	out	0x3f, r0	; 63
    2f06:	cd bf       	out	0x3d, r28	; 61
    2f08:	cf 91       	pop	r28
    2f0a:	df 91       	pop	r29
    2f0c:	08 95       	ret

00002f0e <NotifyFunc>:

void NotifyFunc()
{
    2f0e:	af 92       	push	r10
    2f10:	bf 92       	push	r11
    2f12:	cf 92       	push	r12
    2f14:	df 92       	push	r13
    2f16:	ef 92       	push	r14
    2f18:	ff 92       	push	r15
    2f1a:	0f 93       	push	r16
    2f1c:	1f 93       	push	r17
    2f1e:	df 93       	push	r29
    2f20:	cf 93       	push	r28
    2f22:	cd b7       	in	r28, 0x3d	; 61
    2f24:	de b7       	in	r29, 0x3e	; 62
	//DIO_u8SetPortValue(DIO_PORTD,Local_u16readingchannel);
	milliVolt=(u16)((u32)(channel.result[0])*5000UL/256UL);
    2f26:	e0 91 f4 00 	lds	r30, 0x00F4
    2f2a:	f0 91 f5 00 	lds	r31, 0x00F5
    2f2e:	80 81       	ld	r24, Z
    2f30:	91 81       	ldd	r25, Z+1	; 0x01
    2f32:	cc 01       	movw	r24, r24
    2f34:	a0 e0       	ldi	r26, 0x00	; 0
    2f36:	b0 e0       	ldi	r27, 0x00	; 0
    2f38:	28 e8       	ldi	r18, 0x88	; 136
    2f3a:	33 e1       	ldi	r19, 0x13	; 19
    2f3c:	40 e0       	ldi	r20, 0x00	; 0
    2f3e:	50 e0       	ldi	r21, 0x00	; 0
    2f40:	bc 01       	movw	r22, r24
    2f42:	cd 01       	movw	r24, r26
    2f44:	0e 94 0e 20 	call	0x401c	; 0x401c <__mulsi3>
    2f48:	dc 01       	movw	r26, r24
    2f4a:	cb 01       	movw	r24, r22
    2f4c:	89 2f       	mov	r24, r25
    2f4e:	9a 2f       	mov	r25, r26
    2f50:	ab 2f       	mov	r26, r27
    2f52:	bb 27       	eor	r27, r27
    2f54:	90 93 0c 01 	sts	0x010C, r25
    2f58:	80 93 0b 01 	sts	0x010B, r24
	milliVolt/=10;
    2f5c:	80 91 0b 01 	lds	r24, 0x010B
    2f60:	90 91 0c 01 	lds	r25, 0x010C
    2f64:	2a e0       	ldi	r18, 0x0A	; 10
    2f66:	30 e0       	ldi	r19, 0x00	; 0
    2f68:	b9 01       	movw	r22, r18
    2f6a:	0e 94 2d 20 	call	0x405a	; 0x405a <__udivmodhi4>
    2f6e:	cb 01       	movw	r24, r22
    2f70:	90 93 0c 01 	sts	0x010C, r25
    2f74:	80 93 0b 01 	sts	0x010B, r24
	CLCD_voidGoToXY(0,8);
    2f78:	80 e0       	ldi	r24, 0x00	; 0
    2f7a:	68 e0       	ldi	r22, 0x08	; 8
    2f7c:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <CLCD_voidGoToXY>
	CLCD_voidWriteNumber(milliVolt);
    2f80:	80 91 0b 01 	lds	r24, 0x010B
    2f84:	90 91 0c 01 	lds	r25, 0x010C
    2f88:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <CLCD_voidWriteNumber>
	milliVolt1=(u16)((u32)(channel.result[1])*5000UL/256UL);
    2f8c:	80 91 f4 00 	lds	r24, 0x00F4
    2f90:	90 91 f5 00 	lds	r25, 0x00F5
    2f94:	fc 01       	movw	r30, r24
    2f96:	32 96       	adiw	r30, 0x02	; 2
    2f98:	80 81       	ld	r24, Z
    2f9a:	91 81       	ldd	r25, Z+1	; 0x01
    2f9c:	cc 01       	movw	r24, r24
    2f9e:	a0 e0       	ldi	r26, 0x00	; 0
    2fa0:	b0 e0       	ldi	r27, 0x00	; 0
    2fa2:	28 e8       	ldi	r18, 0x88	; 136
    2fa4:	33 e1       	ldi	r19, 0x13	; 19
    2fa6:	40 e0       	ldi	r20, 0x00	; 0
    2fa8:	50 e0       	ldi	r21, 0x00	; 0
    2faa:	bc 01       	movw	r22, r24
    2fac:	cd 01       	movw	r24, r26
    2fae:	0e 94 0e 20 	call	0x401c	; 0x401c <__mulsi3>
    2fb2:	dc 01       	movw	r26, r24
    2fb4:	cb 01       	movw	r24, r22
    2fb6:	89 2f       	mov	r24, r25
    2fb8:	9a 2f       	mov	r25, r26
    2fba:	ab 2f       	mov	r26, r27
    2fbc:	bb 27       	eor	r27, r27
    2fbe:	90 93 10 01 	sts	0x0110, r25
    2fc2:	80 93 0f 01 	sts	0x010F, r24
	milliVolt1/=10;
    2fc6:	80 91 0f 01 	lds	r24, 0x010F
    2fca:	90 91 10 01 	lds	r25, 0x0110
    2fce:	2a e0       	ldi	r18, 0x0A	; 10
    2fd0:	30 e0       	ldi	r19, 0x00	; 0
    2fd2:	b9 01       	movw	r22, r18
    2fd4:	0e 94 2d 20 	call	0x405a	; 0x405a <__udivmodhi4>
    2fd8:	cb 01       	movw	r24, r22
    2fda:	90 93 10 01 	sts	0x0110, r25
    2fde:	80 93 0f 01 	sts	0x010F, r24
	NUMLED=Maping(3,474,1,8,milliVolt1);
    2fe2:	80 91 0f 01 	lds	r24, 0x010F
    2fe6:	90 91 10 01 	lds	r25, 0x0110
    2fea:	cc 01       	movw	r24, r24
    2fec:	a0 e0       	ldi	r26, 0x00	; 0
    2fee:	b0 e0       	ldi	r27, 0x00	; 0
    2ff0:	00 d0       	rcall	.+0      	; 0x2ff2 <NotifyFunc+0xe4>
    2ff2:	00 d0       	rcall	.+0      	; 0x2ff4 <NotifyFunc+0xe6>
    2ff4:	ed b7       	in	r30, 0x3d	; 61
    2ff6:	fe b7       	in	r31, 0x3e	; 62
    2ff8:	31 96       	adiw	r30, 0x01	; 1
    2ffa:	80 83       	st	Z, r24
    2ffc:	91 83       	std	Z+1, r25	; 0x01
    2ffe:	a2 83       	std	Z+2, r26	; 0x02
    3000:	b3 83       	std	Z+3, r27	; 0x03
    3002:	63 e0       	ldi	r22, 0x03	; 3
    3004:	70 e0       	ldi	r23, 0x00	; 0
    3006:	80 e0       	ldi	r24, 0x00	; 0
    3008:	90 e0       	ldi	r25, 0x00	; 0
    300a:	2a ed       	ldi	r18, 0xDA	; 218
    300c:	31 e0       	ldi	r19, 0x01	; 1
    300e:	40 e0       	ldi	r20, 0x00	; 0
    3010:	50 e0       	ldi	r21, 0x00	; 0
    3012:	ee 24       	eor	r14, r14
    3014:	ff 24       	eor	r15, r15
    3016:	87 01       	movw	r16, r14
    3018:	e3 94       	inc	r14
    301a:	aa 24       	eor	r10, r10
    301c:	bb 24       	eor	r11, r11
    301e:	65 01       	movw	r12, r10
    3020:	68 94       	set
    3022:	a3 f8       	bld	r10, 3
    3024:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <Maping>
    3028:	0f 90       	pop	r0
    302a:	0f 90       	pop	r0
    302c:	0f 90       	pop	r0
    302e:	0f 90       	pop	r0
    3030:	dc 01       	movw	r26, r24
    3032:	cb 01       	movw	r24, r22
    3034:	90 93 0e 01 	sts	0x010E, r25
    3038:	80 93 0d 01 	sts	0x010D, r24
	NUMLED=9-NUMLED;
    303c:	20 91 0d 01 	lds	r18, 0x010D
    3040:	30 91 0e 01 	lds	r19, 0x010E
    3044:	89 e0       	ldi	r24, 0x09	; 9
    3046:	90 e0       	ldi	r25, 0x00	; 0
    3048:	82 1b       	sub	r24, r18
    304a:	93 0b       	sbc	r25, r19
    304c:	90 93 0e 01 	sts	0x010E, r25
    3050:	80 93 0d 01 	sts	0x010D, r24
	LED_CONTROL(NUMLED);
    3054:	80 91 0d 01 	lds	r24, 0x010D
    3058:	90 91 0e 01 	lds	r25, 0x010E
    305c:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <LED_CONTROL>
	CLCD_voidGoToXY(1,8);
    3060:	81 e0       	ldi	r24, 0x01	; 1
    3062:	68 e0       	ldi	r22, 0x08	; 8
    3064:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <CLCD_voidGoToXY>
	CLCD_voidWriteNumber(NUMLED);
    3068:	80 91 0d 01 	lds	r24, 0x010D
    306c:	90 91 0e 01 	lds	r25, 0x010E
    3070:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <CLCD_voidWriteNumber>
}
    3074:	cf 91       	pop	r28
    3076:	df 91       	pop	r29
    3078:	1f 91       	pop	r17
    307a:	0f 91       	pop	r16
    307c:	ff 90       	pop	r15
    307e:	ef 90       	pop	r14
    3080:	df 90       	pop	r13
    3082:	cf 90       	pop	r12
    3084:	bf 90       	pop	r11
    3086:	af 90       	pop	r10
    3088:	08 95       	ret

0000308a <BuzzerSound>:
void BuzzerSound()
{
    308a:	0f 93       	push	r16
    308c:	1f 93       	push	r17
    308e:	df 93       	push	r29
    3090:	cf 93       	push	r28
    3092:	cd b7       	in	r28, 0x3d	; 61
    3094:	de b7       	in	r29, 0x3e	; 62
    3096:	c9 5a       	subi	r28, 0xA9	; 169
    3098:	d0 40       	sbci	r29, 0x00	; 0
    309a:	0f b6       	in	r0, 0x3f	; 63
    309c:	f8 94       	cli
    309e:	de bf       	out	0x3e, r29	; 62
    30a0:	0f be       	out	0x3f, r0	; 63
    30a2:	cd bf       	out	0x3d, r28	; 61
	u8 i;
	/* Diaphragm */
	for(i=0;i<20;i++){
    30a4:	fe 01       	movw	r30, r28
    30a6:	e7 55       	subi	r30, 0x57	; 87
    30a8:	ff 4f       	sbci	r31, 0xFF	; 255
    30aa:	10 82       	st	Z, r1
    30ac:	79 c1       	rjmp	.+754    	; 0x33a0 <BuzzerSound+0x316>
		DIO_u8SetPinValue(DIO_PORTB,DIO_PIN7,DIO_PIN_HIGH);
    30ae:	81 e0       	ldi	r24, 0x01	; 1
    30b0:	67 e0       	ldi	r22, 0x07	; 7
    30b2:	41 e0       	ldi	r20, 0x01	; 1
    30b4:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_u8SetPinValue>
    30b8:	fe 01       	movw	r30, r28
    30ba:	eb 55       	subi	r30, 0x5B	; 91
    30bc:	ff 4f       	sbci	r31, 0xFF	; 255
    30be:	80 e0       	ldi	r24, 0x00	; 0
    30c0:	90 e0       	ldi	r25, 0x00	; 0
    30c2:	a8 e4       	ldi	r26, 0x48	; 72
    30c4:	b2 e4       	ldi	r27, 0x42	; 66
    30c6:	80 83       	st	Z, r24
    30c8:	91 83       	std	Z+1, r25	; 0x01
    30ca:	a2 83       	std	Z+2, r26	; 0x02
    30cc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30ce:	8e 01       	movw	r16, r28
    30d0:	0f 55       	subi	r16, 0x5F	; 95
    30d2:	1f 4f       	sbci	r17, 0xFF	; 255
    30d4:	fe 01       	movw	r30, r28
    30d6:	eb 55       	subi	r30, 0x5B	; 91
    30d8:	ff 4f       	sbci	r31, 0xFF	; 255
    30da:	60 81       	ld	r22, Z
    30dc:	71 81       	ldd	r23, Z+1	; 0x01
    30de:	82 81       	ldd	r24, Z+2	; 0x02
    30e0:	93 81       	ldd	r25, Z+3	; 0x03
    30e2:	20 e0       	ldi	r18, 0x00	; 0
    30e4:	30 e0       	ldi	r19, 0x00	; 0
    30e6:	4a ef       	ldi	r20, 0xFA	; 250
    30e8:	54 e4       	ldi	r21, 0x44	; 68
    30ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30ee:	dc 01       	movw	r26, r24
    30f0:	cb 01       	movw	r24, r22
    30f2:	f8 01       	movw	r30, r16
    30f4:	80 83       	st	Z, r24
    30f6:	91 83       	std	Z+1, r25	; 0x01
    30f8:	a2 83       	std	Z+2, r26	; 0x02
    30fa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    30fc:	fe 01       	movw	r30, r28
    30fe:	ef 55       	subi	r30, 0x5F	; 95
    3100:	ff 4f       	sbci	r31, 0xFF	; 255
    3102:	60 81       	ld	r22, Z
    3104:	71 81       	ldd	r23, Z+1	; 0x01
    3106:	82 81       	ldd	r24, Z+2	; 0x02
    3108:	93 81       	ldd	r25, Z+3	; 0x03
    310a:	20 e0       	ldi	r18, 0x00	; 0
    310c:	30 e0       	ldi	r19, 0x00	; 0
    310e:	40 e8       	ldi	r20, 0x80	; 128
    3110:	5f e3       	ldi	r21, 0x3F	; 63
    3112:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3116:	88 23       	and	r24, r24
    3118:	44 f4       	brge	.+16     	; 0x312a <BuzzerSound+0xa0>
		__ticks = 1;
    311a:	fe 01       	movw	r30, r28
    311c:	e1 56       	subi	r30, 0x61	; 97
    311e:	ff 4f       	sbci	r31, 0xFF	; 255
    3120:	81 e0       	ldi	r24, 0x01	; 1
    3122:	90 e0       	ldi	r25, 0x00	; 0
    3124:	91 83       	std	Z+1, r25	; 0x01
    3126:	80 83       	st	Z, r24
    3128:	64 c0       	rjmp	.+200    	; 0x31f2 <BuzzerSound+0x168>
	else if (__tmp > 65535)
    312a:	fe 01       	movw	r30, r28
    312c:	ef 55       	subi	r30, 0x5F	; 95
    312e:	ff 4f       	sbci	r31, 0xFF	; 255
    3130:	60 81       	ld	r22, Z
    3132:	71 81       	ldd	r23, Z+1	; 0x01
    3134:	82 81       	ldd	r24, Z+2	; 0x02
    3136:	93 81       	ldd	r25, Z+3	; 0x03
    3138:	20 e0       	ldi	r18, 0x00	; 0
    313a:	3f ef       	ldi	r19, 0xFF	; 255
    313c:	4f e7       	ldi	r20, 0x7F	; 127
    313e:	57 e4       	ldi	r21, 0x47	; 71
    3140:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3144:	18 16       	cp	r1, r24
    3146:	0c f0       	brlt	.+2      	; 0x314a <BuzzerSound+0xc0>
    3148:	43 c0       	rjmp	.+134    	; 0x31d0 <BuzzerSound+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    314a:	fe 01       	movw	r30, r28
    314c:	eb 55       	subi	r30, 0x5B	; 91
    314e:	ff 4f       	sbci	r31, 0xFF	; 255
    3150:	60 81       	ld	r22, Z
    3152:	71 81       	ldd	r23, Z+1	; 0x01
    3154:	82 81       	ldd	r24, Z+2	; 0x02
    3156:	93 81       	ldd	r25, Z+3	; 0x03
    3158:	20 e0       	ldi	r18, 0x00	; 0
    315a:	30 e0       	ldi	r19, 0x00	; 0
    315c:	40 e2       	ldi	r20, 0x20	; 32
    315e:	51 e4       	ldi	r21, 0x41	; 65
    3160:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3164:	dc 01       	movw	r26, r24
    3166:	cb 01       	movw	r24, r22
    3168:	8e 01       	movw	r16, r28
    316a:	01 56       	subi	r16, 0x61	; 97
    316c:	1f 4f       	sbci	r17, 0xFF	; 255
    316e:	bc 01       	movw	r22, r24
    3170:	cd 01       	movw	r24, r26
    3172:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3176:	dc 01       	movw	r26, r24
    3178:	cb 01       	movw	r24, r22
    317a:	f8 01       	movw	r30, r16
    317c:	91 83       	std	Z+1, r25	; 0x01
    317e:	80 83       	st	Z, r24
    3180:	1f c0       	rjmp	.+62     	; 0x31c0 <BuzzerSound+0x136>
    3182:	fe 01       	movw	r30, r28
    3184:	e3 56       	subi	r30, 0x63	; 99
    3186:	ff 4f       	sbci	r31, 0xFF	; 255
    3188:	88 ec       	ldi	r24, 0xC8	; 200
    318a:	90 e0       	ldi	r25, 0x00	; 0
    318c:	91 83       	std	Z+1, r25	; 0x01
    318e:	80 83       	st	Z, r24
    3190:	fe 01       	movw	r30, r28
    3192:	e3 56       	subi	r30, 0x63	; 99
    3194:	ff 4f       	sbci	r31, 0xFF	; 255
    3196:	80 81       	ld	r24, Z
    3198:	91 81       	ldd	r25, Z+1	; 0x01
    319a:	01 97       	sbiw	r24, 0x01	; 1
    319c:	f1 f7       	brne	.-4      	; 0x319a <BuzzerSound+0x110>
    319e:	fe 01       	movw	r30, r28
    31a0:	e3 56       	subi	r30, 0x63	; 99
    31a2:	ff 4f       	sbci	r31, 0xFF	; 255
    31a4:	91 83       	std	Z+1, r25	; 0x01
    31a6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31a8:	de 01       	movw	r26, r28
    31aa:	a1 56       	subi	r26, 0x61	; 97
    31ac:	bf 4f       	sbci	r27, 0xFF	; 255
    31ae:	fe 01       	movw	r30, r28
    31b0:	e1 56       	subi	r30, 0x61	; 97
    31b2:	ff 4f       	sbci	r31, 0xFF	; 255
    31b4:	80 81       	ld	r24, Z
    31b6:	91 81       	ldd	r25, Z+1	; 0x01
    31b8:	01 97       	sbiw	r24, 0x01	; 1
    31ba:	11 96       	adiw	r26, 0x01	; 1
    31bc:	9c 93       	st	X, r25
    31be:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31c0:	fe 01       	movw	r30, r28
    31c2:	e1 56       	subi	r30, 0x61	; 97
    31c4:	ff 4f       	sbci	r31, 0xFF	; 255
    31c6:	80 81       	ld	r24, Z
    31c8:	91 81       	ldd	r25, Z+1	; 0x01
    31ca:	00 97       	sbiw	r24, 0x00	; 0
    31cc:	d1 f6       	brne	.-76     	; 0x3182 <BuzzerSound+0xf8>
    31ce:	27 c0       	rjmp	.+78     	; 0x321e <BuzzerSound+0x194>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31d0:	8e 01       	movw	r16, r28
    31d2:	01 56       	subi	r16, 0x61	; 97
    31d4:	1f 4f       	sbci	r17, 0xFF	; 255
    31d6:	fe 01       	movw	r30, r28
    31d8:	ef 55       	subi	r30, 0x5F	; 95
    31da:	ff 4f       	sbci	r31, 0xFF	; 255
    31dc:	60 81       	ld	r22, Z
    31de:	71 81       	ldd	r23, Z+1	; 0x01
    31e0:	82 81       	ldd	r24, Z+2	; 0x02
    31e2:	93 81       	ldd	r25, Z+3	; 0x03
    31e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31e8:	dc 01       	movw	r26, r24
    31ea:	cb 01       	movw	r24, r22
    31ec:	f8 01       	movw	r30, r16
    31ee:	91 83       	std	Z+1, r25	; 0x01
    31f0:	80 83       	st	Z, r24
    31f2:	de 01       	movw	r26, r28
    31f4:	a5 56       	subi	r26, 0x65	; 101
    31f6:	bf 4f       	sbci	r27, 0xFF	; 255
    31f8:	fe 01       	movw	r30, r28
    31fa:	e1 56       	subi	r30, 0x61	; 97
    31fc:	ff 4f       	sbci	r31, 0xFF	; 255
    31fe:	80 81       	ld	r24, Z
    3200:	91 81       	ldd	r25, Z+1	; 0x01
    3202:	8d 93       	st	X+, r24
    3204:	9c 93       	st	X, r25
    3206:	fe 01       	movw	r30, r28
    3208:	e5 56       	subi	r30, 0x65	; 101
    320a:	ff 4f       	sbci	r31, 0xFF	; 255
    320c:	80 81       	ld	r24, Z
    320e:	91 81       	ldd	r25, Z+1	; 0x01
    3210:	01 97       	sbiw	r24, 0x01	; 1
    3212:	f1 f7       	brne	.-4      	; 0x3210 <BuzzerSound+0x186>
    3214:	fe 01       	movw	r30, r28
    3216:	e5 56       	subi	r30, 0x65	; 101
    3218:	ff 4f       	sbci	r31, 0xFF	; 255
    321a:	91 83       	std	Z+1, r25	; 0x01
    321c:	80 83       	st	Z, r24
		_delay_ms(50);
		DIO_u8SetPinValue(DIO_PORTB,DIO_PIN7,DIO_PIN_LOW);
    321e:	81 e0       	ldi	r24, 0x01	; 1
    3220:	67 e0       	ldi	r22, 0x07	; 7
    3222:	40 e0       	ldi	r20, 0x00	; 0
    3224:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_u8SetPinValue>
    3228:	fe 01       	movw	r30, r28
    322a:	e9 56       	subi	r30, 0x69	; 105
    322c:	ff 4f       	sbci	r31, 0xFF	; 255
    322e:	80 e0       	ldi	r24, 0x00	; 0
    3230:	90 e0       	ldi	r25, 0x00	; 0
    3232:	a8 e4       	ldi	r26, 0x48	; 72
    3234:	b2 e4       	ldi	r27, 0x42	; 66
    3236:	80 83       	st	Z, r24
    3238:	91 83       	std	Z+1, r25	; 0x01
    323a:	a2 83       	std	Z+2, r26	; 0x02
    323c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    323e:	8e 01       	movw	r16, r28
    3240:	0d 56       	subi	r16, 0x6D	; 109
    3242:	1f 4f       	sbci	r17, 0xFF	; 255
    3244:	fe 01       	movw	r30, r28
    3246:	e9 56       	subi	r30, 0x69	; 105
    3248:	ff 4f       	sbci	r31, 0xFF	; 255
    324a:	60 81       	ld	r22, Z
    324c:	71 81       	ldd	r23, Z+1	; 0x01
    324e:	82 81       	ldd	r24, Z+2	; 0x02
    3250:	93 81       	ldd	r25, Z+3	; 0x03
    3252:	20 e0       	ldi	r18, 0x00	; 0
    3254:	30 e0       	ldi	r19, 0x00	; 0
    3256:	4a ef       	ldi	r20, 0xFA	; 250
    3258:	54 e4       	ldi	r21, 0x44	; 68
    325a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    325e:	dc 01       	movw	r26, r24
    3260:	cb 01       	movw	r24, r22
    3262:	f8 01       	movw	r30, r16
    3264:	80 83       	st	Z, r24
    3266:	91 83       	std	Z+1, r25	; 0x01
    3268:	a2 83       	std	Z+2, r26	; 0x02
    326a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    326c:	fe 01       	movw	r30, r28
    326e:	ed 56       	subi	r30, 0x6D	; 109
    3270:	ff 4f       	sbci	r31, 0xFF	; 255
    3272:	60 81       	ld	r22, Z
    3274:	71 81       	ldd	r23, Z+1	; 0x01
    3276:	82 81       	ldd	r24, Z+2	; 0x02
    3278:	93 81       	ldd	r25, Z+3	; 0x03
    327a:	20 e0       	ldi	r18, 0x00	; 0
    327c:	30 e0       	ldi	r19, 0x00	; 0
    327e:	40 e8       	ldi	r20, 0x80	; 128
    3280:	5f e3       	ldi	r21, 0x3F	; 63
    3282:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3286:	88 23       	and	r24, r24
    3288:	44 f4       	brge	.+16     	; 0x329a <BuzzerSound+0x210>
		__ticks = 1;
    328a:	fe 01       	movw	r30, r28
    328c:	ef 56       	subi	r30, 0x6F	; 111
    328e:	ff 4f       	sbci	r31, 0xFF	; 255
    3290:	81 e0       	ldi	r24, 0x01	; 1
    3292:	90 e0       	ldi	r25, 0x00	; 0
    3294:	91 83       	std	Z+1, r25	; 0x01
    3296:	80 83       	st	Z, r24
    3298:	64 c0       	rjmp	.+200    	; 0x3362 <BuzzerSound+0x2d8>
	else if (__tmp > 65535)
    329a:	fe 01       	movw	r30, r28
    329c:	ed 56       	subi	r30, 0x6D	; 109
    329e:	ff 4f       	sbci	r31, 0xFF	; 255
    32a0:	60 81       	ld	r22, Z
    32a2:	71 81       	ldd	r23, Z+1	; 0x01
    32a4:	82 81       	ldd	r24, Z+2	; 0x02
    32a6:	93 81       	ldd	r25, Z+3	; 0x03
    32a8:	20 e0       	ldi	r18, 0x00	; 0
    32aa:	3f ef       	ldi	r19, 0xFF	; 255
    32ac:	4f e7       	ldi	r20, 0x7F	; 127
    32ae:	57 e4       	ldi	r21, 0x47	; 71
    32b0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    32b4:	18 16       	cp	r1, r24
    32b6:	0c f0       	brlt	.+2      	; 0x32ba <BuzzerSound+0x230>
    32b8:	43 c0       	rjmp	.+134    	; 0x3340 <BuzzerSound+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32ba:	fe 01       	movw	r30, r28
    32bc:	e9 56       	subi	r30, 0x69	; 105
    32be:	ff 4f       	sbci	r31, 0xFF	; 255
    32c0:	60 81       	ld	r22, Z
    32c2:	71 81       	ldd	r23, Z+1	; 0x01
    32c4:	82 81       	ldd	r24, Z+2	; 0x02
    32c6:	93 81       	ldd	r25, Z+3	; 0x03
    32c8:	20 e0       	ldi	r18, 0x00	; 0
    32ca:	30 e0       	ldi	r19, 0x00	; 0
    32cc:	40 e2       	ldi	r20, 0x20	; 32
    32ce:	51 e4       	ldi	r21, 0x41	; 65
    32d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32d4:	dc 01       	movw	r26, r24
    32d6:	cb 01       	movw	r24, r22
    32d8:	8e 01       	movw	r16, r28
    32da:	0f 56       	subi	r16, 0x6F	; 111
    32dc:	1f 4f       	sbci	r17, 0xFF	; 255
    32de:	bc 01       	movw	r22, r24
    32e0:	cd 01       	movw	r24, r26
    32e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32e6:	dc 01       	movw	r26, r24
    32e8:	cb 01       	movw	r24, r22
    32ea:	f8 01       	movw	r30, r16
    32ec:	91 83       	std	Z+1, r25	; 0x01
    32ee:	80 83       	st	Z, r24
    32f0:	1f c0       	rjmp	.+62     	; 0x3330 <BuzzerSound+0x2a6>
    32f2:	fe 01       	movw	r30, r28
    32f4:	e1 57       	subi	r30, 0x71	; 113
    32f6:	ff 4f       	sbci	r31, 0xFF	; 255
    32f8:	88 ec       	ldi	r24, 0xC8	; 200
    32fa:	90 e0       	ldi	r25, 0x00	; 0
    32fc:	91 83       	std	Z+1, r25	; 0x01
    32fe:	80 83       	st	Z, r24
    3300:	fe 01       	movw	r30, r28
    3302:	e1 57       	subi	r30, 0x71	; 113
    3304:	ff 4f       	sbci	r31, 0xFF	; 255
    3306:	80 81       	ld	r24, Z
    3308:	91 81       	ldd	r25, Z+1	; 0x01
    330a:	01 97       	sbiw	r24, 0x01	; 1
    330c:	f1 f7       	brne	.-4      	; 0x330a <BuzzerSound+0x280>
    330e:	fe 01       	movw	r30, r28
    3310:	e1 57       	subi	r30, 0x71	; 113
    3312:	ff 4f       	sbci	r31, 0xFF	; 255
    3314:	91 83       	std	Z+1, r25	; 0x01
    3316:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3318:	de 01       	movw	r26, r28
    331a:	af 56       	subi	r26, 0x6F	; 111
    331c:	bf 4f       	sbci	r27, 0xFF	; 255
    331e:	fe 01       	movw	r30, r28
    3320:	ef 56       	subi	r30, 0x6F	; 111
    3322:	ff 4f       	sbci	r31, 0xFF	; 255
    3324:	80 81       	ld	r24, Z
    3326:	91 81       	ldd	r25, Z+1	; 0x01
    3328:	01 97       	sbiw	r24, 0x01	; 1
    332a:	11 96       	adiw	r26, 0x01	; 1
    332c:	9c 93       	st	X, r25
    332e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3330:	fe 01       	movw	r30, r28
    3332:	ef 56       	subi	r30, 0x6F	; 111
    3334:	ff 4f       	sbci	r31, 0xFF	; 255
    3336:	80 81       	ld	r24, Z
    3338:	91 81       	ldd	r25, Z+1	; 0x01
    333a:	00 97       	sbiw	r24, 0x00	; 0
    333c:	d1 f6       	brne	.-76     	; 0x32f2 <BuzzerSound+0x268>
    333e:	27 c0       	rjmp	.+78     	; 0x338e <BuzzerSound+0x304>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3340:	8e 01       	movw	r16, r28
    3342:	0f 56       	subi	r16, 0x6F	; 111
    3344:	1f 4f       	sbci	r17, 0xFF	; 255
    3346:	fe 01       	movw	r30, r28
    3348:	ed 56       	subi	r30, 0x6D	; 109
    334a:	ff 4f       	sbci	r31, 0xFF	; 255
    334c:	60 81       	ld	r22, Z
    334e:	71 81       	ldd	r23, Z+1	; 0x01
    3350:	82 81       	ldd	r24, Z+2	; 0x02
    3352:	93 81       	ldd	r25, Z+3	; 0x03
    3354:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3358:	dc 01       	movw	r26, r24
    335a:	cb 01       	movw	r24, r22
    335c:	f8 01       	movw	r30, r16
    335e:	91 83       	std	Z+1, r25	; 0x01
    3360:	80 83       	st	Z, r24
    3362:	de 01       	movw	r26, r28
    3364:	a3 57       	subi	r26, 0x73	; 115
    3366:	bf 4f       	sbci	r27, 0xFF	; 255
    3368:	fe 01       	movw	r30, r28
    336a:	ef 56       	subi	r30, 0x6F	; 111
    336c:	ff 4f       	sbci	r31, 0xFF	; 255
    336e:	80 81       	ld	r24, Z
    3370:	91 81       	ldd	r25, Z+1	; 0x01
    3372:	8d 93       	st	X+, r24
    3374:	9c 93       	st	X, r25
    3376:	fe 01       	movw	r30, r28
    3378:	e3 57       	subi	r30, 0x73	; 115
    337a:	ff 4f       	sbci	r31, 0xFF	; 255
    337c:	80 81       	ld	r24, Z
    337e:	91 81       	ldd	r25, Z+1	; 0x01
    3380:	01 97       	sbiw	r24, 0x01	; 1
    3382:	f1 f7       	brne	.-4      	; 0x3380 <BuzzerSound+0x2f6>
    3384:	fe 01       	movw	r30, r28
    3386:	e3 57       	subi	r30, 0x73	; 115
    3388:	ff 4f       	sbci	r31, 0xFF	; 255
    338a:	91 83       	std	Z+1, r25	; 0x01
    338c:	80 83       	st	Z, r24
}
void BuzzerSound()
{
	u8 i;
	/* Diaphragm */
	for(i=0;i<20;i++){
    338e:	de 01       	movw	r26, r28
    3390:	a7 55       	subi	r26, 0x57	; 87
    3392:	bf 4f       	sbci	r27, 0xFF	; 255
    3394:	fe 01       	movw	r30, r28
    3396:	e7 55       	subi	r30, 0x57	; 87
    3398:	ff 4f       	sbci	r31, 0xFF	; 255
    339a:	80 81       	ld	r24, Z
    339c:	8f 5f       	subi	r24, 0xFF	; 255
    339e:	8c 93       	st	X, r24
    33a0:	fe 01       	movw	r30, r28
    33a2:	e7 55       	subi	r30, 0x57	; 87
    33a4:	ff 4f       	sbci	r31, 0xFF	; 255
    33a6:	80 81       	ld	r24, Z
    33a8:	84 31       	cpi	r24, 0x14	; 20
    33aa:	08 f4       	brcc	.+2      	; 0x33ae <BuzzerSound+0x324>
    33ac:	80 ce       	rjmp	.-768    	; 0x30ae <BuzzerSound+0x24>
    33ae:	fe 01       	movw	r30, r28
    33b0:	e7 57       	subi	r30, 0x77	; 119
    33b2:	ff 4f       	sbci	r31, 0xFF	; 255
    33b4:	80 e0       	ldi	r24, 0x00	; 0
    33b6:	90 e0       	ldi	r25, 0x00	; 0
    33b8:	aa e7       	ldi	r26, 0x7A	; 122
    33ba:	b4 e4       	ldi	r27, 0x44	; 68
    33bc:	80 83       	st	Z, r24
    33be:	91 83       	std	Z+1, r25	; 0x01
    33c0:	a2 83       	std	Z+2, r26	; 0x02
    33c2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33c4:	8e 01       	movw	r16, r28
    33c6:	0b 57       	subi	r16, 0x7B	; 123
    33c8:	1f 4f       	sbci	r17, 0xFF	; 255
    33ca:	fe 01       	movw	r30, r28
    33cc:	e7 57       	subi	r30, 0x77	; 119
    33ce:	ff 4f       	sbci	r31, 0xFF	; 255
    33d0:	60 81       	ld	r22, Z
    33d2:	71 81       	ldd	r23, Z+1	; 0x01
    33d4:	82 81       	ldd	r24, Z+2	; 0x02
    33d6:	93 81       	ldd	r25, Z+3	; 0x03
    33d8:	20 e0       	ldi	r18, 0x00	; 0
    33da:	30 e0       	ldi	r19, 0x00	; 0
    33dc:	4a ef       	ldi	r20, 0xFA	; 250
    33de:	54 e4       	ldi	r21, 0x44	; 68
    33e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33e4:	dc 01       	movw	r26, r24
    33e6:	cb 01       	movw	r24, r22
    33e8:	f8 01       	movw	r30, r16
    33ea:	80 83       	st	Z, r24
    33ec:	91 83       	std	Z+1, r25	; 0x01
    33ee:	a2 83       	std	Z+2, r26	; 0x02
    33f0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    33f2:	fe 01       	movw	r30, r28
    33f4:	eb 57       	subi	r30, 0x7B	; 123
    33f6:	ff 4f       	sbci	r31, 0xFF	; 255
    33f8:	60 81       	ld	r22, Z
    33fa:	71 81       	ldd	r23, Z+1	; 0x01
    33fc:	82 81       	ldd	r24, Z+2	; 0x02
    33fe:	93 81       	ldd	r25, Z+3	; 0x03
    3400:	20 e0       	ldi	r18, 0x00	; 0
    3402:	30 e0       	ldi	r19, 0x00	; 0
    3404:	40 e8       	ldi	r20, 0x80	; 128
    3406:	5f e3       	ldi	r21, 0x3F	; 63
    3408:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    340c:	88 23       	and	r24, r24
    340e:	44 f4       	brge	.+16     	; 0x3420 <BuzzerSound+0x396>
		__ticks = 1;
    3410:	fe 01       	movw	r30, r28
    3412:	ed 57       	subi	r30, 0x7D	; 125
    3414:	ff 4f       	sbci	r31, 0xFF	; 255
    3416:	81 e0       	ldi	r24, 0x01	; 1
    3418:	90 e0       	ldi	r25, 0x00	; 0
    341a:	91 83       	std	Z+1, r25	; 0x01
    341c:	80 83       	st	Z, r24
    341e:	64 c0       	rjmp	.+200    	; 0x34e8 <BuzzerSound+0x45e>
	else if (__tmp > 65535)
    3420:	fe 01       	movw	r30, r28
    3422:	eb 57       	subi	r30, 0x7B	; 123
    3424:	ff 4f       	sbci	r31, 0xFF	; 255
    3426:	60 81       	ld	r22, Z
    3428:	71 81       	ldd	r23, Z+1	; 0x01
    342a:	82 81       	ldd	r24, Z+2	; 0x02
    342c:	93 81       	ldd	r25, Z+3	; 0x03
    342e:	20 e0       	ldi	r18, 0x00	; 0
    3430:	3f ef       	ldi	r19, 0xFF	; 255
    3432:	4f e7       	ldi	r20, 0x7F	; 127
    3434:	57 e4       	ldi	r21, 0x47	; 71
    3436:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    343a:	18 16       	cp	r1, r24
    343c:	0c f0       	brlt	.+2      	; 0x3440 <BuzzerSound+0x3b6>
    343e:	43 c0       	rjmp	.+134    	; 0x34c6 <BuzzerSound+0x43c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3440:	fe 01       	movw	r30, r28
    3442:	e7 57       	subi	r30, 0x77	; 119
    3444:	ff 4f       	sbci	r31, 0xFF	; 255
    3446:	60 81       	ld	r22, Z
    3448:	71 81       	ldd	r23, Z+1	; 0x01
    344a:	82 81       	ldd	r24, Z+2	; 0x02
    344c:	93 81       	ldd	r25, Z+3	; 0x03
    344e:	20 e0       	ldi	r18, 0x00	; 0
    3450:	30 e0       	ldi	r19, 0x00	; 0
    3452:	40 e2       	ldi	r20, 0x20	; 32
    3454:	51 e4       	ldi	r21, 0x41	; 65
    3456:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    345a:	dc 01       	movw	r26, r24
    345c:	cb 01       	movw	r24, r22
    345e:	8e 01       	movw	r16, r28
    3460:	0d 57       	subi	r16, 0x7D	; 125
    3462:	1f 4f       	sbci	r17, 0xFF	; 255
    3464:	bc 01       	movw	r22, r24
    3466:	cd 01       	movw	r24, r26
    3468:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    346c:	dc 01       	movw	r26, r24
    346e:	cb 01       	movw	r24, r22
    3470:	f8 01       	movw	r30, r16
    3472:	91 83       	std	Z+1, r25	; 0x01
    3474:	80 83       	st	Z, r24
    3476:	1f c0       	rjmp	.+62     	; 0x34b6 <BuzzerSound+0x42c>
    3478:	fe 01       	movw	r30, r28
    347a:	ef 57       	subi	r30, 0x7F	; 127
    347c:	ff 4f       	sbci	r31, 0xFF	; 255
    347e:	88 ec       	ldi	r24, 0xC8	; 200
    3480:	90 e0       	ldi	r25, 0x00	; 0
    3482:	91 83       	std	Z+1, r25	; 0x01
    3484:	80 83       	st	Z, r24
    3486:	fe 01       	movw	r30, r28
    3488:	ef 57       	subi	r30, 0x7F	; 127
    348a:	ff 4f       	sbci	r31, 0xFF	; 255
    348c:	80 81       	ld	r24, Z
    348e:	91 81       	ldd	r25, Z+1	; 0x01
    3490:	01 97       	sbiw	r24, 0x01	; 1
    3492:	f1 f7       	brne	.-4      	; 0x3490 <BuzzerSound+0x406>
    3494:	fe 01       	movw	r30, r28
    3496:	ef 57       	subi	r30, 0x7F	; 127
    3498:	ff 4f       	sbci	r31, 0xFF	; 255
    349a:	91 83       	std	Z+1, r25	; 0x01
    349c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    349e:	de 01       	movw	r26, r28
    34a0:	ad 57       	subi	r26, 0x7D	; 125
    34a2:	bf 4f       	sbci	r27, 0xFF	; 255
    34a4:	fe 01       	movw	r30, r28
    34a6:	ed 57       	subi	r30, 0x7D	; 125
    34a8:	ff 4f       	sbci	r31, 0xFF	; 255
    34aa:	80 81       	ld	r24, Z
    34ac:	91 81       	ldd	r25, Z+1	; 0x01
    34ae:	01 97       	sbiw	r24, 0x01	; 1
    34b0:	11 96       	adiw	r26, 0x01	; 1
    34b2:	9c 93       	st	X, r25
    34b4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34b6:	fe 01       	movw	r30, r28
    34b8:	ed 57       	subi	r30, 0x7D	; 125
    34ba:	ff 4f       	sbci	r31, 0xFF	; 255
    34bc:	80 81       	ld	r24, Z
    34be:	91 81       	ldd	r25, Z+1	; 0x01
    34c0:	00 97       	sbiw	r24, 0x00	; 0
    34c2:	d1 f6       	brne	.-76     	; 0x3478 <BuzzerSound+0x3ee>
    34c4:	28 c0       	rjmp	.+80     	; 0x3516 <BuzzerSound+0x48c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34c6:	8e 01       	movw	r16, r28
    34c8:	0d 57       	subi	r16, 0x7D	; 125
    34ca:	1f 4f       	sbci	r17, 0xFF	; 255
    34cc:	fe 01       	movw	r30, r28
    34ce:	eb 57       	subi	r30, 0x7B	; 123
    34d0:	ff 4f       	sbci	r31, 0xFF	; 255
    34d2:	60 81       	ld	r22, Z
    34d4:	71 81       	ldd	r23, Z+1	; 0x01
    34d6:	82 81       	ldd	r24, Z+2	; 0x02
    34d8:	93 81       	ldd	r25, Z+3	; 0x03
    34da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34de:	dc 01       	movw	r26, r24
    34e0:	cb 01       	movw	r24, r22
    34e2:	f8 01       	movw	r30, r16
    34e4:	91 83       	std	Z+1, r25	; 0x01
    34e6:	80 83       	st	Z, r24
    34e8:	de 01       	movw	r26, r28
    34ea:	a1 58       	subi	r26, 0x81	; 129
    34ec:	bf 4f       	sbci	r27, 0xFF	; 255
    34ee:	fe 01       	movw	r30, r28
    34f0:	ed 57       	subi	r30, 0x7D	; 125
    34f2:	ff 4f       	sbci	r31, 0xFF	; 255
    34f4:	80 81       	ld	r24, Z
    34f6:	91 81       	ldd	r25, Z+1	; 0x01
    34f8:	11 96       	adiw	r26, 0x01	; 1
    34fa:	9c 93       	st	X, r25
    34fc:	8e 93       	st	-X, r24
    34fe:	fe 01       	movw	r30, r28
    3500:	e1 58       	subi	r30, 0x81	; 129
    3502:	ff 4f       	sbci	r31, 0xFF	; 255
    3504:	80 81       	ld	r24, Z
    3506:	91 81       	ldd	r25, Z+1	; 0x01
    3508:	01 97       	sbiw	r24, 0x01	; 1
    350a:	f1 f7       	brne	.-4      	; 0x3508 <BuzzerSound+0x47e>
    350c:	fe 01       	movw	r30, r28
    350e:	e1 58       	subi	r30, 0x81	; 129
    3510:	ff 4f       	sbci	r31, 0xFF	; 255
    3512:	91 83       	std	Z+1, r25	; 0x01
    3514:	80 83       	st	Z, r24
		_delay_ms(50);
		DIO_u8SetPinValue(DIO_PORTB,DIO_PIN7,DIO_PIN_LOW);
		_delay_ms(50);
	}
	_delay_ms(1000);
	for(i=0;i<20;i++){
    3516:	fe 01       	movw	r30, r28
    3518:	e7 55       	subi	r30, 0x57	; 87
    351a:	ff 4f       	sbci	r31, 0xFF	; 255
    351c:	10 82       	st	Z, r1
    351e:	79 c1       	rjmp	.+754    	; 0x3812 <BuzzerSound+0x788>
		DIO_u8SetPinValue(DIO_PORTB,DIO_PIN7,DIO_PIN_HIGH);
    3520:	81 e0       	ldi	r24, 0x01	; 1
    3522:	67 e0       	ldi	r22, 0x07	; 7
    3524:	41 e0       	ldi	r20, 0x01	; 1
    3526:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_u8SetPinValue>
    352a:	fe 01       	movw	r30, r28
    352c:	e5 58       	subi	r30, 0x85	; 133
    352e:	ff 4f       	sbci	r31, 0xFF	; 255
    3530:	80 e0       	ldi	r24, 0x00	; 0
    3532:	90 e0       	ldi	r25, 0x00	; 0
    3534:	ac e8       	ldi	r26, 0x8C	; 140
    3536:	b2 e4       	ldi	r27, 0x42	; 66
    3538:	80 83       	st	Z, r24
    353a:	91 83       	std	Z+1, r25	; 0x01
    353c:	a2 83       	std	Z+2, r26	; 0x02
    353e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3540:	8e 01       	movw	r16, r28
    3542:	09 58       	subi	r16, 0x89	; 137
    3544:	1f 4f       	sbci	r17, 0xFF	; 255
    3546:	fe 01       	movw	r30, r28
    3548:	e5 58       	subi	r30, 0x85	; 133
    354a:	ff 4f       	sbci	r31, 0xFF	; 255
    354c:	60 81       	ld	r22, Z
    354e:	71 81       	ldd	r23, Z+1	; 0x01
    3550:	82 81       	ldd	r24, Z+2	; 0x02
    3552:	93 81       	ldd	r25, Z+3	; 0x03
    3554:	20 e0       	ldi	r18, 0x00	; 0
    3556:	30 e0       	ldi	r19, 0x00	; 0
    3558:	4a ef       	ldi	r20, 0xFA	; 250
    355a:	54 e4       	ldi	r21, 0x44	; 68
    355c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3560:	dc 01       	movw	r26, r24
    3562:	cb 01       	movw	r24, r22
    3564:	f8 01       	movw	r30, r16
    3566:	80 83       	st	Z, r24
    3568:	91 83       	std	Z+1, r25	; 0x01
    356a:	a2 83       	std	Z+2, r26	; 0x02
    356c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    356e:	fe 01       	movw	r30, r28
    3570:	e9 58       	subi	r30, 0x89	; 137
    3572:	ff 4f       	sbci	r31, 0xFF	; 255
    3574:	60 81       	ld	r22, Z
    3576:	71 81       	ldd	r23, Z+1	; 0x01
    3578:	82 81       	ldd	r24, Z+2	; 0x02
    357a:	93 81       	ldd	r25, Z+3	; 0x03
    357c:	20 e0       	ldi	r18, 0x00	; 0
    357e:	30 e0       	ldi	r19, 0x00	; 0
    3580:	40 e8       	ldi	r20, 0x80	; 128
    3582:	5f e3       	ldi	r21, 0x3F	; 63
    3584:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3588:	88 23       	and	r24, r24
    358a:	44 f4       	brge	.+16     	; 0x359c <BuzzerSound+0x512>
		__ticks = 1;
    358c:	fe 01       	movw	r30, r28
    358e:	eb 58       	subi	r30, 0x8B	; 139
    3590:	ff 4f       	sbci	r31, 0xFF	; 255
    3592:	81 e0       	ldi	r24, 0x01	; 1
    3594:	90 e0       	ldi	r25, 0x00	; 0
    3596:	91 83       	std	Z+1, r25	; 0x01
    3598:	80 83       	st	Z, r24
    359a:	64 c0       	rjmp	.+200    	; 0x3664 <BuzzerSound+0x5da>
	else if (__tmp > 65535)
    359c:	fe 01       	movw	r30, r28
    359e:	e9 58       	subi	r30, 0x89	; 137
    35a0:	ff 4f       	sbci	r31, 0xFF	; 255
    35a2:	60 81       	ld	r22, Z
    35a4:	71 81       	ldd	r23, Z+1	; 0x01
    35a6:	82 81       	ldd	r24, Z+2	; 0x02
    35a8:	93 81       	ldd	r25, Z+3	; 0x03
    35aa:	20 e0       	ldi	r18, 0x00	; 0
    35ac:	3f ef       	ldi	r19, 0xFF	; 255
    35ae:	4f e7       	ldi	r20, 0x7F	; 127
    35b0:	57 e4       	ldi	r21, 0x47	; 71
    35b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    35b6:	18 16       	cp	r1, r24
    35b8:	0c f0       	brlt	.+2      	; 0x35bc <BuzzerSound+0x532>
    35ba:	43 c0       	rjmp	.+134    	; 0x3642 <BuzzerSound+0x5b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35bc:	fe 01       	movw	r30, r28
    35be:	e5 58       	subi	r30, 0x85	; 133
    35c0:	ff 4f       	sbci	r31, 0xFF	; 255
    35c2:	60 81       	ld	r22, Z
    35c4:	71 81       	ldd	r23, Z+1	; 0x01
    35c6:	82 81       	ldd	r24, Z+2	; 0x02
    35c8:	93 81       	ldd	r25, Z+3	; 0x03
    35ca:	20 e0       	ldi	r18, 0x00	; 0
    35cc:	30 e0       	ldi	r19, 0x00	; 0
    35ce:	40 e2       	ldi	r20, 0x20	; 32
    35d0:	51 e4       	ldi	r21, 0x41	; 65
    35d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35d6:	dc 01       	movw	r26, r24
    35d8:	cb 01       	movw	r24, r22
    35da:	8e 01       	movw	r16, r28
    35dc:	0b 58       	subi	r16, 0x8B	; 139
    35de:	1f 4f       	sbci	r17, 0xFF	; 255
    35e0:	bc 01       	movw	r22, r24
    35e2:	cd 01       	movw	r24, r26
    35e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35e8:	dc 01       	movw	r26, r24
    35ea:	cb 01       	movw	r24, r22
    35ec:	f8 01       	movw	r30, r16
    35ee:	91 83       	std	Z+1, r25	; 0x01
    35f0:	80 83       	st	Z, r24
    35f2:	1f c0       	rjmp	.+62     	; 0x3632 <BuzzerSound+0x5a8>
    35f4:	fe 01       	movw	r30, r28
    35f6:	ed 58       	subi	r30, 0x8D	; 141
    35f8:	ff 4f       	sbci	r31, 0xFF	; 255
    35fa:	88 ec       	ldi	r24, 0xC8	; 200
    35fc:	90 e0       	ldi	r25, 0x00	; 0
    35fe:	91 83       	std	Z+1, r25	; 0x01
    3600:	80 83       	st	Z, r24
    3602:	fe 01       	movw	r30, r28
    3604:	ed 58       	subi	r30, 0x8D	; 141
    3606:	ff 4f       	sbci	r31, 0xFF	; 255
    3608:	80 81       	ld	r24, Z
    360a:	91 81       	ldd	r25, Z+1	; 0x01
    360c:	01 97       	sbiw	r24, 0x01	; 1
    360e:	f1 f7       	brne	.-4      	; 0x360c <BuzzerSound+0x582>
    3610:	fe 01       	movw	r30, r28
    3612:	ed 58       	subi	r30, 0x8D	; 141
    3614:	ff 4f       	sbci	r31, 0xFF	; 255
    3616:	91 83       	std	Z+1, r25	; 0x01
    3618:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    361a:	de 01       	movw	r26, r28
    361c:	ab 58       	subi	r26, 0x8B	; 139
    361e:	bf 4f       	sbci	r27, 0xFF	; 255
    3620:	fe 01       	movw	r30, r28
    3622:	eb 58       	subi	r30, 0x8B	; 139
    3624:	ff 4f       	sbci	r31, 0xFF	; 255
    3626:	80 81       	ld	r24, Z
    3628:	91 81       	ldd	r25, Z+1	; 0x01
    362a:	01 97       	sbiw	r24, 0x01	; 1
    362c:	11 96       	adiw	r26, 0x01	; 1
    362e:	9c 93       	st	X, r25
    3630:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3632:	fe 01       	movw	r30, r28
    3634:	eb 58       	subi	r30, 0x8B	; 139
    3636:	ff 4f       	sbci	r31, 0xFF	; 255
    3638:	80 81       	ld	r24, Z
    363a:	91 81       	ldd	r25, Z+1	; 0x01
    363c:	00 97       	sbiw	r24, 0x00	; 0
    363e:	d1 f6       	brne	.-76     	; 0x35f4 <BuzzerSound+0x56a>
    3640:	27 c0       	rjmp	.+78     	; 0x3690 <BuzzerSound+0x606>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3642:	8e 01       	movw	r16, r28
    3644:	0b 58       	subi	r16, 0x8B	; 139
    3646:	1f 4f       	sbci	r17, 0xFF	; 255
    3648:	fe 01       	movw	r30, r28
    364a:	e9 58       	subi	r30, 0x89	; 137
    364c:	ff 4f       	sbci	r31, 0xFF	; 255
    364e:	60 81       	ld	r22, Z
    3650:	71 81       	ldd	r23, Z+1	; 0x01
    3652:	82 81       	ldd	r24, Z+2	; 0x02
    3654:	93 81       	ldd	r25, Z+3	; 0x03
    3656:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    365a:	dc 01       	movw	r26, r24
    365c:	cb 01       	movw	r24, r22
    365e:	f8 01       	movw	r30, r16
    3660:	91 83       	std	Z+1, r25	; 0x01
    3662:	80 83       	st	Z, r24
    3664:	de 01       	movw	r26, r28
    3666:	af 58       	subi	r26, 0x8F	; 143
    3668:	bf 4f       	sbci	r27, 0xFF	; 255
    366a:	fe 01       	movw	r30, r28
    366c:	eb 58       	subi	r30, 0x8B	; 139
    366e:	ff 4f       	sbci	r31, 0xFF	; 255
    3670:	80 81       	ld	r24, Z
    3672:	91 81       	ldd	r25, Z+1	; 0x01
    3674:	8d 93       	st	X+, r24
    3676:	9c 93       	st	X, r25
    3678:	fe 01       	movw	r30, r28
    367a:	ef 58       	subi	r30, 0x8F	; 143
    367c:	ff 4f       	sbci	r31, 0xFF	; 255
    367e:	80 81       	ld	r24, Z
    3680:	91 81       	ldd	r25, Z+1	; 0x01
    3682:	01 97       	sbiw	r24, 0x01	; 1
    3684:	f1 f7       	brne	.-4      	; 0x3682 <BuzzerSound+0x5f8>
    3686:	fe 01       	movw	r30, r28
    3688:	ef 58       	subi	r30, 0x8F	; 143
    368a:	ff 4f       	sbci	r31, 0xFF	; 255
    368c:	91 83       	std	Z+1, r25	; 0x01
    368e:	80 83       	st	Z, r24
		_delay_ms(70);
		DIO_u8SetPinValue(DIO_PORTB,DIO_PIN7,DIO_PIN_LOW);
    3690:	81 e0       	ldi	r24, 0x01	; 1
    3692:	67 e0       	ldi	r22, 0x07	; 7
    3694:	40 e0       	ldi	r20, 0x00	; 0
    3696:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_u8SetPinValue>
    369a:	fe 01       	movw	r30, r28
    369c:	e3 59       	subi	r30, 0x93	; 147
    369e:	ff 4f       	sbci	r31, 0xFF	; 255
    36a0:	80 e0       	ldi	r24, 0x00	; 0
    36a2:	90 e0       	ldi	r25, 0x00	; 0
    36a4:	ac e8       	ldi	r26, 0x8C	; 140
    36a6:	b2 e4       	ldi	r27, 0x42	; 66
    36a8:	80 83       	st	Z, r24
    36aa:	91 83       	std	Z+1, r25	; 0x01
    36ac:	a2 83       	std	Z+2, r26	; 0x02
    36ae:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36b0:	8e 01       	movw	r16, r28
    36b2:	07 59       	subi	r16, 0x97	; 151
    36b4:	1f 4f       	sbci	r17, 0xFF	; 255
    36b6:	fe 01       	movw	r30, r28
    36b8:	e3 59       	subi	r30, 0x93	; 147
    36ba:	ff 4f       	sbci	r31, 0xFF	; 255
    36bc:	60 81       	ld	r22, Z
    36be:	71 81       	ldd	r23, Z+1	; 0x01
    36c0:	82 81       	ldd	r24, Z+2	; 0x02
    36c2:	93 81       	ldd	r25, Z+3	; 0x03
    36c4:	20 e0       	ldi	r18, 0x00	; 0
    36c6:	30 e0       	ldi	r19, 0x00	; 0
    36c8:	4a ef       	ldi	r20, 0xFA	; 250
    36ca:	54 e4       	ldi	r21, 0x44	; 68
    36cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36d0:	dc 01       	movw	r26, r24
    36d2:	cb 01       	movw	r24, r22
    36d4:	f8 01       	movw	r30, r16
    36d6:	80 83       	st	Z, r24
    36d8:	91 83       	std	Z+1, r25	; 0x01
    36da:	a2 83       	std	Z+2, r26	; 0x02
    36dc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    36de:	fe 01       	movw	r30, r28
    36e0:	e7 59       	subi	r30, 0x97	; 151
    36e2:	ff 4f       	sbci	r31, 0xFF	; 255
    36e4:	60 81       	ld	r22, Z
    36e6:	71 81       	ldd	r23, Z+1	; 0x01
    36e8:	82 81       	ldd	r24, Z+2	; 0x02
    36ea:	93 81       	ldd	r25, Z+3	; 0x03
    36ec:	20 e0       	ldi	r18, 0x00	; 0
    36ee:	30 e0       	ldi	r19, 0x00	; 0
    36f0:	40 e8       	ldi	r20, 0x80	; 128
    36f2:	5f e3       	ldi	r21, 0x3F	; 63
    36f4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    36f8:	88 23       	and	r24, r24
    36fa:	44 f4       	brge	.+16     	; 0x370c <BuzzerSound+0x682>
		__ticks = 1;
    36fc:	fe 01       	movw	r30, r28
    36fe:	e9 59       	subi	r30, 0x99	; 153
    3700:	ff 4f       	sbci	r31, 0xFF	; 255
    3702:	81 e0       	ldi	r24, 0x01	; 1
    3704:	90 e0       	ldi	r25, 0x00	; 0
    3706:	91 83       	std	Z+1, r25	; 0x01
    3708:	80 83       	st	Z, r24
    370a:	64 c0       	rjmp	.+200    	; 0x37d4 <BuzzerSound+0x74a>
	else if (__tmp > 65535)
    370c:	fe 01       	movw	r30, r28
    370e:	e7 59       	subi	r30, 0x97	; 151
    3710:	ff 4f       	sbci	r31, 0xFF	; 255
    3712:	60 81       	ld	r22, Z
    3714:	71 81       	ldd	r23, Z+1	; 0x01
    3716:	82 81       	ldd	r24, Z+2	; 0x02
    3718:	93 81       	ldd	r25, Z+3	; 0x03
    371a:	20 e0       	ldi	r18, 0x00	; 0
    371c:	3f ef       	ldi	r19, 0xFF	; 255
    371e:	4f e7       	ldi	r20, 0x7F	; 127
    3720:	57 e4       	ldi	r21, 0x47	; 71
    3722:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3726:	18 16       	cp	r1, r24
    3728:	0c f0       	brlt	.+2      	; 0x372c <BuzzerSound+0x6a2>
    372a:	43 c0       	rjmp	.+134    	; 0x37b2 <BuzzerSound+0x728>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    372c:	fe 01       	movw	r30, r28
    372e:	e3 59       	subi	r30, 0x93	; 147
    3730:	ff 4f       	sbci	r31, 0xFF	; 255
    3732:	60 81       	ld	r22, Z
    3734:	71 81       	ldd	r23, Z+1	; 0x01
    3736:	82 81       	ldd	r24, Z+2	; 0x02
    3738:	93 81       	ldd	r25, Z+3	; 0x03
    373a:	20 e0       	ldi	r18, 0x00	; 0
    373c:	30 e0       	ldi	r19, 0x00	; 0
    373e:	40 e2       	ldi	r20, 0x20	; 32
    3740:	51 e4       	ldi	r21, 0x41	; 65
    3742:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3746:	dc 01       	movw	r26, r24
    3748:	cb 01       	movw	r24, r22
    374a:	8e 01       	movw	r16, r28
    374c:	09 59       	subi	r16, 0x99	; 153
    374e:	1f 4f       	sbci	r17, 0xFF	; 255
    3750:	bc 01       	movw	r22, r24
    3752:	cd 01       	movw	r24, r26
    3754:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3758:	dc 01       	movw	r26, r24
    375a:	cb 01       	movw	r24, r22
    375c:	f8 01       	movw	r30, r16
    375e:	91 83       	std	Z+1, r25	; 0x01
    3760:	80 83       	st	Z, r24
    3762:	1f c0       	rjmp	.+62     	; 0x37a2 <BuzzerSound+0x718>
    3764:	fe 01       	movw	r30, r28
    3766:	eb 59       	subi	r30, 0x9B	; 155
    3768:	ff 4f       	sbci	r31, 0xFF	; 255
    376a:	88 ec       	ldi	r24, 0xC8	; 200
    376c:	90 e0       	ldi	r25, 0x00	; 0
    376e:	91 83       	std	Z+1, r25	; 0x01
    3770:	80 83       	st	Z, r24
    3772:	fe 01       	movw	r30, r28
    3774:	eb 59       	subi	r30, 0x9B	; 155
    3776:	ff 4f       	sbci	r31, 0xFF	; 255
    3778:	80 81       	ld	r24, Z
    377a:	91 81       	ldd	r25, Z+1	; 0x01
    377c:	01 97       	sbiw	r24, 0x01	; 1
    377e:	f1 f7       	brne	.-4      	; 0x377c <BuzzerSound+0x6f2>
    3780:	fe 01       	movw	r30, r28
    3782:	eb 59       	subi	r30, 0x9B	; 155
    3784:	ff 4f       	sbci	r31, 0xFF	; 255
    3786:	91 83       	std	Z+1, r25	; 0x01
    3788:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    378a:	de 01       	movw	r26, r28
    378c:	a9 59       	subi	r26, 0x99	; 153
    378e:	bf 4f       	sbci	r27, 0xFF	; 255
    3790:	fe 01       	movw	r30, r28
    3792:	e9 59       	subi	r30, 0x99	; 153
    3794:	ff 4f       	sbci	r31, 0xFF	; 255
    3796:	80 81       	ld	r24, Z
    3798:	91 81       	ldd	r25, Z+1	; 0x01
    379a:	01 97       	sbiw	r24, 0x01	; 1
    379c:	11 96       	adiw	r26, 0x01	; 1
    379e:	9c 93       	st	X, r25
    37a0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37a2:	fe 01       	movw	r30, r28
    37a4:	e9 59       	subi	r30, 0x99	; 153
    37a6:	ff 4f       	sbci	r31, 0xFF	; 255
    37a8:	80 81       	ld	r24, Z
    37aa:	91 81       	ldd	r25, Z+1	; 0x01
    37ac:	00 97       	sbiw	r24, 0x00	; 0
    37ae:	d1 f6       	brne	.-76     	; 0x3764 <BuzzerSound+0x6da>
    37b0:	27 c0       	rjmp	.+78     	; 0x3800 <BuzzerSound+0x776>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37b2:	8e 01       	movw	r16, r28
    37b4:	09 59       	subi	r16, 0x99	; 153
    37b6:	1f 4f       	sbci	r17, 0xFF	; 255
    37b8:	fe 01       	movw	r30, r28
    37ba:	e7 59       	subi	r30, 0x97	; 151
    37bc:	ff 4f       	sbci	r31, 0xFF	; 255
    37be:	60 81       	ld	r22, Z
    37c0:	71 81       	ldd	r23, Z+1	; 0x01
    37c2:	82 81       	ldd	r24, Z+2	; 0x02
    37c4:	93 81       	ldd	r25, Z+3	; 0x03
    37c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37ca:	dc 01       	movw	r26, r24
    37cc:	cb 01       	movw	r24, r22
    37ce:	f8 01       	movw	r30, r16
    37d0:	91 83       	std	Z+1, r25	; 0x01
    37d2:	80 83       	st	Z, r24
    37d4:	de 01       	movw	r26, r28
    37d6:	ad 59       	subi	r26, 0x9D	; 157
    37d8:	bf 4f       	sbci	r27, 0xFF	; 255
    37da:	fe 01       	movw	r30, r28
    37dc:	e9 59       	subi	r30, 0x99	; 153
    37de:	ff 4f       	sbci	r31, 0xFF	; 255
    37e0:	80 81       	ld	r24, Z
    37e2:	91 81       	ldd	r25, Z+1	; 0x01
    37e4:	8d 93       	st	X+, r24
    37e6:	9c 93       	st	X, r25
    37e8:	fe 01       	movw	r30, r28
    37ea:	ed 59       	subi	r30, 0x9D	; 157
    37ec:	ff 4f       	sbci	r31, 0xFF	; 255
    37ee:	80 81       	ld	r24, Z
    37f0:	91 81       	ldd	r25, Z+1	; 0x01
    37f2:	01 97       	sbiw	r24, 0x01	; 1
    37f4:	f1 f7       	brne	.-4      	; 0x37f2 <BuzzerSound+0x768>
    37f6:	fe 01       	movw	r30, r28
    37f8:	ed 59       	subi	r30, 0x9D	; 157
    37fa:	ff 4f       	sbci	r31, 0xFF	; 255
    37fc:	91 83       	std	Z+1, r25	; 0x01
    37fe:	80 83       	st	Z, r24
		_delay_ms(50);
		DIO_u8SetPinValue(DIO_PORTB,DIO_PIN7,DIO_PIN_LOW);
		_delay_ms(50);
	}
	_delay_ms(1000);
	for(i=0;i<20;i++){
    3800:	de 01       	movw	r26, r28
    3802:	a7 55       	subi	r26, 0x57	; 87
    3804:	bf 4f       	sbci	r27, 0xFF	; 255
    3806:	fe 01       	movw	r30, r28
    3808:	e7 55       	subi	r30, 0x57	; 87
    380a:	ff 4f       	sbci	r31, 0xFF	; 255
    380c:	80 81       	ld	r24, Z
    380e:	8f 5f       	subi	r24, 0xFF	; 255
    3810:	8c 93       	st	X, r24
    3812:	fe 01       	movw	r30, r28
    3814:	e7 55       	subi	r30, 0x57	; 87
    3816:	ff 4f       	sbci	r31, 0xFF	; 255
    3818:	80 81       	ld	r24, Z
    381a:	84 31       	cpi	r24, 0x14	; 20
    381c:	08 f4       	brcc	.+2      	; 0x3820 <BuzzerSound+0x796>
    381e:	80 ce       	rjmp	.-768    	; 0x3520 <BuzzerSound+0x496>
    3820:	fe 01       	movw	r30, r28
    3822:	e1 5a       	subi	r30, 0xA1	; 161
    3824:	ff 4f       	sbci	r31, 0xFF	; 255
    3826:	80 e0       	ldi	r24, 0x00	; 0
    3828:	90 e0       	ldi	r25, 0x00	; 0
    382a:	aa e7       	ldi	r26, 0x7A	; 122
    382c:	b4 e4       	ldi	r27, 0x44	; 68
    382e:	80 83       	st	Z, r24
    3830:	91 83       	std	Z+1, r25	; 0x01
    3832:	a2 83       	std	Z+2, r26	; 0x02
    3834:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3836:	8e 01       	movw	r16, r28
    3838:	05 5a       	subi	r16, 0xA5	; 165
    383a:	1f 4f       	sbci	r17, 0xFF	; 255
    383c:	fe 01       	movw	r30, r28
    383e:	e1 5a       	subi	r30, 0xA1	; 161
    3840:	ff 4f       	sbci	r31, 0xFF	; 255
    3842:	60 81       	ld	r22, Z
    3844:	71 81       	ldd	r23, Z+1	; 0x01
    3846:	82 81       	ldd	r24, Z+2	; 0x02
    3848:	93 81       	ldd	r25, Z+3	; 0x03
    384a:	20 e0       	ldi	r18, 0x00	; 0
    384c:	30 e0       	ldi	r19, 0x00	; 0
    384e:	4a ef       	ldi	r20, 0xFA	; 250
    3850:	54 e4       	ldi	r21, 0x44	; 68
    3852:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3856:	dc 01       	movw	r26, r24
    3858:	cb 01       	movw	r24, r22
    385a:	f8 01       	movw	r30, r16
    385c:	80 83       	st	Z, r24
    385e:	91 83       	std	Z+1, r25	; 0x01
    3860:	a2 83       	std	Z+2, r26	; 0x02
    3862:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3864:	fe 01       	movw	r30, r28
    3866:	e5 5a       	subi	r30, 0xA5	; 165
    3868:	ff 4f       	sbci	r31, 0xFF	; 255
    386a:	60 81       	ld	r22, Z
    386c:	71 81       	ldd	r23, Z+1	; 0x01
    386e:	82 81       	ldd	r24, Z+2	; 0x02
    3870:	93 81       	ldd	r25, Z+3	; 0x03
    3872:	20 e0       	ldi	r18, 0x00	; 0
    3874:	30 e0       	ldi	r19, 0x00	; 0
    3876:	40 e8       	ldi	r20, 0x80	; 128
    3878:	5f e3       	ldi	r21, 0x3F	; 63
    387a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    387e:	88 23       	and	r24, r24
    3880:	44 f4       	brge	.+16     	; 0x3892 <BuzzerSound+0x808>
		__ticks = 1;
    3882:	fe 01       	movw	r30, r28
    3884:	e7 5a       	subi	r30, 0xA7	; 167
    3886:	ff 4f       	sbci	r31, 0xFF	; 255
    3888:	81 e0       	ldi	r24, 0x01	; 1
    388a:	90 e0       	ldi	r25, 0x00	; 0
    388c:	91 83       	std	Z+1, r25	; 0x01
    388e:	80 83       	st	Z, r24
    3890:	64 c0       	rjmp	.+200    	; 0x395a <BuzzerSound+0x8d0>
	else if (__tmp > 65535)
    3892:	fe 01       	movw	r30, r28
    3894:	e5 5a       	subi	r30, 0xA5	; 165
    3896:	ff 4f       	sbci	r31, 0xFF	; 255
    3898:	60 81       	ld	r22, Z
    389a:	71 81       	ldd	r23, Z+1	; 0x01
    389c:	82 81       	ldd	r24, Z+2	; 0x02
    389e:	93 81       	ldd	r25, Z+3	; 0x03
    38a0:	20 e0       	ldi	r18, 0x00	; 0
    38a2:	3f ef       	ldi	r19, 0xFF	; 255
    38a4:	4f e7       	ldi	r20, 0x7F	; 127
    38a6:	57 e4       	ldi	r21, 0x47	; 71
    38a8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    38ac:	18 16       	cp	r1, r24
    38ae:	0c f0       	brlt	.+2      	; 0x38b2 <BuzzerSound+0x828>
    38b0:	43 c0       	rjmp	.+134    	; 0x3938 <BuzzerSound+0x8ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38b2:	fe 01       	movw	r30, r28
    38b4:	e1 5a       	subi	r30, 0xA1	; 161
    38b6:	ff 4f       	sbci	r31, 0xFF	; 255
    38b8:	60 81       	ld	r22, Z
    38ba:	71 81       	ldd	r23, Z+1	; 0x01
    38bc:	82 81       	ldd	r24, Z+2	; 0x02
    38be:	93 81       	ldd	r25, Z+3	; 0x03
    38c0:	20 e0       	ldi	r18, 0x00	; 0
    38c2:	30 e0       	ldi	r19, 0x00	; 0
    38c4:	40 e2       	ldi	r20, 0x20	; 32
    38c6:	51 e4       	ldi	r21, 0x41	; 65
    38c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38cc:	dc 01       	movw	r26, r24
    38ce:	cb 01       	movw	r24, r22
    38d0:	8e 01       	movw	r16, r28
    38d2:	07 5a       	subi	r16, 0xA7	; 167
    38d4:	1f 4f       	sbci	r17, 0xFF	; 255
    38d6:	bc 01       	movw	r22, r24
    38d8:	cd 01       	movw	r24, r26
    38da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38de:	dc 01       	movw	r26, r24
    38e0:	cb 01       	movw	r24, r22
    38e2:	f8 01       	movw	r30, r16
    38e4:	91 83       	std	Z+1, r25	; 0x01
    38e6:	80 83       	st	Z, r24
    38e8:	1f c0       	rjmp	.+62     	; 0x3928 <BuzzerSound+0x89e>
    38ea:	fe 01       	movw	r30, r28
    38ec:	e9 5a       	subi	r30, 0xA9	; 169
    38ee:	ff 4f       	sbci	r31, 0xFF	; 255
    38f0:	88 ec       	ldi	r24, 0xC8	; 200
    38f2:	90 e0       	ldi	r25, 0x00	; 0
    38f4:	91 83       	std	Z+1, r25	; 0x01
    38f6:	80 83       	st	Z, r24
    38f8:	fe 01       	movw	r30, r28
    38fa:	e9 5a       	subi	r30, 0xA9	; 169
    38fc:	ff 4f       	sbci	r31, 0xFF	; 255
    38fe:	80 81       	ld	r24, Z
    3900:	91 81       	ldd	r25, Z+1	; 0x01
    3902:	01 97       	sbiw	r24, 0x01	; 1
    3904:	f1 f7       	brne	.-4      	; 0x3902 <BuzzerSound+0x878>
    3906:	fe 01       	movw	r30, r28
    3908:	e9 5a       	subi	r30, 0xA9	; 169
    390a:	ff 4f       	sbci	r31, 0xFF	; 255
    390c:	91 83       	std	Z+1, r25	; 0x01
    390e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3910:	de 01       	movw	r26, r28
    3912:	a7 5a       	subi	r26, 0xA7	; 167
    3914:	bf 4f       	sbci	r27, 0xFF	; 255
    3916:	fe 01       	movw	r30, r28
    3918:	e7 5a       	subi	r30, 0xA7	; 167
    391a:	ff 4f       	sbci	r31, 0xFF	; 255
    391c:	80 81       	ld	r24, Z
    391e:	91 81       	ldd	r25, Z+1	; 0x01
    3920:	01 97       	sbiw	r24, 0x01	; 1
    3922:	11 96       	adiw	r26, 0x01	; 1
    3924:	9c 93       	st	X, r25
    3926:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3928:	fe 01       	movw	r30, r28
    392a:	e7 5a       	subi	r30, 0xA7	; 167
    392c:	ff 4f       	sbci	r31, 0xFF	; 255
    392e:	80 81       	ld	r24, Z
    3930:	91 81       	ldd	r25, Z+1	; 0x01
    3932:	00 97       	sbiw	r24, 0x00	; 0
    3934:	d1 f6       	brne	.-76     	; 0x38ea <BuzzerSound+0x860>
    3936:	28 c0       	rjmp	.+80     	; 0x3988 <BuzzerSound+0x8fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3938:	8e 01       	movw	r16, r28
    393a:	07 5a       	subi	r16, 0xA7	; 167
    393c:	1f 4f       	sbci	r17, 0xFF	; 255
    393e:	fe 01       	movw	r30, r28
    3940:	e5 5a       	subi	r30, 0xA5	; 165
    3942:	ff 4f       	sbci	r31, 0xFF	; 255
    3944:	60 81       	ld	r22, Z
    3946:	71 81       	ldd	r23, Z+1	; 0x01
    3948:	82 81       	ldd	r24, Z+2	; 0x02
    394a:	93 81       	ldd	r25, Z+3	; 0x03
    394c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3950:	dc 01       	movw	r26, r24
    3952:	cb 01       	movw	r24, r22
    3954:	f8 01       	movw	r30, r16
    3956:	91 83       	std	Z+1, r25	; 0x01
    3958:	80 83       	st	Z, r24
    395a:	de 01       	movw	r26, r28
    395c:	ab 5a       	subi	r26, 0xAB	; 171
    395e:	bf 4f       	sbci	r27, 0xFF	; 255
    3960:	fe 01       	movw	r30, r28
    3962:	e7 5a       	subi	r30, 0xA7	; 167
    3964:	ff 4f       	sbci	r31, 0xFF	; 255
    3966:	80 81       	ld	r24, Z
    3968:	91 81       	ldd	r25, Z+1	; 0x01
    396a:	11 96       	adiw	r26, 0x01	; 1
    396c:	9c 93       	st	X, r25
    396e:	8e 93       	st	-X, r24
    3970:	fe 01       	movw	r30, r28
    3972:	eb 5a       	subi	r30, 0xAB	; 171
    3974:	ff 4f       	sbci	r31, 0xFF	; 255
    3976:	80 81       	ld	r24, Z
    3978:	91 81       	ldd	r25, Z+1	; 0x01
    397a:	01 97       	sbiw	r24, 0x01	; 1
    397c:	f1 f7       	brne	.-4      	; 0x397a <BuzzerSound+0x8f0>
    397e:	fe 01       	movw	r30, r28
    3980:	eb 5a       	subi	r30, 0xAB	; 171
    3982:	ff 4f       	sbci	r31, 0xFF	; 255
    3984:	91 83       	std	Z+1, r25	; 0x01
    3986:	80 83       	st	Z, r24
		_delay_ms(70);
		DIO_u8SetPinValue(DIO_PORTB,DIO_PIN7,DIO_PIN_LOW);
		_delay_ms(70);
	}
	_delay_ms(1000);
	for(i=0;i<20;i++){
    3988:	fe 01       	movw	r30, r28
    398a:	e7 55       	subi	r30, 0x57	; 87
    398c:	ff 4f       	sbci	r31, 0xFF	; 255
    398e:	10 82       	st	Z, r1
    3990:	4b c1       	rjmp	.+662    	; 0x3c28 <BuzzerSound+0xb9e>
		DIO_u8SetPinValue(DIO_PORTB,DIO_PIN7,DIO_PIN_HIGH);
    3992:	81 e0       	ldi	r24, 0x01	; 1
    3994:	67 e0       	ldi	r22, 0x07	; 7
    3996:	41 e0       	ldi	r20, 0x01	; 1
    3998:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_u8SetPinValue>
    399c:	fe 01       	movw	r30, r28
    399e:	ef 5a       	subi	r30, 0xAF	; 175
    39a0:	ff 4f       	sbci	r31, 0xFF	; 255
    39a2:	80 e0       	ldi	r24, 0x00	; 0
    39a4:	90 e0       	ldi	r25, 0x00	; 0
    39a6:	a8 ec       	ldi	r26, 0xC8	; 200
    39a8:	b2 e4       	ldi	r27, 0x42	; 66
    39aa:	80 83       	st	Z, r24
    39ac:	91 83       	std	Z+1, r25	; 0x01
    39ae:	a2 83       	std	Z+2, r26	; 0x02
    39b0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39b2:	8e 01       	movw	r16, r28
    39b4:	03 5b       	subi	r16, 0xB3	; 179
    39b6:	1f 4f       	sbci	r17, 0xFF	; 255
    39b8:	fe 01       	movw	r30, r28
    39ba:	ef 5a       	subi	r30, 0xAF	; 175
    39bc:	ff 4f       	sbci	r31, 0xFF	; 255
    39be:	60 81       	ld	r22, Z
    39c0:	71 81       	ldd	r23, Z+1	; 0x01
    39c2:	82 81       	ldd	r24, Z+2	; 0x02
    39c4:	93 81       	ldd	r25, Z+3	; 0x03
    39c6:	20 e0       	ldi	r18, 0x00	; 0
    39c8:	30 e0       	ldi	r19, 0x00	; 0
    39ca:	4a ef       	ldi	r20, 0xFA	; 250
    39cc:	54 e4       	ldi	r21, 0x44	; 68
    39ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39d2:	dc 01       	movw	r26, r24
    39d4:	cb 01       	movw	r24, r22
    39d6:	f8 01       	movw	r30, r16
    39d8:	80 83       	st	Z, r24
    39da:	91 83       	std	Z+1, r25	; 0x01
    39dc:	a2 83       	std	Z+2, r26	; 0x02
    39de:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    39e0:	fe 01       	movw	r30, r28
    39e2:	e3 5b       	subi	r30, 0xB3	; 179
    39e4:	ff 4f       	sbci	r31, 0xFF	; 255
    39e6:	60 81       	ld	r22, Z
    39e8:	71 81       	ldd	r23, Z+1	; 0x01
    39ea:	82 81       	ldd	r24, Z+2	; 0x02
    39ec:	93 81       	ldd	r25, Z+3	; 0x03
    39ee:	20 e0       	ldi	r18, 0x00	; 0
    39f0:	30 e0       	ldi	r19, 0x00	; 0
    39f2:	40 e8       	ldi	r20, 0x80	; 128
    39f4:	5f e3       	ldi	r21, 0x3F	; 63
    39f6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    39fa:	88 23       	and	r24, r24
    39fc:	44 f4       	brge	.+16     	; 0x3a0e <BuzzerSound+0x984>
		__ticks = 1;
    39fe:	fe 01       	movw	r30, r28
    3a00:	e5 5b       	subi	r30, 0xB5	; 181
    3a02:	ff 4f       	sbci	r31, 0xFF	; 255
    3a04:	81 e0       	ldi	r24, 0x01	; 1
    3a06:	90 e0       	ldi	r25, 0x00	; 0
    3a08:	91 83       	std	Z+1, r25	; 0x01
    3a0a:	80 83       	st	Z, r24
    3a0c:	64 c0       	rjmp	.+200    	; 0x3ad6 <BuzzerSound+0xa4c>
	else if (__tmp > 65535)
    3a0e:	fe 01       	movw	r30, r28
    3a10:	e3 5b       	subi	r30, 0xB3	; 179
    3a12:	ff 4f       	sbci	r31, 0xFF	; 255
    3a14:	60 81       	ld	r22, Z
    3a16:	71 81       	ldd	r23, Z+1	; 0x01
    3a18:	82 81       	ldd	r24, Z+2	; 0x02
    3a1a:	93 81       	ldd	r25, Z+3	; 0x03
    3a1c:	20 e0       	ldi	r18, 0x00	; 0
    3a1e:	3f ef       	ldi	r19, 0xFF	; 255
    3a20:	4f e7       	ldi	r20, 0x7F	; 127
    3a22:	57 e4       	ldi	r21, 0x47	; 71
    3a24:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3a28:	18 16       	cp	r1, r24
    3a2a:	0c f0       	brlt	.+2      	; 0x3a2e <BuzzerSound+0x9a4>
    3a2c:	43 c0       	rjmp	.+134    	; 0x3ab4 <BuzzerSound+0xa2a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a2e:	fe 01       	movw	r30, r28
    3a30:	ef 5a       	subi	r30, 0xAF	; 175
    3a32:	ff 4f       	sbci	r31, 0xFF	; 255
    3a34:	60 81       	ld	r22, Z
    3a36:	71 81       	ldd	r23, Z+1	; 0x01
    3a38:	82 81       	ldd	r24, Z+2	; 0x02
    3a3a:	93 81       	ldd	r25, Z+3	; 0x03
    3a3c:	20 e0       	ldi	r18, 0x00	; 0
    3a3e:	30 e0       	ldi	r19, 0x00	; 0
    3a40:	40 e2       	ldi	r20, 0x20	; 32
    3a42:	51 e4       	ldi	r21, 0x41	; 65
    3a44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a48:	dc 01       	movw	r26, r24
    3a4a:	cb 01       	movw	r24, r22
    3a4c:	8e 01       	movw	r16, r28
    3a4e:	05 5b       	subi	r16, 0xB5	; 181
    3a50:	1f 4f       	sbci	r17, 0xFF	; 255
    3a52:	bc 01       	movw	r22, r24
    3a54:	cd 01       	movw	r24, r26
    3a56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a5a:	dc 01       	movw	r26, r24
    3a5c:	cb 01       	movw	r24, r22
    3a5e:	f8 01       	movw	r30, r16
    3a60:	91 83       	std	Z+1, r25	; 0x01
    3a62:	80 83       	st	Z, r24
    3a64:	1f c0       	rjmp	.+62     	; 0x3aa4 <BuzzerSound+0xa1a>
    3a66:	fe 01       	movw	r30, r28
    3a68:	e7 5b       	subi	r30, 0xB7	; 183
    3a6a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a6c:	88 ec       	ldi	r24, 0xC8	; 200
    3a6e:	90 e0       	ldi	r25, 0x00	; 0
    3a70:	91 83       	std	Z+1, r25	; 0x01
    3a72:	80 83       	st	Z, r24
    3a74:	fe 01       	movw	r30, r28
    3a76:	e7 5b       	subi	r30, 0xB7	; 183
    3a78:	ff 4f       	sbci	r31, 0xFF	; 255
    3a7a:	80 81       	ld	r24, Z
    3a7c:	91 81       	ldd	r25, Z+1	; 0x01
    3a7e:	01 97       	sbiw	r24, 0x01	; 1
    3a80:	f1 f7       	brne	.-4      	; 0x3a7e <BuzzerSound+0x9f4>
    3a82:	fe 01       	movw	r30, r28
    3a84:	e7 5b       	subi	r30, 0xB7	; 183
    3a86:	ff 4f       	sbci	r31, 0xFF	; 255
    3a88:	91 83       	std	Z+1, r25	; 0x01
    3a8a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a8c:	de 01       	movw	r26, r28
    3a8e:	a5 5b       	subi	r26, 0xB5	; 181
    3a90:	bf 4f       	sbci	r27, 0xFF	; 255
    3a92:	fe 01       	movw	r30, r28
    3a94:	e5 5b       	subi	r30, 0xB5	; 181
    3a96:	ff 4f       	sbci	r31, 0xFF	; 255
    3a98:	80 81       	ld	r24, Z
    3a9a:	91 81       	ldd	r25, Z+1	; 0x01
    3a9c:	01 97       	sbiw	r24, 0x01	; 1
    3a9e:	11 96       	adiw	r26, 0x01	; 1
    3aa0:	9c 93       	st	X, r25
    3aa2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3aa4:	fe 01       	movw	r30, r28
    3aa6:	e5 5b       	subi	r30, 0xB5	; 181
    3aa8:	ff 4f       	sbci	r31, 0xFF	; 255
    3aaa:	80 81       	ld	r24, Z
    3aac:	91 81       	ldd	r25, Z+1	; 0x01
    3aae:	00 97       	sbiw	r24, 0x00	; 0
    3ab0:	d1 f6       	brne	.-76     	; 0x3a66 <BuzzerSound+0x9dc>
    3ab2:	27 c0       	rjmp	.+78     	; 0x3b02 <BuzzerSound+0xa78>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ab4:	8e 01       	movw	r16, r28
    3ab6:	05 5b       	subi	r16, 0xB5	; 181
    3ab8:	1f 4f       	sbci	r17, 0xFF	; 255
    3aba:	fe 01       	movw	r30, r28
    3abc:	e3 5b       	subi	r30, 0xB3	; 179
    3abe:	ff 4f       	sbci	r31, 0xFF	; 255
    3ac0:	60 81       	ld	r22, Z
    3ac2:	71 81       	ldd	r23, Z+1	; 0x01
    3ac4:	82 81       	ldd	r24, Z+2	; 0x02
    3ac6:	93 81       	ldd	r25, Z+3	; 0x03
    3ac8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3acc:	dc 01       	movw	r26, r24
    3ace:	cb 01       	movw	r24, r22
    3ad0:	f8 01       	movw	r30, r16
    3ad2:	91 83       	std	Z+1, r25	; 0x01
    3ad4:	80 83       	st	Z, r24
    3ad6:	de 01       	movw	r26, r28
    3ad8:	a9 5b       	subi	r26, 0xB9	; 185
    3ada:	bf 4f       	sbci	r27, 0xFF	; 255
    3adc:	fe 01       	movw	r30, r28
    3ade:	e5 5b       	subi	r30, 0xB5	; 181
    3ae0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ae2:	80 81       	ld	r24, Z
    3ae4:	91 81       	ldd	r25, Z+1	; 0x01
    3ae6:	8d 93       	st	X+, r24
    3ae8:	9c 93       	st	X, r25
    3aea:	fe 01       	movw	r30, r28
    3aec:	e9 5b       	subi	r30, 0xB9	; 185
    3aee:	ff 4f       	sbci	r31, 0xFF	; 255
    3af0:	80 81       	ld	r24, Z
    3af2:	91 81       	ldd	r25, Z+1	; 0x01
    3af4:	01 97       	sbiw	r24, 0x01	; 1
    3af6:	f1 f7       	brne	.-4      	; 0x3af4 <BuzzerSound+0xa6a>
    3af8:	fe 01       	movw	r30, r28
    3afa:	e9 5b       	subi	r30, 0xB9	; 185
    3afc:	ff 4f       	sbci	r31, 0xFF	; 255
    3afe:	91 83       	std	Z+1, r25	; 0x01
    3b00:	80 83       	st	Z, r24
		_delay_ms(100);
		DIO_u8SetPinValue(DIO_PORTB,DIO_PIN7,DIO_PIN_LOW);
    3b02:	81 e0       	ldi	r24, 0x01	; 1
    3b04:	67 e0       	ldi	r22, 0x07	; 7
    3b06:	40 e0       	ldi	r20, 0x00	; 0
    3b08:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_u8SetPinValue>
    3b0c:	fe 01       	movw	r30, r28
    3b0e:	ed 5b       	subi	r30, 0xBD	; 189
    3b10:	ff 4f       	sbci	r31, 0xFF	; 255
    3b12:	80 e0       	ldi	r24, 0x00	; 0
    3b14:	90 e0       	ldi	r25, 0x00	; 0
    3b16:	a8 ec       	ldi	r26, 0xC8	; 200
    3b18:	b2 e4       	ldi	r27, 0x42	; 66
    3b1a:	80 83       	st	Z, r24
    3b1c:	91 83       	std	Z+1, r25	; 0x01
    3b1e:	a2 83       	std	Z+2, r26	; 0x02
    3b20:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b22:	8e 01       	movw	r16, r28
    3b24:	01 5c       	subi	r16, 0xC1	; 193
    3b26:	1f 4f       	sbci	r17, 0xFF	; 255
    3b28:	fe 01       	movw	r30, r28
    3b2a:	ed 5b       	subi	r30, 0xBD	; 189
    3b2c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b2e:	60 81       	ld	r22, Z
    3b30:	71 81       	ldd	r23, Z+1	; 0x01
    3b32:	82 81       	ldd	r24, Z+2	; 0x02
    3b34:	93 81       	ldd	r25, Z+3	; 0x03
    3b36:	20 e0       	ldi	r18, 0x00	; 0
    3b38:	30 e0       	ldi	r19, 0x00	; 0
    3b3a:	4a ef       	ldi	r20, 0xFA	; 250
    3b3c:	54 e4       	ldi	r21, 0x44	; 68
    3b3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b42:	dc 01       	movw	r26, r24
    3b44:	cb 01       	movw	r24, r22
    3b46:	f8 01       	movw	r30, r16
    3b48:	80 83       	st	Z, r24
    3b4a:	91 83       	std	Z+1, r25	; 0x01
    3b4c:	a2 83       	std	Z+2, r26	; 0x02
    3b4e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3b50:	fe 01       	movw	r30, r28
    3b52:	ff 96       	adiw	r30, 0x3f	; 63
    3b54:	60 81       	ld	r22, Z
    3b56:	71 81       	ldd	r23, Z+1	; 0x01
    3b58:	82 81       	ldd	r24, Z+2	; 0x02
    3b5a:	93 81       	ldd	r25, Z+3	; 0x03
    3b5c:	20 e0       	ldi	r18, 0x00	; 0
    3b5e:	30 e0       	ldi	r19, 0x00	; 0
    3b60:	40 e8       	ldi	r20, 0x80	; 128
    3b62:	5f e3       	ldi	r21, 0x3F	; 63
    3b64:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3b68:	88 23       	and	r24, r24
    3b6a:	2c f4       	brge	.+10     	; 0x3b76 <BuzzerSound+0xaec>
		__ticks = 1;
    3b6c:	81 e0       	ldi	r24, 0x01	; 1
    3b6e:	90 e0       	ldi	r25, 0x00	; 0
    3b70:	9e af       	std	Y+62, r25	; 0x3e
    3b72:	8d af       	std	Y+61, r24	; 0x3d
    3b74:	46 c0       	rjmp	.+140    	; 0x3c02 <BuzzerSound+0xb78>
	else if (__tmp > 65535)
    3b76:	fe 01       	movw	r30, r28
    3b78:	ff 96       	adiw	r30, 0x3f	; 63
    3b7a:	60 81       	ld	r22, Z
    3b7c:	71 81       	ldd	r23, Z+1	; 0x01
    3b7e:	82 81       	ldd	r24, Z+2	; 0x02
    3b80:	93 81       	ldd	r25, Z+3	; 0x03
    3b82:	20 e0       	ldi	r18, 0x00	; 0
    3b84:	3f ef       	ldi	r19, 0xFF	; 255
    3b86:	4f e7       	ldi	r20, 0x7F	; 127
    3b88:	57 e4       	ldi	r21, 0x47	; 71
    3b8a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3b8e:	18 16       	cp	r1, r24
    3b90:	64 f5       	brge	.+88     	; 0x3bea <BuzzerSound+0xb60>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b92:	fe 01       	movw	r30, r28
    3b94:	ed 5b       	subi	r30, 0xBD	; 189
    3b96:	ff 4f       	sbci	r31, 0xFF	; 255
    3b98:	60 81       	ld	r22, Z
    3b9a:	71 81       	ldd	r23, Z+1	; 0x01
    3b9c:	82 81       	ldd	r24, Z+2	; 0x02
    3b9e:	93 81       	ldd	r25, Z+3	; 0x03
    3ba0:	20 e0       	ldi	r18, 0x00	; 0
    3ba2:	30 e0       	ldi	r19, 0x00	; 0
    3ba4:	40 e2       	ldi	r20, 0x20	; 32
    3ba6:	51 e4       	ldi	r21, 0x41	; 65
    3ba8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bac:	dc 01       	movw	r26, r24
    3bae:	cb 01       	movw	r24, r22
    3bb0:	bc 01       	movw	r22, r24
    3bb2:	cd 01       	movw	r24, r26
    3bb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bb8:	dc 01       	movw	r26, r24
    3bba:	cb 01       	movw	r24, r22
    3bbc:	9e af       	std	Y+62, r25	; 0x3e
    3bbe:	8d af       	std	Y+61, r24	; 0x3d
    3bc0:	0f c0       	rjmp	.+30     	; 0x3be0 <BuzzerSound+0xb56>
    3bc2:	88 ec       	ldi	r24, 0xC8	; 200
    3bc4:	90 e0       	ldi	r25, 0x00	; 0
    3bc6:	9c af       	std	Y+60, r25	; 0x3c
    3bc8:	8b af       	std	Y+59, r24	; 0x3b
    3bca:	8b ad       	ldd	r24, Y+59	; 0x3b
    3bcc:	9c ad       	ldd	r25, Y+60	; 0x3c
    3bce:	01 97       	sbiw	r24, 0x01	; 1
    3bd0:	f1 f7       	brne	.-4      	; 0x3bce <BuzzerSound+0xb44>
    3bd2:	9c af       	std	Y+60, r25	; 0x3c
    3bd4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bd6:	8d ad       	ldd	r24, Y+61	; 0x3d
    3bd8:	9e ad       	ldd	r25, Y+62	; 0x3e
    3bda:	01 97       	sbiw	r24, 0x01	; 1
    3bdc:	9e af       	std	Y+62, r25	; 0x3e
    3bde:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3be0:	8d ad       	ldd	r24, Y+61	; 0x3d
    3be2:	9e ad       	ldd	r25, Y+62	; 0x3e
    3be4:	00 97       	sbiw	r24, 0x00	; 0
    3be6:	69 f7       	brne	.-38     	; 0x3bc2 <BuzzerSound+0xb38>
    3be8:	16 c0       	rjmp	.+44     	; 0x3c16 <BuzzerSound+0xb8c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bea:	fe 01       	movw	r30, r28
    3bec:	ff 96       	adiw	r30, 0x3f	; 63
    3bee:	60 81       	ld	r22, Z
    3bf0:	71 81       	ldd	r23, Z+1	; 0x01
    3bf2:	82 81       	ldd	r24, Z+2	; 0x02
    3bf4:	93 81       	ldd	r25, Z+3	; 0x03
    3bf6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bfa:	dc 01       	movw	r26, r24
    3bfc:	cb 01       	movw	r24, r22
    3bfe:	9e af       	std	Y+62, r25	; 0x3e
    3c00:	8d af       	std	Y+61, r24	; 0x3d
    3c02:	8d ad       	ldd	r24, Y+61	; 0x3d
    3c04:	9e ad       	ldd	r25, Y+62	; 0x3e
    3c06:	9a af       	std	Y+58, r25	; 0x3a
    3c08:	89 af       	std	Y+57, r24	; 0x39
    3c0a:	89 ad       	ldd	r24, Y+57	; 0x39
    3c0c:	9a ad       	ldd	r25, Y+58	; 0x3a
    3c0e:	01 97       	sbiw	r24, 0x01	; 1
    3c10:	f1 f7       	brne	.-4      	; 0x3c0e <BuzzerSound+0xb84>
    3c12:	9a af       	std	Y+58, r25	; 0x3a
    3c14:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(70);
		DIO_u8SetPinValue(DIO_PORTB,DIO_PIN7,DIO_PIN_LOW);
		_delay_ms(70);
	}
	_delay_ms(1000);
	for(i=0;i<20;i++){
    3c16:	de 01       	movw	r26, r28
    3c18:	a7 55       	subi	r26, 0x57	; 87
    3c1a:	bf 4f       	sbci	r27, 0xFF	; 255
    3c1c:	fe 01       	movw	r30, r28
    3c1e:	e7 55       	subi	r30, 0x57	; 87
    3c20:	ff 4f       	sbci	r31, 0xFF	; 255
    3c22:	80 81       	ld	r24, Z
    3c24:	8f 5f       	subi	r24, 0xFF	; 255
    3c26:	8c 93       	st	X, r24
    3c28:	fe 01       	movw	r30, r28
    3c2a:	e7 55       	subi	r30, 0x57	; 87
    3c2c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c2e:	80 81       	ld	r24, Z
    3c30:	84 31       	cpi	r24, 0x14	; 20
    3c32:	08 f4       	brcc	.+2      	; 0x3c36 <BuzzerSound+0xbac>
    3c34:	ae ce       	rjmp	.-676    	; 0x3992 <BuzzerSound+0x908>
    3c36:	80 e0       	ldi	r24, 0x00	; 0
    3c38:	90 e0       	ldi	r25, 0x00	; 0
    3c3a:	aa e7       	ldi	r26, 0x7A	; 122
    3c3c:	b4 e4       	ldi	r27, 0x44	; 68
    3c3e:	8d ab       	std	Y+53, r24	; 0x35
    3c40:	9e ab       	std	Y+54, r25	; 0x36
    3c42:	af ab       	std	Y+55, r26	; 0x37
    3c44:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c46:	6d a9       	ldd	r22, Y+53	; 0x35
    3c48:	7e a9       	ldd	r23, Y+54	; 0x36
    3c4a:	8f a9       	ldd	r24, Y+55	; 0x37
    3c4c:	98 ad       	ldd	r25, Y+56	; 0x38
    3c4e:	20 e0       	ldi	r18, 0x00	; 0
    3c50:	30 e0       	ldi	r19, 0x00	; 0
    3c52:	4a ef       	ldi	r20, 0xFA	; 250
    3c54:	54 e4       	ldi	r21, 0x44	; 68
    3c56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c5a:	dc 01       	movw	r26, r24
    3c5c:	cb 01       	movw	r24, r22
    3c5e:	89 ab       	std	Y+49, r24	; 0x31
    3c60:	9a ab       	std	Y+50, r25	; 0x32
    3c62:	ab ab       	std	Y+51, r26	; 0x33
    3c64:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3c66:	69 a9       	ldd	r22, Y+49	; 0x31
    3c68:	7a a9       	ldd	r23, Y+50	; 0x32
    3c6a:	8b a9       	ldd	r24, Y+51	; 0x33
    3c6c:	9c a9       	ldd	r25, Y+52	; 0x34
    3c6e:	20 e0       	ldi	r18, 0x00	; 0
    3c70:	30 e0       	ldi	r19, 0x00	; 0
    3c72:	40 e8       	ldi	r20, 0x80	; 128
    3c74:	5f e3       	ldi	r21, 0x3F	; 63
    3c76:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3c7a:	88 23       	and	r24, r24
    3c7c:	2c f4       	brge	.+10     	; 0x3c88 <BuzzerSound+0xbfe>
		__ticks = 1;
    3c7e:	81 e0       	ldi	r24, 0x01	; 1
    3c80:	90 e0       	ldi	r25, 0x00	; 0
    3c82:	98 ab       	std	Y+48, r25	; 0x30
    3c84:	8f a7       	std	Y+47, r24	; 0x2f
    3c86:	3f c0       	rjmp	.+126    	; 0x3d06 <BuzzerSound+0xc7c>
	else if (__tmp > 65535)
    3c88:	69 a9       	ldd	r22, Y+49	; 0x31
    3c8a:	7a a9       	ldd	r23, Y+50	; 0x32
    3c8c:	8b a9       	ldd	r24, Y+51	; 0x33
    3c8e:	9c a9       	ldd	r25, Y+52	; 0x34
    3c90:	20 e0       	ldi	r18, 0x00	; 0
    3c92:	3f ef       	ldi	r19, 0xFF	; 255
    3c94:	4f e7       	ldi	r20, 0x7F	; 127
    3c96:	57 e4       	ldi	r21, 0x47	; 71
    3c98:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3c9c:	18 16       	cp	r1, r24
    3c9e:	4c f5       	brge	.+82     	; 0x3cf2 <BuzzerSound+0xc68>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ca0:	6d a9       	ldd	r22, Y+53	; 0x35
    3ca2:	7e a9       	ldd	r23, Y+54	; 0x36
    3ca4:	8f a9       	ldd	r24, Y+55	; 0x37
    3ca6:	98 ad       	ldd	r25, Y+56	; 0x38
    3ca8:	20 e0       	ldi	r18, 0x00	; 0
    3caa:	30 e0       	ldi	r19, 0x00	; 0
    3cac:	40 e2       	ldi	r20, 0x20	; 32
    3cae:	51 e4       	ldi	r21, 0x41	; 65
    3cb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cb4:	dc 01       	movw	r26, r24
    3cb6:	cb 01       	movw	r24, r22
    3cb8:	bc 01       	movw	r22, r24
    3cba:	cd 01       	movw	r24, r26
    3cbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cc0:	dc 01       	movw	r26, r24
    3cc2:	cb 01       	movw	r24, r22
    3cc4:	98 ab       	std	Y+48, r25	; 0x30
    3cc6:	8f a7       	std	Y+47, r24	; 0x2f
    3cc8:	0f c0       	rjmp	.+30     	; 0x3ce8 <BuzzerSound+0xc5e>
    3cca:	88 ec       	ldi	r24, 0xC8	; 200
    3ccc:	90 e0       	ldi	r25, 0x00	; 0
    3cce:	9e a7       	std	Y+46, r25	; 0x2e
    3cd0:	8d a7       	std	Y+45, r24	; 0x2d
    3cd2:	8d a5       	ldd	r24, Y+45	; 0x2d
    3cd4:	9e a5       	ldd	r25, Y+46	; 0x2e
    3cd6:	01 97       	sbiw	r24, 0x01	; 1
    3cd8:	f1 f7       	brne	.-4      	; 0x3cd6 <BuzzerSound+0xc4c>
    3cda:	9e a7       	std	Y+46, r25	; 0x2e
    3cdc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cde:	8f a5       	ldd	r24, Y+47	; 0x2f
    3ce0:	98 a9       	ldd	r25, Y+48	; 0x30
    3ce2:	01 97       	sbiw	r24, 0x01	; 1
    3ce4:	98 ab       	std	Y+48, r25	; 0x30
    3ce6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ce8:	8f a5       	ldd	r24, Y+47	; 0x2f
    3cea:	98 a9       	ldd	r25, Y+48	; 0x30
    3cec:	00 97       	sbiw	r24, 0x00	; 0
    3cee:	69 f7       	brne	.-38     	; 0x3cca <BuzzerSound+0xc40>
    3cf0:	14 c0       	rjmp	.+40     	; 0x3d1a <BuzzerSound+0xc90>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cf2:	69 a9       	ldd	r22, Y+49	; 0x31
    3cf4:	7a a9       	ldd	r23, Y+50	; 0x32
    3cf6:	8b a9       	ldd	r24, Y+51	; 0x33
    3cf8:	9c a9       	ldd	r25, Y+52	; 0x34
    3cfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cfe:	dc 01       	movw	r26, r24
    3d00:	cb 01       	movw	r24, r22
    3d02:	98 ab       	std	Y+48, r25	; 0x30
    3d04:	8f a7       	std	Y+47, r24	; 0x2f
    3d06:	8f a5       	ldd	r24, Y+47	; 0x2f
    3d08:	98 a9       	ldd	r25, Y+48	; 0x30
    3d0a:	9c a7       	std	Y+44, r25	; 0x2c
    3d0c:	8b a7       	std	Y+43, r24	; 0x2b
    3d0e:	8b a5       	ldd	r24, Y+43	; 0x2b
    3d10:	9c a5       	ldd	r25, Y+44	; 0x2c
    3d12:	01 97       	sbiw	r24, 0x01	; 1
    3d14:	f1 f7       	brne	.-4      	; 0x3d12 <BuzzerSound+0xc88>
    3d16:	9c a7       	std	Y+44, r25	; 0x2c
    3d18:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(100);
		DIO_u8SetPinValue(DIO_PORTB,DIO_PIN7,DIO_PIN_LOW);
		_delay_ms(100);
	}
	_delay_ms(1000);
	for(i=0;i<20;i++){
    3d1a:	fe 01       	movw	r30, r28
    3d1c:	e7 55       	subi	r30, 0x57	; 87
    3d1e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d20:	10 82       	st	Z, r1
    3d22:	f7 c0       	rjmp	.+494    	; 0x3f12 <BuzzerSound+0xe88>
		DIO_u8SetPinValue(DIO_PORTB,DIO_PIN7,DIO_PIN_HIGH);
    3d24:	81 e0       	ldi	r24, 0x01	; 1
    3d26:	67 e0       	ldi	r22, 0x07	; 7
    3d28:	41 e0       	ldi	r20, 0x01	; 1
    3d2a:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_u8SetPinValue>
    3d2e:	80 e0       	ldi	r24, 0x00	; 0
    3d30:	90 e0       	ldi	r25, 0x00	; 0
    3d32:	a8 e4       	ldi	r26, 0x48	; 72
    3d34:	b3 e4       	ldi	r27, 0x43	; 67
    3d36:	8f a3       	std	Y+39, r24	; 0x27
    3d38:	98 a7       	std	Y+40, r25	; 0x28
    3d3a:	a9 a7       	std	Y+41, r26	; 0x29
    3d3c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d3e:	6f a1       	ldd	r22, Y+39	; 0x27
    3d40:	78 a5       	ldd	r23, Y+40	; 0x28
    3d42:	89 a5       	ldd	r24, Y+41	; 0x29
    3d44:	9a a5       	ldd	r25, Y+42	; 0x2a
    3d46:	20 e0       	ldi	r18, 0x00	; 0
    3d48:	30 e0       	ldi	r19, 0x00	; 0
    3d4a:	4a ef       	ldi	r20, 0xFA	; 250
    3d4c:	54 e4       	ldi	r21, 0x44	; 68
    3d4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d52:	dc 01       	movw	r26, r24
    3d54:	cb 01       	movw	r24, r22
    3d56:	8b a3       	std	Y+35, r24	; 0x23
    3d58:	9c a3       	std	Y+36, r25	; 0x24
    3d5a:	ad a3       	std	Y+37, r26	; 0x25
    3d5c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3d5e:	6b a1       	ldd	r22, Y+35	; 0x23
    3d60:	7c a1       	ldd	r23, Y+36	; 0x24
    3d62:	8d a1       	ldd	r24, Y+37	; 0x25
    3d64:	9e a1       	ldd	r25, Y+38	; 0x26
    3d66:	20 e0       	ldi	r18, 0x00	; 0
    3d68:	30 e0       	ldi	r19, 0x00	; 0
    3d6a:	40 e8       	ldi	r20, 0x80	; 128
    3d6c:	5f e3       	ldi	r21, 0x3F	; 63
    3d6e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3d72:	88 23       	and	r24, r24
    3d74:	2c f4       	brge	.+10     	; 0x3d80 <BuzzerSound+0xcf6>
		__ticks = 1;
    3d76:	81 e0       	ldi	r24, 0x01	; 1
    3d78:	90 e0       	ldi	r25, 0x00	; 0
    3d7a:	9a a3       	std	Y+34, r25	; 0x22
    3d7c:	89 a3       	std	Y+33, r24	; 0x21
    3d7e:	3f c0       	rjmp	.+126    	; 0x3dfe <BuzzerSound+0xd74>
	else if (__tmp > 65535)
    3d80:	6b a1       	ldd	r22, Y+35	; 0x23
    3d82:	7c a1       	ldd	r23, Y+36	; 0x24
    3d84:	8d a1       	ldd	r24, Y+37	; 0x25
    3d86:	9e a1       	ldd	r25, Y+38	; 0x26
    3d88:	20 e0       	ldi	r18, 0x00	; 0
    3d8a:	3f ef       	ldi	r19, 0xFF	; 255
    3d8c:	4f e7       	ldi	r20, 0x7F	; 127
    3d8e:	57 e4       	ldi	r21, 0x47	; 71
    3d90:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3d94:	18 16       	cp	r1, r24
    3d96:	4c f5       	brge	.+82     	; 0x3dea <BuzzerSound+0xd60>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d98:	6f a1       	ldd	r22, Y+39	; 0x27
    3d9a:	78 a5       	ldd	r23, Y+40	; 0x28
    3d9c:	89 a5       	ldd	r24, Y+41	; 0x29
    3d9e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3da0:	20 e0       	ldi	r18, 0x00	; 0
    3da2:	30 e0       	ldi	r19, 0x00	; 0
    3da4:	40 e2       	ldi	r20, 0x20	; 32
    3da6:	51 e4       	ldi	r21, 0x41	; 65
    3da8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dac:	dc 01       	movw	r26, r24
    3dae:	cb 01       	movw	r24, r22
    3db0:	bc 01       	movw	r22, r24
    3db2:	cd 01       	movw	r24, r26
    3db4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3db8:	dc 01       	movw	r26, r24
    3dba:	cb 01       	movw	r24, r22
    3dbc:	9a a3       	std	Y+34, r25	; 0x22
    3dbe:	89 a3       	std	Y+33, r24	; 0x21
    3dc0:	0f c0       	rjmp	.+30     	; 0x3de0 <BuzzerSound+0xd56>
    3dc2:	88 ec       	ldi	r24, 0xC8	; 200
    3dc4:	90 e0       	ldi	r25, 0x00	; 0
    3dc6:	98 a3       	std	Y+32, r25	; 0x20
    3dc8:	8f 8f       	std	Y+31, r24	; 0x1f
    3dca:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3dcc:	98 a1       	ldd	r25, Y+32	; 0x20
    3dce:	01 97       	sbiw	r24, 0x01	; 1
    3dd0:	f1 f7       	brne	.-4      	; 0x3dce <BuzzerSound+0xd44>
    3dd2:	98 a3       	std	Y+32, r25	; 0x20
    3dd4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3dd6:	89 a1       	ldd	r24, Y+33	; 0x21
    3dd8:	9a a1       	ldd	r25, Y+34	; 0x22
    3dda:	01 97       	sbiw	r24, 0x01	; 1
    3ddc:	9a a3       	std	Y+34, r25	; 0x22
    3dde:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3de0:	89 a1       	ldd	r24, Y+33	; 0x21
    3de2:	9a a1       	ldd	r25, Y+34	; 0x22
    3de4:	00 97       	sbiw	r24, 0x00	; 0
    3de6:	69 f7       	brne	.-38     	; 0x3dc2 <BuzzerSound+0xd38>
    3de8:	14 c0       	rjmp	.+40     	; 0x3e12 <BuzzerSound+0xd88>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3dea:	6b a1       	ldd	r22, Y+35	; 0x23
    3dec:	7c a1       	ldd	r23, Y+36	; 0x24
    3dee:	8d a1       	ldd	r24, Y+37	; 0x25
    3df0:	9e a1       	ldd	r25, Y+38	; 0x26
    3df2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3df6:	dc 01       	movw	r26, r24
    3df8:	cb 01       	movw	r24, r22
    3dfa:	9a a3       	std	Y+34, r25	; 0x22
    3dfc:	89 a3       	std	Y+33, r24	; 0x21
    3dfe:	89 a1       	ldd	r24, Y+33	; 0x21
    3e00:	9a a1       	ldd	r25, Y+34	; 0x22
    3e02:	9e 8f       	std	Y+30, r25	; 0x1e
    3e04:	8d 8f       	std	Y+29, r24	; 0x1d
    3e06:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3e08:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3e0a:	01 97       	sbiw	r24, 0x01	; 1
    3e0c:	f1 f7       	brne	.-4      	; 0x3e0a <BuzzerSound+0xd80>
    3e0e:	9e 8f       	std	Y+30, r25	; 0x1e
    3e10:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(200);
		DIO_u8SetPinValue(DIO_PORTB,DIO_PIN7,DIO_PIN_LOW);
    3e12:	81 e0       	ldi	r24, 0x01	; 1
    3e14:	67 e0       	ldi	r22, 0x07	; 7
    3e16:	40 e0       	ldi	r20, 0x00	; 0
    3e18:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_u8SetPinValue>
    3e1c:	80 e0       	ldi	r24, 0x00	; 0
    3e1e:	90 e0       	ldi	r25, 0x00	; 0
    3e20:	a8 e4       	ldi	r26, 0x48	; 72
    3e22:	b3 e4       	ldi	r27, 0x43	; 67
    3e24:	89 8f       	std	Y+25, r24	; 0x19
    3e26:	9a 8f       	std	Y+26, r25	; 0x1a
    3e28:	ab 8f       	std	Y+27, r26	; 0x1b
    3e2a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e2c:	69 8d       	ldd	r22, Y+25	; 0x19
    3e2e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3e30:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3e32:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3e34:	20 e0       	ldi	r18, 0x00	; 0
    3e36:	30 e0       	ldi	r19, 0x00	; 0
    3e38:	4a ef       	ldi	r20, 0xFA	; 250
    3e3a:	54 e4       	ldi	r21, 0x44	; 68
    3e3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e40:	dc 01       	movw	r26, r24
    3e42:	cb 01       	movw	r24, r22
    3e44:	8d 8b       	std	Y+21, r24	; 0x15
    3e46:	9e 8b       	std	Y+22, r25	; 0x16
    3e48:	af 8b       	std	Y+23, r26	; 0x17
    3e4a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3e4c:	6d 89       	ldd	r22, Y+21	; 0x15
    3e4e:	7e 89       	ldd	r23, Y+22	; 0x16
    3e50:	8f 89       	ldd	r24, Y+23	; 0x17
    3e52:	98 8d       	ldd	r25, Y+24	; 0x18
    3e54:	20 e0       	ldi	r18, 0x00	; 0
    3e56:	30 e0       	ldi	r19, 0x00	; 0
    3e58:	40 e8       	ldi	r20, 0x80	; 128
    3e5a:	5f e3       	ldi	r21, 0x3F	; 63
    3e5c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3e60:	88 23       	and	r24, r24
    3e62:	2c f4       	brge	.+10     	; 0x3e6e <BuzzerSound+0xde4>
		__ticks = 1;
    3e64:	81 e0       	ldi	r24, 0x01	; 1
    3e66:	90 e0       	ldi	r25, 0x00	; 0
    3e68:	9c 8b       	std	Y+20, r25	; 0x14
    3e6a:	8b 8b       	std	Y+19, r24	; 0x13
    3e6c:	3f c0       	rjmp	.+126    	; 0x3eec <BuzzerSound+0xe62>
	else if (__tmp > 65535)
    3e6e:	6d 89       	ldd	r22, Y+21	; 0x15
    3e70:	7e 89       	ldd	r23, Y+22	; 0x16
    3e72:	8f 89       	ldd	r24, Y+23	; 0x17
    3e74:	98 8d       	ldd	r25, Y+24	; 0x18
    3e76:	20 e0       	ldi	r18, 0x00	; 0
    3e78:	3f ef       	ldi	r19, 0xFF	; 255
    3e7a:	4f e7       	ldi	r20, 0x7F	; 127
    3e7c:	57 e4       	ldi	r21, 0x47	; 71
    3e7e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3e82:	18 16       	cp	r1, r24
    3e84:	4c f5       	brge	.+82     	; 0x3ed8 <BuzzerSound+0xe4e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e86:	69 8d       	ldd	r22, Y+25	; 0x19
    3e88:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3e8a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3e8c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3e8e:	20 e0       	ldi	r18, 0x00	; 0
    3e90:	30 e0       	ldi	r19, 0x00	; 0
    3e92:	40 e2       	ldi	r20, 0x20	; 32
    3e94:	51 e4       	ldi	r21, 0x41	; 65
    3e96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e9a:	dc 01       	movw	r26, r24
    3e9c:	cb 01       	movw	r24, r22
    3e9e:	bc 01       	movw	r22, r24
    3ea0:	cd 01       	movw	r24, r26
    3ea2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ea6:	dc 01       	movw	r26, r24
    3ea8:	cb 01       	movw	r24, r22
    3eaa:	9c 8b       	std	Y+20, r25	; 0x14
    3eac:	8b 8b       	std	Y+19, r24	; 0x13
    3eae:	0f c0       	rjmp	.+30     	; 0x3ece <BuzzerSound+0xe44>
    3eb0:	88 ec       	ldi	r24, 0xC8	; 200
    3eb2:	90 e0       	ldi	r25, 0x00	; 0
    3eb4:	9a 8b       	std	Y+18, r25	; 0x12
    3eb6:	89 8b       	std	Y+17, r24	; 0x11
    3eb8:	89 89       	ldd	r24, Y+17	; 0x11
    3eba:	9a 89       	ldd	r25, Y+18	; 0x12
    3ebc:	01 97       	sbiw	r24, 0x01	; 1
    3ebe:	f1 f7       	brne	.-4      	; 0x3ebc <BuzzerSound+0xe32>
    3ec0:	9a 8b       	std	Y+18, r25	; 0x12
    3ec2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ec4:	8b 89       	ldd	r24, Y+19	; 0x13
    3ec6:	9c 89       	ldd	r25, Y+20	; 0x14
    3ec8:	01 97       	sbiw	r24, 0x01	; 1
    3eca:	9c 8b       	std	Y+20, r25	; 0x14
    3ecc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ece:	8b 89       	ldd	r24, Y+19	; 0x13
    3ed0:	9c 89       	ldd	r25, Y+20	; 0x14
    3ed2:	00 97       	sbiw	r24, 0x00	; 0
    3ed4:	69 f7       	brne	.-38     	; 0x3eb0 <BuzzerSound+0xe26>
    3ed6:	14 c0       	rjmp	.+40     	; 0x3f00 <BuzzerSound+0xe76>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ed8:	6d 89       	ldd	r22, Y+21	; 0x15
    3eda:	7e 89       	ldd	r23, Y+22	; 0x16
    3edc:	8f 89       	ldd	r24, Y+23	; 0x17
    3ede:	98 8d       	ldd	r25, Y+24	; 0x18
    3ee0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ee4:	dc 01       	movw	r26, r24
    3ee6:	cb 01       	movw	r24, r22
    3ee8:	9c 8b       	std	Y+20, r25	; 0x14
    3eea:	8b 8b       	std	Y+19, r24	; 0x13
    3eec:	8b 89       	ldd	r24, Y+19	; 0x13
    3eee:	9c 89       	ldd	r25, Y+20	; 0x14
    3ef0:	98 8b       	std	Y+16, r25	; 0x10
    3ef2:	8f 87       	std	Y+15, r24	; 0x0f
    3ef4:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ef6:	98 89       	ldd	r25, Y+16	; 0x10
    3ef8:	01 97       	sbiw	r24, 0x01	; 1
    3efa:	f1 f7       	brne	.-4      	; 0x3ef8 <BuzzerSound+0xe6e>
    3efc:	98 8b       	std	Y+16, r25	; 0x10
    3efe:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(100);
		DIO_u8SetPinValue(DIO_PORTB,DIO_PIN7,DIO_PIN_LOW);
		_delay_ms(100);
	}
	_delay_ms(1000);
	for(i=0;i<20;i++){
    3f00:	de 01       	movw	r26, r28
    3f02:	a7 55       	subi	r26, 0x57	; 87
    3f04:	bf 4f       	sbci	r27, 0xFF	; 255
    3f06:	fe 01       	movw	r30, r28
    3f08:	e7 55       	subi	r30, 0x57	; 87
    3f0a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f0c:	80 81       	ld	r24, Z
    3f0e:	8f 5f       	subi	r24, 0xFF	; 255
    3f10:	8c 93       	st	X, r24
    3f12:	fe 01       	movw	r30, r28
    3f14:	e7 55       	subi	r30, 0x57	; 87
    3f16:	ff 4f       	sbci	r31, 0xFF	; 255
    3f18:	80 81       	ld	r24, Z
    3f1a:	84 31       	cpi	r24, 0x14	; 20
    3f1c:	08 f4       	brcc	.+2      	; 0x3f20 <BuzzerSound+0xe96>
    3f1e:	02 cf       	rjmp	.-508    	; 0x3d24 <BuzzerSound+0xc9a>
    3f20:	80 e0       	ldi	r24, 0x00	; 0
    3f22:	90 e0       	ldi	r25, 0x00	; 0
    3f24:	aa e7       	ldi	r26, 0x7A	; 122
    3f26:	b4 e4       	ldi	r27, 0x44	; 68
    3f28:	8b 87       	std	Y+11, r24	; 0x0b
    3f2a:	9c 87       	std	Y+12, r25	; 0x0c
    3f2c:	ad 87       	std	Y+13, r26	; 0x0d
    3f2e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f30:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f32:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f34:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f36:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f38:	20 e0       	ldi	r18, 0x00	; 0
    3f3a:	30 e0       	ldi	r19, 0x00	; 0
    3f3c:	4a ef       	ldi	r20, 0xFA	; 250
    3f3e:	54 e4       	ldi	r21, 0x44	; 68
    3f40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f44:	dc 01       	movw	r26, r24
    3f46:	cb 01       	movw	r24, r22
    3f48:	8f 83       	std	Y+7, r24	; 0x07
    3f4a:	98 87       	std	Y+8, r25	; 0x08
    3f4c:	a9 87       	std	Y+9, r26	; 0x09
    3f4e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3f50:	6f 81       	ldd	r22, Y+7	; 0x07
    3f52:	78 85       	ldd	r23, Y+8	; 0x08
    3f54:	89 85       	ldd	r24, Y+9	; 0x09
    3f56:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f58:	20 e0       	ldi	r18, 0x00	; 0
    3f5a:	30 e0       	ldi	r19, 0x00	; 0
    3f5c:	40 e8       	ldi	r20, 0x80	; 128
    3f5e:	5f e3       	ldi	r21, 0x3F	; 63
    3f60:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3f64:	88 23       	and	r24, r24
    3f66:	2c f4       	brge	.+10     	; 0x3f72 <BuzzerSound+0xee8>
		__ticks = 1;
    3f68:	81 e0       	ldi	r24, 0x01	; 1
    3f6a:	90 e0       	ldi	r25, 0x00	; 0
    3f6c:	9e 83       	std	Y+6, r25	; 0x06
    3f6e:	8d 83       	std	Y+5, r24	; 0x05
    3f70:	3f c0       	rjmp	.+126    	; 0x3ff0 <BuzzerSound+0xf66>
	else if (__tmp > 65535)
    3f72:	6f 81       	ldd	r22, Y+7	; 0x07
    3f74:	78 85       	ldd	r23, Y+8	; 0x08
    3f76:	89 85       	ldd	r24, Y+9	; 0x09
    3f78:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f7a:	20 e0       	ldi	r18, 0x00	; 0
    3f7c:	3f ef       	ldi	r19, 0xFF	; 255
    3f7e:	4f e7       	ldi	r20, 0x7F	; 127
    3f80:	57 e4       	ldi	r21, 0x47	; 71
    3f82:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3f86:	18 16       	cp	r1, r24
    3f88:	4c f5       	brge	.+82     	; 0x3fdc <BuzzerSound+0xf52>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f8a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f8c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f90:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f92:	20 e0       	ldi	r18, 0x00	; 0
    3f94:	30 e0       	ldi	r19, 0x00	; 0
    3f96:	40 e2       	ldi	r20, 0x20	; 32
    3f98:	51 e4       	ldi	r21, 0x41	; 65
    3f9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f9e:	dc 01       	movw	r26, r24
    3fa0:	cb 01       	movw	r24, r22
    3fa2:	bc 01       	movw	r22, r24
    3fa4:	cd 01       	movw	r24, r26
    3fa6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3faa:	dc 01       	movw	r26, r24
    3fac:	cb 01       	movw	r24, r22
    3fae:	9e 83       	std	Y+6, r25	; 0x06
    3fb0:	8d 83       	std	Y+5, r24	; 0x05
    3fb2:	0f c0       	rjmp	.+30     	; 0x3fd2 <BuzzerSound+0xf48>
    3fb4:	88 ec       	ldi	r24, 0xC8	; 200
    3fb6:	90 e0       	ldi	r25, 0x00	; 0
    3fb8:	9c 83       	std	Y+4, r25	; 0x04
    3fba:	8b 83       	std	Y+3, r24	; 0x03
    3fbc:	8b 81       	ldd	r24, Y+3	; 0x03
    3fbe:	9c 81       	ldd	r25, Y+4	; 0x04
    3fc0:	01 97       	sbiw	r24, 0x01	; 1
    3fc2:	f1 f7       	brne	.-4      	; 0x3fc0 <BuzzerSound+0xf36>
    3fc4:	9c 83       	std	Y+4, r25	; 0x04
    3fc6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fc8:	8d 81       	ldd	r24, Y+5	; 0x05
    3fca:	9e 81       	ldd	r25, Y+6	; 0x06
    3fcc:	01 97       	sbiw	r24, 0x01	; 1
    3fce:	9e 83       	std	Y+6, r25	; 0x06
    3fd0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fd2:	8d 81       	ldd	r24, Y+5	; 0x05
    3fd4:	9e 81       	ldd	r25, Y+6	; 0x06
    3fd6:	00 97       	sbiw	r24, 0x00	; 0
    3fd8:	69 f7       	brne	.-38     	; 0x3fb4 <BuzzerSound+0xf2a>
    3fda:	14 c0       	rjmp	.+40     	; 0x4004 <BuzzerSound+0xf7a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fdc:	6f 81       	ldd	r22, Y+7	; 0x07
    3fde:	78 85       	ldd	r23, Y+8	; 0x08
    3fe0:	89 85       	ldd	r24, Y+9	; 0x09
    3fe2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fe4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fe8:	dc 01       	movw	r26, r24
    3fea:	cb 01       	movw	r24, r22
    3fec:	9e 83       	std	Y+6, r25	; 0x06
    3fee:	8d 83       	std	Y+5, r24	; 0x05
    3ff0:	8d 81       	ldd	r24, Y+5	; 0x05
    3ff2:	9e 81       	ldd	r25, Y+6	; 0x06
    3ff4:	9a 83       	std	Y+2, r25	; 0x02
    3ff6:	89 83       	std	Y+1, r24	; 0x01
    3ff8:	89 81       	ldd	r24, Y+1	; 0x01
    3ffa:	9a 81       	ldd	r25, Y+2	; 0x02
    3ffc:	01 97       	sbiw	r24, 0x01	; 1
    3ffe:	f1 f7       	brne	.-4      	; 0x3ffc <BuzzerSound+0xf72>
    4000:	9a 83       	std	Y+2, r25	; 0x02
    4002:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(200);
		DIO_u8SetPinValue(DIO_PORTB,DIO_PIN7,DIO_PIN_LOW);
		_delay_ms(200);
	}
	_delay_ms(1000);
}
    4004:	c7 55       	subi	r28, 0x57	; 87
    4006:	df 4f       	sbci	r29, 0xFF	; 255
    4008:	0f b6       	in	r0, 0x3f	; 63
    400a:	f8 94       	cli
    400c:	de bf       	out	0x3e, r29	; 62
    400e:	0f be       	out	0x3f, r0	; 63
    4010:	cd bf       	out	0x3d, r28	; 61
    4012:	cf 91       	pop	r28
    4014:	df 91       	pop	r29
    4016:	1f 91       	pop	r17
    4018:	0f 91       	pop	r16
    401a:	08 95       	ret

0000401c <__mulsi3>:
    401c:	62 9f       	mul	r22, r18
    401e:	d0 01       	movw	r26, r0
    4020:	73 9f       	mul	r23, r19
    4022:	f0 01       	movw	r30, r0
    4024:	82 9f       	mul	r24, r18
    4026:	e0 0d       	add	r30, r0
    4028:	f1 1d       	adc	r31, r1
    402a:	64 9f       	mul	r22, r20
    402c:	e0 0d       	add	r30, r0
    402e:	f1 1d       	adc	r31, r1
    4030:	92 9f       	mul	r25, r18
    4032:	f0 0d       	add	r31, r0
    4034:	83 9f       	mul	r24, r19
    4036:	f0 0d       	add	r31, r0
    4038:	74 9f       	mul	r23, r20
    403a:	f0 0d       	add	r31, r0
    403c:	65 9f       	mul	r22, r21
    403e:	f0 0d       	add	r31, r0
    4040:	99 27       	eor	r25, r25
    4042:	72 9f       	mul	r23, r18
    4044:	b0 0d       	add	r27, r0
    4046:	e1 1d       	adc	r30, r1
    4048:	f9 1f       	adc	r31, r25
    404a:	63 9f       	mul	r22, r19
    404c:	b0 0d       	add	r27, r0
    404e:	e1 1d       	adc	r30, r1
    4050:	f9 1f       	adc	r31, r25
    4052:	bd 01       	movw	r22, r26
    4054:	cf 01       	movw	r24, r30
    4056:	11 24       	eor	r1, r1
    4058:	08 95       	ret

0000405a <__udivmodhi4>:
    405a:	aa 1b       	sub	r26, r26
    405c:	bb 1b       	sub	r27, r27
    405e:	51 e1       	ldi	r21, 0x11	; 17
    4060:	07 c0       	rjmp	.+14     	; 0x4070 <__udivmodhi4_ep>

00004062 <__udivmodhi4_loop>:
    4062:	aa 1f       	adc	r26, r26
    4064:	bb 1f       	adc	r27, r27
    4066:	a6 17       	cp	r26, r22
    4068:	b7 07       	cpc	r27, r23
    406a:	10 f0       	brcs	.+4      	; 0x4070 <__udivmodhi4_ep>
    406c:	a6 1b       	sub	r26, r22
    406e:	b7 0b       	sbc	r27, r23

00004070 <__udivmodhi4_ep>:
    4070:	88 1f       	adc	r24, r24
    4072:	99 1f       	adc	r25, r25
    4074:	5a 95       	dec	r21
    4076:	a9 f7       	brne	.-22     	; 0x4062 <__udivmodhi4_loop>
    4078:	80 95       	com	r24
    407a:	90 95       	com	r25
    407c:	bc 01       	movw	r22, r24
    407e:	cd 01       	movw	r24, r26
    4080:	08 95       	ret

00004082 <__udivmodsi4>:
    4082:	a1 e2       	ldi	r26, 0x21	; 33
    4084:	1a 2e       	mov	r1, r26
    4086:	aa 1b       	sub	r26, r26
    4088:	bb 1b       	sub	r27, r27
    408a:	fd 01       	movw	r30, r26
    408c:	0d c0       	rjmp	.+26     	; 0x40a8 <__udivmodsi4_ep>

0000408e <__udivmodsi4_loop>:
    408e:	aa 1f       	adc	r26, r26
    4090:	bb 1f       	adc	r27, r27
    4092:	ee 1f       	adc	r30, r30
    4094:	ff 1f       	adc	r31, r31
    4096:	a2 17       	cp	r26, r18
    4098:	b3 07       	cpc	r27, r19
    409a:	e4 07       	cpc	r30, r20
    409c:	f5 07       	cpc	r31, r21
    409e:	20 f0       	brcs	.+8      	; 0x40a8 <__udivmodsi4_ep>
    40a0:	a2 1b       	sub	r26, r18
    40a2:	b3 0b       	sbc	r27, r19
    40a4:	e4 0b       	sbc	r30, r20
    40a6:	f5 0b       	sbc	r31, r21

000040a8 <__udivmodsi4_ep>:
    40a8:	66 1f       	adc	r22, r22
    40aa:	77 1f       	adc	r23, r23
    40ac:	88 1f       	adc	r24, r24
    40ae:	99 1f       	adc	r25, r25
    40b0:	1a 94       	dec	r1
    40b2:	69 f7       	brne	.-38     	; 0x408e <__udivmodsi4_loop>
    40b4:	60 95       	com	r22
    40b6:	70 95       	com	r23
    40b8:	80 95       	com	r24
    40ba:	90 95       	com	r25
    40bc:	9b 01       	movw	r18, r22
    40be:	ac 01       	movw	r20, r24
    40c0:	bd 01       	movw	r22, r26
    40c2:	cf 01       	movw	r24, r30
    40c4:	08 95       	ret

000040c6 <__prologue_saves__>:
    40c6:	2f 92       	push	r2
    40c8:	3f 92       	push	r3
    40ca:	4f 92       	push	r4
    40cc:	5f 92       	push	r5
    40ce:	6f 92       	push	r6
    40d0:	7f 92       	push	r7
    40d2:	8f 92       	push	r8
    40d4:	9f 92       	push	r9
    40d6:	af 92       	push	r10
    40d8:	bf 92       	push	r11
    40da:	cf 92       	push	r12
    40dc:	df 92       	push	r13
    40de:	ef 92       	push	r14
    40e0:	ff 92       	push	r15
    40e2:	0f 93       	push	r16
    40e4:	1f 93       	push	r17
    40e6:	cf 93       	push	r28
    40e8:	df 93       	push	r29
    40ea:	cd b7       	in	r28, 0x3d	; 61
    40ec:	de b7       	in	r29, 0x3e	; 62
    40ee:	ca 1b       	sub	r28, r26
    40f0:	db 0b       	sbc	r29, r27
    40f2:	0f b6       	in	r0, 0x3f	; 63
    40f4:	f8 94       	cli
    40f6:	de bf       	out	0x3e, r29	; 62
    40f8:	0f be       	out	0x3f, r0	; 63
    40fa:	cd bf       	out	0x3d, r28	; 61
    40fc:	09 94       	ijmp

000040fe <__epilogue_restores__>:
    40fe:	2a 88       	ldd	r2, Y+18	; 0x12
    4100:	39 88       	ldd	r3, Y+17	; 0x11
    4102:	48 88       	ldd	r4, Y+16	; 0x10
    4104:	5f 84       	ldd	r5, Y+15	; 0x0f
    4106:	6e 84       	ldd	r6, Y+14	; 0x0e
    4108:	7d 84       	ldd	r7, Y+13	; 0x0d
    410a:	8c 84       	ldd	r8, Y+12	; 0x0c
    410c:	9b 84       	ldd	r9, Y+11	; 0x0b
    410e:	aa 84       	ldd	r10, Y+10	; 0x0a
    4110:	b9 84       	ldd	r11, Y+9	; 0x09
    4112:	c8 84       	ldd	r12, Y+8	; 0x08
    4114:	df 80       	ldd	r13, Y+7	; 0x07
    4116:	ee 80       	ldd	r14, Y+6	; 0x06
    4118:	fd 80       	ldd	r15, Y+5	; 0x05
    411a:	0c 81       	ldd	r16, Y+4	; 0x04
    411c:	1b 81       	ldd	r17, Y+3	; 0x03
    411e:	aa 81       	ldd	r26, Y+2	; 0x02
    4120:	b9 81       	ldd	r27, Y+1	; 0x01
    4122:	ce 0f       	add	r28, r30
    4124:	d1 1d       	adc	r29, r1
    4126:	0f b6       	in	r0, 0x3f	; 63
    4128:	f8 94       	cli
    412a:	de bf       	out	0x3e, r29	; 62
    412c:	0f be       	out	0x3f, r0	; 63
    412e:	cd bf       	out	0x3d, r28	; 61
    4130:	ed 01       	movw	r28, r26
    4132:	08 95       	ret

00004134 <_exit>:
    4134:	f8 94       	cli

00004136 <__stop_program>:
    4136:	ff cf       	rjmp	.-2      	; 0x4136 <__stop_program>
